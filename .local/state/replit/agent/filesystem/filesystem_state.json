{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nMIRAGE is a 3D trivia game built with React Three Fiber that combines immersive 3D environments with AI-generated questions. The application features a modern web interface with 3D graphics, multi-language support (English and Arabic), and integrates with OpenAI's GPT-5 for dynamic question generation. Players can enjoy single-player experiences or multiplayer matches while navigating through visually rich 3D scenes.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe frontend is built as a Single Page Application (SPA) using React with TypeScript and Vite as the build tool. The application leverages React Three Fiber for 3D rendering, creating an immersive gaming experience with floating geometric shapes, particle systems, and interactive 3D environments. The UI layer uses Radix UI components with Tailwind CSS for consistent styling and responsive design.\n\n**Key Design Decisions:**\n- **3D-First Approach**: Uses React Three Fiber as the primary rendering engine, allowing for complex 3D scenes and animations\n- **Component-Based UI**: Separates 2D UI elements from 3D scenes, overlaying game interface elements on top of the Canvas\n- **Responsive Design**: Implements mobile-first design principles with adaptive layouts for different screen sizes\n\n## State Management\nThe application uses Zustand for state management, organizing state into focused stores:\n- **useTriviaGame**: Manages game logic, questions, scoring, and game phases\n- **useLanguage**: Handles internationalization between English and Arabic\n- **useAudio**: Controls sound effects and background music\n- **useGame**: Manages overall game phases (ready, playing, ended)\n\n**Rationale**: Zustand was chosen over Redux for its simplicity and TypeScript support, reducing boilerplate while maintaining type safety.\n\n## Backend Architecture\nThe backend follows a RESTful Express.js architecture with TypeScript, implementing a modular route structure. The server handles API endpoints for trivia question generation, user management, and health checks.\n\n**Key Components:**\n- **Express Server**: Handles HTTP requests with comprehensive logging and error handling\n- **Route Organization**: Separates concerns with dedicated route files for different features\n- **Storage Layer**: Implements an abstraction layer (IStorage interface) with in-memory storage for development\n\n## Data Layer\n**Database**: Uses Drizzle ORM with PostgreSQL for type-safe database operations. The schema defines user entities with proper validation using Zod schemas.\n\n**Storage Strategy**: Implements a storage interface pattern allowing for easy switching between storage backends (currently using MemStorage for development, with PostgreSQL ready for production).\n\n## Authentication & Security\nThe application currently implements a basic user system with username/password authentication. Session management is handled through Express sessions with PostgreSQL session storage.\n\n**Security Measures:**\n- Input validation using Zod schemas\n- Environment variable protection for sensitive data\n- CORS configuration for cross-origin requests\n\n## AI Integration\n**OpenAI Integration**: Uses GPT-5 for dynamic trivia question generation with structured prompts to ensure consistent question formats and quality.\n\n**Implementation**: \n- Server-side generation to protect API keys\n- Structured prompts with specific formatting requirements\n- Category and difficulty-based question generation\n- Support for multiple languages in question generation\n\n# External Dependencies\n\n## Core Technologies\n- **React Three Fiber**: 3D rendering and scene management in React\n- **@react-three/drei**: Helper components and utilities for Three.js\n- **@react-three/postprocessing**: Post-processing effects for enhanced visuals\n- **Express.js**: Web server framework for API endpoints\n- **TypeScript**: Type safety across frontend and backend\n\n## Database & ORM\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL\n- **@neondatabase/serverless**: PostgreSQL database connectivity\n- **connect-pg-simple**: PostgreSQL session store for Express\n\n## UI Framework\n- **Radix UI**: Accessible, unstyled UI components\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n\n## Development Tools\n- **Vite**: Fast build tool and development server\n- **TSX**: TypeScript execution for server development\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n## AI & External APIs\n- **OpenAI**: GPT-5 integration for question generation\n- **Zustand**: Lightweight state management\n- **React Query (@tanstack/react-query)**: Server state management and caching\n\n## Audio & Media\n- **GLSL Shader Support**: Custom shader support for advanced visual effects\n- **Audio API**: Web Audio API integration for sound effects and background music\n\n## Utilities\n- **date-fns**: Date manipulation and formatting\n- **clsx & tailwind-merge**: Conditional CSS class management\n- **zod**: Runtime type validation and schema definition","size_bytes":5104},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\nimport glsl from \"vite-plugin-glsl\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    glsl(), // Add GLSL shader support\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // Add support for large models and audio files\n  assetsInclude: [\"**/*.gltf\", \"**/*.glb\", \"**/*.mp3\", \"**/*.ogg\", \"**/*.wav\"],\n});\n","size_bytes":896},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { createServer } from \"http\";\nimport { Server as SocketIOServer } from \"socket.io\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { setupMultiplayer } from \"./multiplayer\";\nimport { errorLoggingMiddleware, globalErrorHandler } from \"./utils/errorLogger\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(errorLoggingMiddleware);\n\n// Session configuration\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'mirage-secret-key-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const httpServer = createServer(app);\n  const io = new SocketIOServer(httpServer, {\n    cors: {\n      origin: process.env.NODE_ENV === \"production\" ? false : \"*\",\n      methods: [\"GET\", \"POST\"]\n    }\n  });\n\n  // Setup multiplayer functionality\n  setupMultiplayer(io);\n\n  const server = await registerRoutes(app, httpServer);\n\n  // Use our custom global error handler\n  app.use(globalErrorHandler);\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client\n  const port = 5000;\n  httpServer.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2575},"server/multiplayer.ts":{"content":"import { Server as SocketIOServer } from 'socket.io';\nimport MatchmakingService from './matchmaking.js';\n\n// Initialize matchmaking service\nconst matchmaking = new MatchmakingService();\n\nexport function setupMultiplayer(io: SocketIOServer) {\n  console.log('Setting up multiplayer functionality...');\n  \n  io.on('connection', (socket) => {\n    console.log('Player connected:', socket.id);\n    \n    // Send online players count\n    socket.emit('playersOnline', io.engine.clientsCount);\n    io.emit('onlineCount', io.engine.clientsCount);\n    \n    // Matchmaking events\n    socket.on('joinQueue', (data) => {\n      const success = matchmaking.joinQueue(socket, data.gameMode, data.playerData);\n      if (success) {\n        console.log(`Player ${data.playerData?.username || socket.id} joined ${data.gameMode} queue`);\n      }\n    });\n    \n    socket.on('leaveQueue', (data) => {\n      matchmaking.leaveQueue(socket, data.gameMode);\n    });\n    \n    // Private room events\n    socket.on('createPrivateRoom', (data) => {\n      const roomCode = matchmaking.createPrivateRoom(socket, data.gameMode, data.playerData);\n      console.log(`Private room created with code: ${roomCode}`);\n    });\n    \n    socket.on('joinPrivateRoom', (data) => {\n      const success = matchmaking.joinPrivateRoom(socket, data.roomCode, data.playerData);\n      if (success) {\n        console.log(`Player joined private room: ${data.roomCode}`);\n      }\n    });\n    \n    // Game events\n    socket.on('answerSubmit', (data) => {\n      matchmaking.handleAnswerSubmission(socket, data.roomId, data);\n    });\n    \n    socket.on('requestNextQuestion', (data) => {\n      // Handle explicit next question requests\n      const room = matchmaking.getRoomInfo(data.roomId);\n      if (room && room.status === 'playing') {\n        matchmaking.nextQuestion(data.roomId);\n      }\n    });\n    \n    socket.on('requestRoomInfo', (data) => {\n      const room = matchmaking.getRoomInfo(data.roomId);\n      if (room) {\n        socket.emit('roomInfo', {\n          roomId: data.roomId,\n          gameMode: room.gameMode,\n          players: room.players.map(p => ({\n            username: p.username,\n            rank: p.rank,\n            premium: p.premium\n          })),\n          status: room.status,\n          currentQuestion: room.currentQuestion,\n          scores: room.scores\n        });\n      }\n    });\n    \n    // Admin/debug events\n    socket.on('getQueueStatus', () => {\n      socket.emit('queueStatus', matchmaking.getQueueStatus());\n    });\n    \n    // Handle disconnect\n    socket.on('disconnect', () => {\n      console.log('Player disconnected:', socket.id);\n      matchmaking.handleDisconnect(socket);\n      \n      // Update online count\n      io.emit('onlineCount', io.engine.clientsCount - 1);\n    });\n    \n    // Heartbeat to keep connection alive\n    socket.on('ping', () => {\n      socket.emit('pong');\n    });\n  });\n  \n  console.log('Multiplayer functionality setup complete');\n}","size_bytes":2946},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport triviaRoutes from \"./routes/trivia\";\nimport paymentsRoutes from \"./routes/payments\";\nimport authRoutes from \"./routes/auth\";\nimport { getLeaderboard, getPlayerStats, awardAdReward, updateScore } from \"./routes/leaderboard\";\nimport questionsRoutes from \"./routes/questions.js\";\nimport rewardsRoutes from \"./routes/rewards\";\n\nexport async function registerRoutes(app: Express, httpServer?: Server): Promise<Server> {\n  // Register trivia routes\n  app.use(\"/api/trivia\", triviaRoutes);\n  \n  // Register payments routes\n  app.use(\"/api/payments\", paymentsRoutes);\n  \n  // Register auth routes\n  app.use(\"/api/auth\", authRoutes);\n  \n  // Register AI questions routes\n  app.use(\"/api/questions\", questionsRoutes);\n  \n  // Register rewards routes\n  app.use(\"/api/rewards\", rewardsRoutes);\n  \n  // Leaderboard routes\n  app.get(\"/api/leaderboard\", getLeaderboard);\n  app.get(\"/api/player/:playerId/stats\", getPlayerStats);\n  \n  // Scoring routes\n  app.post(\"/api/player/score\", updateScore);\n  \n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ \n      status: \"ok\", \n      timestamp: new Date().toISOString(),\n      service: \"Mirage Trivia API\"\n    });\n  });\n\n  // User routes (using existing storage interface)\n  app.get(\"/api/user/:id\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch user\" });\n    }\n  });\n\n  return httpServer || createServer(app);\n}\n","size_bytes":1796},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger, type ServerOptions } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions: ServerOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2409},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, json, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  coins: integer(\"coins\").default(1000).notNull(),\n  rank: text(\"rank\").default(\"Bronze\").notNull(),\n  language: text(\"language\").default(\"en\").notNull(),\n  premium: boolean(\"premium\").default(false).notNull(),\n  referralCode: text(\"referral_code\").unique(),\n  referredBy: integer(\"referred_by\"),\n  totalReferrals: integer(\"total_referrals\").default(0).notNull(),\n  lastDailyBonus: timestamp(\"last_daily_bonus\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const games = pgTable(\"games\", {\n  id: serial(\"id\").primaryKey(),\n  mode: text(\"mode\").notNull(), // '1v1', '2v2', 'single'\n  players: json(\"players\").$type<string[]>().notNull(),\n  scores: json(\"scores\").$type<Record<string, number>>().notNull(),\n  winner: text(\"winner\"), // Winner username or null for draw\n  category: text(\"category\").notNull(),\n  difficulty: text(\"difficulty\").notNull(),\n  language: text(\"language\").default(\"en\").notNull(),\n  status: text(\"status\").default(\"completed\").notNull(), // 'waiting', 'in_progress', 'completed'\n  totalQuestions: integer(\"total_questions\").default(10).notNull(),\n  duration: integer(\"duration\"), // Game duration in seconds\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const userStats = pgTable(\"user_stats\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  totalGames: integer(\"total_games\").default(0).notNull(),\n  totalWins: integer(\"total_wins\").default(0).notNull(),\n  totalLosses: integer(\"total_losses\").default(0).notNull(),\n  totalScore: integer(\"total_score\").default(0).notNull(),\n  highestScore: integer(\"highest_score\").default(0).notNull(),\n  currentStreak: integer(\"current_streak\").default(0).notNull(),\n  maxStreak: integer(\"max_streak\").default(0).notNull(),\n  // Mode-specific stats\n  singleplayerWins: integer(\"singleplayer_wins\").default(0).notNull(),\n  oneVsOneWins: integer(\"one_vs_one_wins\").default(0).notNull(),\n  twoVsTwoWins: integer(\"two_vs_two_wins\").default(0).notNull(),\n  singleplayerGames: integer(\"singleplayer_games\").default(0).notNull(),\n  oneVsOneGames: integer(\"one_vs_one_games\").default(0).notNull(),\n  twoVsTwoGames: integer(\"two_vs_two_games\").default(0).notNull(),\n  // Other stats\n  averageScore: integer(\"average_score\").default(0).notNull(),\n  perfectGames: integer(\"perfect_games\").default(0).notNull(), // Games with 100% correct answers\n  lastPlayed: timestamp(\"last_played\"),\n  rank: text(\"rank\").default(\"Bronze\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const rewards = pgTable(\"rewards\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  type: text(\"type\").notNull(), // 'game_win', 'ad_reward', 'daily_bonus', 'streak_bonus', 'referral_bonus'\n  amount: integer(\"amount\").notNull(), // Coins earned\n  gameId: integer(\"game_id\"), // Reference to game if applicable\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const referrals = pgTable(\"referrals\", {\n  id: serial(\"id\").primaryKey(),\n  referrerId: integer(\"referrer_id\").notNull(), // User who sent the referral\n  referredId: integer(\"referred_id\").notNull(), // User who was referred\n  referralCode: text(\"referral_code\").notNull(),\n  rewardGiven: boolean(\"reward_given\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const questions = pgTable(\"questions\", {\n  id: serial(\"id\").primaryKey(),\n  text_en: text(\"text_en\").notNull(),\n  text_ar: text(\"text_ar\").notNull(),\n  options_en: json(\"options_en\").$type<string[]>().notNull(),\n  options_ar: json(\"options_ar\").$type<string[]>().notNull(),\n  answer: integer(\"answer\").notNull(), // Index of correct answer (0-3)\n  category: text(\"category\").notNull(),\n  difficulty: text(\"difficulty\").notNull(),\n  image_url: text(\"image_url\"),\n  explanation_en: text(\"explanation_en\"),\n  explanation_ar: text(\"explanation_ar\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  language: true,\n});\n\nexport const insertGameSchema = createInsertSchema(games).pick({\n  mode: true,\n  players: true,\n  scores: true,\n  winner: true,\n  category: true,\n  difficulty: true,\n  language: true,\n  totalQuestions: true,\n  duration: true,\n});\n\nexport const insertUserStatsSchema = createInsertSchema(userStats).pick({\n  userId: true,\n  totalGames: true,\n  totalWins: true,\n  totalLosses: true,\n  totalScore: true,\n  highestScore: true,\n  currentStreak: true,\n  maxStreak: true,\n  singleplayerWins: true,\n  oneVsOneWins: true,\n  twoVsTwoWins: true,\n  singleplayerGames: true,\n  oneVsOneGames: true,\n  twoVsTwoGames: true,\n  averageScore: true,\n  perfectGames: true,\n  lastPlayed: true,\n  rank: true,\n});\n\nexport const insertRewardSchema = createInsertSchema(rewards).pick({\n  userId: true,\n  type: true,\n  amount: true,\n  gameId: true,\n  description: true,\n});\n\nexport const insertReferralSchema = createInsertSchema(referrals).pick({\n  referrerId: true,\n  referredId: true,\n  referralCode: true,\n  rewardGiven: true,\n});\n\nexport const insertQuestionSchema = createInsertSchema(questions).pick({\n  text_en: true,\n  text_ar: true,\n  options_en: true,\n  options_ar: true,\n  answer: true,\n  category: true,\n  difficulty: true,\n  image_url: true,\n  explanation_en: true,\n  explanation_ar: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertGame = z.infer<typeof insertGameSchema>;\nexport type Game = typeof games.$inferSelect;\nexport type InsertUserStats = z.infer<typeof insertUserStatsSchema>;\nexport type UserStats = typeof userStats.$inferSelect;\nexport type InsertReward = z.infer<typeof insertRewardSchema>;\nexport type Reward = typeof rewards.$inferSelect;\nexport type InsertQuestion = z.infer<typeof insertQuestionSchema>;\nexport type Question = typeof questions.$inferSelect;\n","size_bytes":6496},"client/src/App.tsx":{"content":"import { Canvas } from \"@react-three/fiber\";\nimport { Suspense, useEffect, useState } from \"react\";\nimport { KeyboardControls } from \"@react-three/drei\";\nimport { useTriviaGame } from \"./lib/stores/useTriviaGame\";\nimport { useLanguage } from \"./lib/stores/useLanguage\";\nimport { useAuth } from \"./lib/stores/useAuth\";\nimport \"@fontsource/inter\";\n\nimport GameScene from \"./components/game/GameScene\";\nimport GameUI from \"./components/game/GameUI\";\nimport MainMenu from \"./components/game/MainMenu\";\nimport TriviaQuestion from \"./components/game/TriviaQuestion\";\nimport GameResults from \"./components/game/GameResults\";\nimport MultiplayerLobby from \"./components/game/MultiplayerLobby\";\nimport MultiplayerGame from \"./components/game/MultiplayerGame\";\nimport PaymentMock from \"./components/game/PaymentMock\";\nimport { useMultiplayer } from \"./lib/stores/useMultiplayer\";\n\n// New page components\nimport HomePage from \"./components/pages/HomePage\";\nimport QuizZone from \"./components/pages/QuizZone\";\nimport LeaderboardPage from \"./components/pages/LeaderboardPage\";\nimport QuestionScreen from \"./components/pages/QuestionScreen\";\nimport ProfilePage from \"./components/pages/ProfilePage\";\nimport CoinStore from \"./components/pages/CoinStore\";\nimport PrivacyPolicy from \"./components/pages/PrivacyPolicy\";\nimport TermsOfService from \"./components/pages/TermsOfService\";\nimport FriendsList from \"./components/pages/FriendsList\";\nimport BottomNavigation from \"./components/ui/BottomNavigation\";\nimport { ErrorBoundary } from \"./components/ErrorBoundary\";\nimport ConnectionStatus from \"./components/ConnectionStatus\";\nimport GameLobby from \"./components/GameLobby\";\nimport MultiplayerGameUI from \"./components/multiplayer/MultiplayerGameUI\";\n\n// Define control keys for the game\nconst controls = [\n  { name: \"forward\", keys: [\"KeyW\", \"ArrowUp\"] },\n  { name: \"backward\", keys: [\"KeyS\", \"ArrowDown\"] },\n  { name: \"leftward\", keys: [\"KeyA\", \"ArrowLeft\"] },\n  { name: \"rightward\", keys: [\"KeyD\", \"ArrowRight\"] },\n  { name: \"select\", keys: [\"Enter\", \"Space\"] },\n  { name: \"back\", keys: [\"Escape\"] },\n];\n\n// Main App component\nfunction App() {\n  const { gameState } = useTriviaGame();\n  const { language } = useLanguage();\n  const { currentRoom, gameStarted } = useMultiplayer();\n  const { getCurrentUser } = useAuth();\n  const [showCanvas, setShowCanvas] = useState(false);\n\n  // Initialize authentication and show canvas\n  useEffect(() => {\n    // Check if user is already logged in\n    getCurrentUser();\n    setShowCanvas(true);\n  }, [getCurrentUser]);\n\n  return (\n    <ErrorBoundary>\n      <div style={{ width: '100vw', height: '100vh', position: 'relative' }}>\n        <ConnectionStatus />\n        {showCanvas && (\n        <KeyboardControls map={controls}>\n          {/* Always show the 3D canvas */}\n          <Canvas\n            shadows\n            camera={{\n              position: [0, 5, 10],\n              fov: 60,\n              near: 0.1,\n              far: 1000\n            }}\n            gl={{\n              antialias: true,\n              powerPreference: \"default\"\n            }}\n          >\n            <color attach=\"background\" args={[\"#0a0a0a\"]} />\n            \n            <Suspense fallback={null}>\n              <GameScene />\n            </Suspense>\n          </Canvas>\n\n          {/* Game UI Overlay */}\n          <div className=\"absolute inset-0 overflow-y-auto\">\n            <div className=\"min-h-full\">\n              {gameState === 'home' && <HomePage />}\n              {gameState === 'quiz-zone' && <QuizZone />}\n              {gameState === 'question' && <QuestionScreen />}\n              {gameState === 'leaderboard' && <LeaderboardPage />}\n              {gameState === 'profile' && <ProfilePage />}\n              {gameState === 'coin-store' && <CoinStore />}\n              {gameState === 'privacy' && <PrivacyPolicy />}\n              {gameState === 'terms' && <TermsOfService />}\n              {gameState === 'menu' && <MainMenu />}\n              {gameState === 'playing' && currentRoom && gameStarted && <MultiplayerGame />}\n              {gameState === 'playing' && !currentRoom && (\n                <>\n                  <TriviaQuestion />\n                  <GameUI />\n                </>\n              )}\n              {gameState === 'results' && <GameResults />}\n              {gameState === 'lobby' && <GameLobby />}\n              {gameState === 'multiplayer' && <MultiplayerGameUI />}\n              {gameState === 'multiplayer-lobby' && <MultiplayerLobby />}\n              {gameState === 'payment' && <PaymentMock />}\n              {gameState === 'friends' && <FriendsList />}\n            </div>\n          </div>\n\n          {/* Bottom Navigation */}\n          <BottomNavigation />\n        </KeyboardControls>\n        )}\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","size_bytes":4803},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Amiri:wght@400;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: 340 15% 8%;\n  --foreground: 330 5% 98%;\n  --card: 340 20% 12%;\n  --card-foreground: 330 5% 98%;\n  --popover: 340 20% 12%;\n  --popover-foreground: 330 5% 98%;\n  --primary: 330 100% 71%; /* #FF69B4 */\n  --primary-foreground: 0 0% 100%;\n  --secondary: 340 15% 20%;\n  --secondary-foreground: 330 5% 98%;\n  --muted: 340 15% 20%;\n  --muted-foreground: 330 10% 70%;\n  --accent: 320 70% 60%;\n  --accent-foreground: 330 5% 98%;\n  --destructive: 0 63% 31%;\n  --destructive-foreground: 330 5% 98%;\n  --border: 340 15% 25%;\n  --input: 340 15% 25%;\n  --ring: 330 100% 71%;\n  --radius: 0.75rem;\n  --chart-1: 330 70% 60%;\n  --chart-2: 320 60% 55%;\n  --chart-3: 310 80% 65%;\n  --chart-4: 300 65% 70%;\n  --chart-5: 290 75% 65%;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    margin: 0;\n    padding: 0;\n    width: 100vw;\n    min-height: 100vh;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  }\n\n  /* Arabic font support */\n  [dir=\"rtl\"] {\n    font-family: 'Amiri', 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  }\n\n  /* Arabic text styling */\n  [dir=\"rtl\"] h1,\n  [dir=\"rtl\"] h2,\n  [dir=\"rtl\"] h3,\n  [dir=\"rtl\"] h4,\n  [dir=\"rtl\"] h5,\n  [dir=\"rtl\"] h6 {\n    font-family: 'Amiri', serif;\n    font-weight: 700;\n  }\n\n  /* Better Arabic text rendering */\n  [dir=\"rtl\"] * {\n    text-align: right;\n  }\n\n  [dir=\"rtl\"] .text-center {\n    text-align: center !important;\n  }\n\n  [dir=\"rtl\"] .text-left {\n    text-align: right !important;\n  }\n\n  [dir=\"rtl\"] .text-right {\n    text-align: left !important;\n  }\n}\n\n#root {\n  width: 100%;\n  height: 100%;\n}\n\ncanvas {\n  width: 100% !important;\n  height: 100% !important;\n  touch-action: none;\n}\n\n/* Custom scrollbar for dark theme */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--accent-foreground));\n}\n\n/* Animation classes for 3D elements */\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes pulse-glow {\n  0%, 100% { box-shadow: 0 0 5px hsl(var(--primary)); }\n  50% { box-shadow: 0 0 20px hsl(var(--primary)), 0 0 30px hsl(var(--primary)); }\n}\n\n.animate-float {\n  animation: float 3s ease-in-out infinite;\n}\n\n.animate-pulse-glow {\n  animation: pulse-glow 2s ease-in-out infinite;\n}\n\n/* Custom button animations */\n.btn-3d {\n  transform: translateZ(0);\n  transition: transform 0.2s ease-in-out;\n}\n\n.btn-3d:hover {\n  transform: translateY(-2px) translateZ(0);\n}\n\n.btn-3d:active {\n  transform: translateY(0) translateZ(0);\n}\n\n/* Game-specific styles */\n.question-card {\n  backdrop-filter: blur(10px);\n  background: rgba(0, 0, 0, 0.8);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.answer-button {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.answer-button:hover {\n  transform: scale(1.02);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n}\n\n.answer-button.correct {\n  background: linear-gradient(135deg, #10b981, #059669);\n  animation: correctAnswer 0.6s ease-out;\n}\n\n.answer-button.incorrect {\n  background: linear-gradient(135deg, #ef4444, #dc2626);\n  animation: incorrectAnswer 0.6s ease-out;\n}\n\n@keyframes correctAnswer {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n  100% { transform: scale(1); }\n}\n\n@keyframes incorrectAnswer {\n  0% { transform: translateX(0); }\n  25% { transform: translateX(-5px); }\n  75% { transform: translateX(5px); }\n  100% { transform: translateX(0); }\n}\n\n/* Loading animations */\n.loading-dots {\n  display: inline-flex;\n  gap: 4px;\n}\n\n.loading-dots span {\n  width: 8px;\n  height: 8px;\n  background: hsl(var(--primary));\n  border-radius: 50%;\n  animation: loadingDots 1.4s infinite ease-in-out;\n}\n\n.loading-dots span:nth-child(1) { animation-delay: -0.32s; }\n.loading-dots span:nth-child(2) { animation-delay: -0.16s; }\n.loading-dots span:nth-child(3) { animation-delay: 0s; }\n\n@keyframes loadingDots {\n  0%, 80%, 100% { transform: scale(0); }\n  40% { transform: scale(1); }\n}\n\n/* Responsive design improvements */\n@media (max-width: 768px) {\n  .question-card {\n    margin: 1rem;\n    padding: 1rem;\n  }\n\n  .answer-button {\n    padding: 0.75rem 1rem;\n    font-size: 0.9rem;\n  }\n\n  /* Adjust Arabic text size on mobile */\n  [dir=\"rtl\"] .answer-button {\n    font-size: 1rem;\n    line-height: 1.5;\n  }\n}\n\n/* Accessibility improvements */\n@media (prefers-reduced-motion: reduce) {\n  .animate-float,\n  .animate-pulse-glow,\n  .btn-3d,\n  .answer-button {\n    animation: none !important;\n    transition: none !important;\n  }\n}\n\n/* High contrast mode */\n@media (prefers-contrast: high) {\n  .question-card {\n    background: #000;\n    border: 2px solid #fff;\n  }\n\n  .answer-button {\n    border: 2px solid #fff;\n  }\n}\n\n/* Focus styles for keyboard navigation */\nbutton:focus-visible,\ninput:focus-visible,\nselect:focus-visible {\n  outline: 2px solid hsl(var(--primary));\n  outline-offset: 2px;\n}\n\n/* Custom progress bar animation */\n.progress-bar {\n  overflow: hidden;\n  position: relative;\n}\n\n.progress-bar::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  animation: shimmer 2s infinite;\n}\n\n@keyframes shimmer {\n  0% { left: -100%; }\n  100% { left: 100%; }\n}\n","size_bytes":5766},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/routes/leaderboard.ts":{"content":"import { Request, Response } from 'express';\nimport { scoringService } from '../services/scoring';\nimport { db } from '../db';\nimport { users } from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\n\nexport async function getLeaderboard(req: Request, res: Response) {\n  try {\n    const limit = parseInt(req.query.limit as string) || 10;\n    const offset = parseInt(req.query.offset as string) || 0;\n    const mode = req.query.mode as string;\n    const language = req.query.language as string;\n    \n    let leaderboard;\n    \n    if (mode && ['single', '1v1', '2v2'].includes(mode)) {\n      leaderboard = await scoringService.getLeaderboardByMode(mode, limit);\n    } else {\n      leaderboard = await scoringService.getLeaderboard(mode, language, limit, offset);\n    }\n    \n    res.json({\n      success: true,\n      leaderboard,\n      pagination: {\n        limit,\n        offset,\n        hasMore: leaderboard.length === limit\n      },\n      filters: {\n        mode: mode || 'all',\n        language: language || 'all'\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching leaderboard:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch leaderboard'\n    });\n  }\n}\n\nexport async function getPlayerStats(req: Request, res: Response) {\n  try {\n    const playerId = parseInt(req.params.playerId);\n    const stats = await scoringService.getUserStats(playerId);\n    \n    if (!stats) {\n      return res.status(404).json({\n        success: false,\n        error: 'Player stats not found'\n      });\n    }\n\n    // Get user's rank position\n    const rankPosition = await scoringService.getUserRankPosition(playerId);\n    \n    // Get recent games\n    const recentGames = await scoringService.getRecentGames(playerId, 5);\n\n    res.json({\n      success: true,\n      player: {\n        id: stats.userId,\n        totalScore: stats.totalScore,\n        totalWins: stats.totalWins,\n        totalLosses: stats.totalLosses,\n        totalGames: stats.totalGames,\n        currentStreak: stats.currentStreak,\n        maxStreak: stats.maxStreak,\n        highestScore: stats.highestScore,\n        averageScore: stats.averageScore,\n        perfectGames: stats.perfectGames,\n        rank: stats.rank,\n        rankPosition,\n        winRate: stats.totalGames > 0 ? (stats.totalWins / stats.totalGames * 100).toFixed(1) : '0.0',\n        lastPlayed: stats.lastPlayed,\n        // Mode-specific stats\n        modeStats: {\n          singleplayer: {\n            wins: stats.singleplayerWins,\n            games: stats.singleplayerGames,\n            winRate: stats.singleplayerGames > 0 ? (stats.singleplayerWins / stats.singleplayerGames * 100).toFixed(1) : '0.0'\n          },\n          oneVsOne: {\n            wins: stats.oneVsOneWins,\n            games: stats.oneVsOneGames,\n            winRate: stats.oneVsOneGames > 0 ? (stats.oneVsOneWins / stats.oneVsOneGames * 100).toFixed(1) : '0.0'\n          },\n          twoVsTwo: {\n            wins: stats.twoVsTwoWins,\n            games: stats.twoVsTwoGames,\n            winRate: stats.twoVsTwoGames > 0 ? (stats.twoVsTwoWins / stats.twoVsTwoGames * 100).toFixed(1) : '0.0'\n          }\n        },\n        recentGames\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching player stats:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch player stats'\n    });\n  }\n}\n\n// Award ad rewards (simulate watching ad)\nexport async function awardAdReward(req: Request, res: Response) {\n  try {\n    const userId = parseInt(req.body.userId);\n    \n    if (!userId) {\n      return res.status(400).json({\n        success: false,\n        error: 'User ID is required'\n      });\n    }\n\n    // Award 5 coins for watching ad\n    await scoringService.awardCoins(userId, 5, 'ad_reward', 'Watched advertisement');\n    \n    // Get updated user data\n    const user = await db.select({ coins: users.coins })\n      .from(users)\n      .where(eq(users.id, userId))\n      .limit(1);\n\n    res.json({\n      success: true,\n      message: 'Ad reward claimed successfully',\n      reward: 5,\n      newBalance: user.length > 0 ? user[0].coins : 0\n    });\n  } catch (error) {\n    console.error('Error awarding ad reward:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to award ad reward'\n    });\n  }\n}\n\n// Update player score after game\nexport async function updateScore(req: Request, res: Response) {\n  try {\n    const { userId, gameScore, isWin, gameMode, gameId, isPerfectGame } = req.body;\n    \n    if (!userId || gameScore === undefined || isWin === undefined || !gameMode) {\n      return res.status(400).json({\n        success: false,\n        error: 'Missing required parameters'\n      });\n    }\n\n    await scoringService.updatePlayerScore(\n      parseInt(userId),\n      parseInt(gameScore),\n      Boolean(isWin),\n      gameMode,\n      gameId ? parseInt(gameId) : undefined,\n      Boolean(isPerfectGame)\n    );\n\n    // Get updated stats\n    const stats = await scoringService.getUserStats(parseInt(userId));\n    \n    res.json({\n      success: true,\n      message: 'Score updated successfully',\n      stats\n    });\n  } catch (error) {\n    console.error('Error updating score:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update score'\n    });\n  }\n}","size_bytes":5302},"server/routes/trivia.ts":{"content":"import { Router } from \"express\";\nimport OpenAI from \"openai\";\n\nconst router = Router();\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || 'sk-fake-key-for-demo'\n});\n\ninterface GenerateQuestionsRequest {\n  category: string;\n  difficulty: string;\n  count: number;\n}\n\n// Generate trivia questions using OpenAI\nrouter.post(\"/generate-questions\", async (req, res) => {\n  try {\n    const { category, difficulty, count = 10 }: GenerateQuestionsRequest = req.body;\n\n    if (!category || !difficulty) {\n      return res.status(400).json({ \n        error: \"Category and difficulty are required\" \n      });\n    }\n\n    const categoryMap: Record<string, string> = {\n      general: 'General Knowledge',\n      science: 'Science and Nature',\n      history: 'History',\n      geography: 'Geography',\n      sports: 'Sports',\n      entertainment: 'Entertainment and Pop Culture'\n    };\n\n    const mappedCategory = categoryMap[category] || 'General Knowledge';\n\n    const prompt = `Generate ${count} multiple choice trivia questions about ${mappedCategory} with ${difficulty} difficulty level.\n\nRequirements:\n- Each question should have exactly 4 answer choices\n- Only one answer should be correct\n- Include brief explanations for the correct answers\n- Make sure questions are appropriate for a global audience\n- For Arabic language support, ensure questions work well in both English and Arabic\n- Vary the question types and topics within the category\n\nRespond with a JSON object in this exact format:\n{\n  \"questions\": [\n    {\n      \"question\": \"Question text here?\",\n      \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\n      \"correctAnswer\": 2,\n      \"category\": \"${mappedCategory}\",\n      \"difficulty\": \"${difficulty}\",\n      \"explanation\": \"Brief explanation of why this is correct\"\n    }\n  ]\n}`;\n\n    console.log('Generating questions:', { category, difficulty, count });\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\", // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert trivia question generator. Always respond with valid JSON in the exact format requested.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.8,\n      max_tokens: 2000\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{\"questions\":[]}');\n    \n    if (!result.questions || !Array.isArray(result.questions)) {\n      throw new Error('Invalid response format from OpenAI');\n    }\n\n    // Validate and clean the questions\n    const questions = result.questions.map((q: any, index: number) => ({\n      id: `${Date.now()}_${index}`,\n      question: q.question || `Sample question ${index + 1}?`,\n      options: Array.isArray(q.options) && q.options.length === 4 \n        ? q.options \n        : ['Option A', 'Option B', 'Option C', 'Option D'],\n      correctAnswer: typeof q.correctAnswer === 'number' && q.correctAnswer >= 0 && q.correctAnswer < 4 \n        ? q.correctAnswer \n        : 0,\n      category: q.category || mappedCategory,\n      difficulty: q.difficulty || difficulty,\n      explanation: q.explanation || 'No explanation provided',\n      timeLimit: 30,\n      points: difficulty === 'easy' ? 10 : difficulty === 'medium' ? 20 : 30\n    }));\n\n    res.json({ questions });\n\n  } catch (error) {\n    console.error('Error generating questions:', error);\n    \n    // Return fallback questions on error\n    const fallbackQuestions = generateFallbackQuestions(req.body.category, req.body.difficulty, req.body.count);\n    res.json({ questions: fallbackQuestions });\n  }\n});\n\n// Get leaderboard\nrouter.get(\"/leaderboard\", async (req, res) => {\n  // Mock leaderboard data - in production, this would come from database\n  const mockLeaderboard = {\n    daily: [\n      { id: '1', name: 'Ahmed_92', score: 450, country: 'EG' },\n      { id: '2', name: 'Sarah_K', score: 420, country: 'US' },\n      { id: '3', name: 'محمد_احمد', score: 380, country: 'SA' },\n    ],\n    weekly: [\n      { id: '1', name: 'Lisa_Chen', score: 2850, country: 'CN' },\n      { id: '2', name: 'عمر_الشمري', score: 2640, country: 'KW' },\n      { id: '3', name: 'Ahmed_92', score: 2510, country: 'EG' },\n    ],\n    monthly: [\n      { id: '1', name: 'Sarah_K', score: 12450, country: 'US' },\n      { id: '2', name: 'Lisa_Chen', score: 11890, country: 'CN' },\n      { id: '3', name: 'محمد_احمد', score: 10230, country: 'SA' },\n    ]\n  };\n\n  res.json(mockLeaderboard);\n});\n\n// Submit game results\nrouter.post(\"/submit-score\", async (req, res) => {\n  try {\n    const { \n      score, \n      correctAnswers, \n      totalQuestions, \n      category, \n      difficulty, \n      timeSpent \n    } = req.body;\n\n    // In production, this would save to database and update leaderboards\n    console.log('Score submitted:', {\n      score,\n      correctAnswers,\n      totalQuestions,\n      category,\n      difficulty,\n      timeSpent\n    });\n\n    // Mock response\n    res.json({ \n      success: true, \n      message: 'Score submitted successfully',\n      newRank: Math.floor(Math.random() * 100) + 1 // Mock ranking\n    });\n\n  } catch (error) {\n    console.error('Error submitting score:', error);\n    res.status(500).json({ error: 'Failed to submit score' });\n  }\n});\n\nfunction generateFallbackQuestions(category: string, difficulty: string, count: number) {\n  const fallbackQuestions = [\n    {\n      id: '1',\n      question: \"What is the largest planet in our solar system?\",\n      options: [\"Earth\", \"Jupiter\", \"Saturn\", \"Mars\"],\n      correctAnswer: 1,\n      category: \"General Knowledge\",\n      difficulty,\n      explanation: \"Jupiter is the largest planet in our solar system.\",\n      timeLimit: 30,\n      points: difficulty === 'easy' ? 10 : difficulty === 'medium' ? 20 : 30\n    },\n    {\n      id: '2',\n      question: \"Which element has the chemical symbol 'O'?\",\n      options: [\"Gold\", \"Silver\", \"Oxygen\", \"Iron\"],\n      correctAnswer: 2,\n      category: \"Science\",\n      difficulty,\n      explanation: \"Oxygen has the chemical symbol 'O'.\",\n      timeLimit: 30,\n      points: difficulty === 'easy' ? 10 : difficulty === 'medium' ? 20 : 30\n    },\n    {\n      id: '3',\n      question: \"In which year did World War II end?\",\n      options: [\"1944\", \"1945\", \"1946\", \"1947\"],\n      correctAnswer: 1,\n      category: \"History\",\n      difficulty,\n      explanation: \"World War II ended in 1945.\",\n      timeLimit: 30,\n      points: difficulty === 'easy' ? 10 : difficulty === 'medium' ? 20 : 30\n    }\n  ];\n\n  // Repeat questions to reach desired count\n  const result = [];\n  for (let i = 0; i < count; i++) {\n    const questionIndex = i % fallbackQuestions.length;\n    result.push({\n      ...fallbackQuestions[questionIndex],\n      id: `fallback_${i}`,\n    });\n  }\n\n  return result;\n}\n\nexport default router;\n","size_bytes":7147},"server/storage/playerStats.ts":{"content":"// Simple in-memory storage for player statistics\ninterface PlayerStats {\n  id: string;\n  name: string;\n  level: number;\n  totalWins: number;\n  totalLosses: number;\n  totalGames: number;\n  totalScore: number;\n  highestStreak: number;\n  lastPlayed: Date;\n}\n\nclass PlayerStatsStorage {\n  private stats: Map<string, PlayerStats> = new Map();\n\n  getPlayerStats(playerId: string): PlayerStats | null {\n    return this.stats.get(playerId) || null;\n  }\n\n  createOrUpdatePlayer(playerId: string, name: string): PlayerStats {\n    const existing = this.stats.get(playerId);\n    \n    if (existing) {\n      existing.name = name; // Update name if changed\n      existing.lastPlayed = new Date();\n      return existing;\n    }\n\n    const newStats: PlayerStats = {\n      id: playerId,\n      name,\n      level: 1,\n      totalWins: 0,\n      totalLosses: 0,\n      totalGames: 0,\n      totalScore: 0,\n      highestStreak: 0,\n      lastPlayed: new Date()\n    };\n\n    this.stats.set(playerId, newStats);\n    return newStats;\n  }\n\n  updateGameResult(playerId: string, isWin: boolean, score: number, maxStreak: number): PlayerStats | null {\n    const stats = this.stats.get(playerId);\n    if (!stats) return null;\n\n    stats.totalGames++;\n    stats.totalScore += score;\n    stats.lastPlayed = new Date();\n\n    if (isWin) {\n      stats.totalWins++;\n    } else {\n      stats.totalLosses++;\n    }\n\n    if (maxStreak > stats.highestStreak) {\n      stats.highestStreak = maxStreak;\n    }\n\n    // Calculate level based on total score\n    stats.level = Math.floor(stats.totalScore / 1000) + 1;\n\n    return stats;\n  }\n\n  getLeaderboard(limit: number = 10): PlayerStats[] {\n    return Array.from(this.stats.values())\n      .sort((a, b) => {\n        // Sort by total score first, then by wins\n        if (b.totalScore !== a.totalScore) {\n          return b.totalScore - a.totalScore;\n        }\n        return b.totalWins - a.totalWins;\n      })\n      .slice(0, limit);\n  }\n\n  getAllPlayers(): PlayerStats[] {\n    return Array.from(this.stats.values())\n      .sort((a, b) => b.lastPlayed.getTime() - a.lastPlayed.getTime());\n  }\n}\n\nexport const playerStatsStorage = new PlayerStatsStorage();\nexport type { PlayerStats };","size_bytes":2185},"client/src/hooks/use-is-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/lib/localStorage.ts":{"content":"export const getLocalStorage = (key: string): any => {\n  try {\n    const item = window.localStorage.getItem(key);\n    return item ? JSON.parse(item) : null;\n  } catch (error) {\n    console.warn(`Error reading from localStorage key \"${key}\":`, error);\n    return null;\n  }\n};\n\nexport const setLocalStorage = (key: string, value: any): void => {\n  try {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    console.warn(`Error writing to localStorage key \"${key}\":`, error);\n  }\n};\n\nexport const removeLocalStorage = (key: string): void => {\n  try {\n    window.localStorage.removeItem(key);\n  } catch (error) {\n    console.warn(`Error removing localStorage key \"${key}\":`, error);\n  }\n};\n\n// Game-specific localStorage helpers\nexport const getHighScore = (): number => {\n  return getLocalStorage('mirage_high_score') || 0;\n};\n\nexport const setHighScore = (score: number): void => {\n  const currentHigh = getHighScore();\n  if (score > currentHigh) {\n    setLocalStorage('mirage_high_score', score);\n  }\n};\n\nexport const getGameSettings = () => {\n  return {\n    language: getLocalStorage('mirage_language') || 'en',\n    soundEnabled: getLocalStorage('mirage_sound_enabled') !== false,\n    difficulty: getLocalStorage('mirage_difficulty') || 'medium',\n    category: getLocalStorage('mirage_category') || 'general'\n  };\n};\n\nexport const saveGameSettings = (settings: {\n  language?: string;\n  soundEnabled?: boolean;\n  difficulty?: string;\n  category?: string;\n}) => {\n  Object.entries(settings).forEach(([key, value]) => {\n    if (value !== undefined) {\n      setLocalStorage(`mirage_${key}`, value);\n    }\n  });\n};\n\n// Statistics tracking\nexport interface GameStats {\n  totalGames: number;\n  totalCorrect: number;\n  totalQuestions: number;\n  bestStreak: number;\n  averageScore: number;\n  timeSpent: number; // in seconds\n  categoriesPlayed: Record<string, number>;\n  difficultiesPlayed: Record<string, number>;\n}\n\nexport const getGameStats = (): GameStats => {\n  return getLocalStorage('mirage_stats') || {\n    totalGames: 0,\n    totalCorrect: 0,\n    totalQuestions: 0,\n    bestStreak: 0,\n    averageScore: 0,\n    timeSpent: 0,\n    categoriesPlayed: {},\n    difficultiesPlayed: {}\n  };\n};\n\nexport const updateGameStats = (gameResult: {\n  correct: number;\n  total: number;\n  score: number;\n  streak: number;\n  timeSpent: number;\n  category: string;\n  difficulty: string;\n}) => {\n  const stats = getGameStats();\n  \n  stats.totalGames += 1;\n  stats.totalCorrect += gameResult.correct;\n  stats.totalQuestions += gameResult.total;\n  stats.bestStreak = Math.max(stats.bestStreak, gameResult.streak);\n  stats.timeSpent += gameResult.timeSpent;\n  \n  // Update average score\n  stats.averageScore = Math.round(\n    (stats.averageScore * (stats.totalGames - 1) + gameResult.score) / stats.totalGames\n  );\n  \n  // Track categories and difficulties\n  stats.categoriesPlayed[gameResult.category] = (stats.categoriesPlayed[gameResult.category] || 0) + 1;\n  stats.difficultiesPlayed[gameResult.difficulty] = (stats.difficultiesPlayed[gameResult.difficulty] || 0) + 1;\n  \n  setLocalStorage('mirage_stats', stats);\n  return stats;\n};\n","size_bytes":3143},"client/src/lib/openai.ts":{"content":"import OpenAI from \"openai\";\nimport type { Category, Difficulty, TriviaQuestion } from \"./stores/useTriviaGame\";\n\n// For browser usage, we'll use server-side API instead of direct OpenAI calls\n// This is more secure and avoids exposing API keys\n\n// Generate a unique session ID for each game to avoid duplicate buildup\nlet currentGameSessionId: string | null = null;\n\nconst getSessionId = () => {\n  // Generate a new session ID for each game/quiz\n  if (!currentGameSessionId) {\n    currentGameSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n  return currentGameSessionId;\n};\n\n// Reset session ID when starting a new game\nexport const resetSessionId = () => {\n  currentGameSessionId = null;\n};\n\n// Category mapping for fallback display names\nconst categoryMap: Record<Category, string> = {\n  'general-knowledge': 'General Knowledge',\n  science: 'Science and Nature',\n  history: 'History',\n  geography: 'Geography',\n  sports: 'Sports',\n  entertainment: 'Entertainment and Pop Culture',\n  music: 'Music',\n  nature: 'Nature',\n  general: 'General Knowledge'\n};\n\nexport async function generateQuestions(\n  category: Category, \n  difficulty: Difficulty, \n  count: number = 10\n): Promise<TriviaQuestion[]> {\n  try {\n    console.log('Requesting questions from server API:', { category, difficulty, count });\n\n    // Use server-side API instead of direct OpenAI calls\n    const response = await fetch('/api/questions/generate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        category,\n        difficulty,\n        count,\n        language: 'en', // Default to English, can be made configurable\n        sessionId: getSessionId() // Include session ID to track questions\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Server error: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    console.log('Server response:', data);\n    \n    if (!data.success || !data.questions || !Array.isArray(data.questions)) {\n      throw new Error('Invalid response format from server');\n    }\n\n    // Extract just the questions array and map them to the correct format\n    const questions = data.questions.map((q: any): TriviaQuestion => ({\n      question: q.question || 'Sample question?',\n      options: Array.isArray(q.options) ? q.options : ['A', 'B', 'C', 'D'],\n      correctAnswer: typeof q.correctAnswer === 'number' ? q.correctAnswer : 0,\n      category: q.category || categoryMap[category],\n      difficulty: q.difficulty || difficulty,\n      explanation: q.explanation || 'No explanation provided'\n    }));\n\n    console.log('Processed questions:', questions);\n    return questions;\n\n  } catch (error) {\n    console.error('Error generating questions with OpenAI:', error);\n    \n    // Fallback questions for demo purposes\n    return generateFallbackQuestions(category, difficulty, count);\n  }\n}\n\nfunction generateFallbackQuestions(category: Category, difficulty: Difficulty, count: number): TriviaQuestion[] {\n  const fallbackQuestions: Record<Category, TriviaQuestion[]> = {\n    general: [\n      {\n        question: \"What is the largest planet in our solar system?\",\n        options: [\"Earth\", \"Jupiter\", \"Saturn\", \"Mars\"],\n        correctAnswer: 1,\n        category: \"General Knowledge\",\n        difficulty,\n        explanation: \"Jupiter is the largest planet in our solar system.\"\n      },\n      {\n        question: \"Which element has the chemical symbol 'O'?\",\n        options: [\"Gold\", \"Silver\", \"Oxygen\", \"Iron\"],\n        correctAnswer: 2,\n        category: \"General Knowledge\", \n        difficulty,\n        explanation: \"Oxygen has the chemical symbol 'O'.\"\n      }\n    ],\n    science: [\n      {\n        question: \"What is the process by which plants make their own food?\",\n        options: [\"Respiration\", \"Photosynthesis\", \"Digestion\", \"Fermentation\"],\n        correctAnswer: 1,\n        category: \"Science\",\n        difficulty,\n        explanation: \"Photosynthesis is the process by which plants use sunlight to make food.\"\n      }\n    ],\n    history: [\n      {\n        question: \"In which year did World War II end?\",\n        options: [\"1944\", \"1945\", \"1946\", \"1947\"],\n        correctAnswer: 1,\n        category: \"History\",\n        difficulty,\n        explanation: \"World War II ended in 1945.\"\n      }\n    ],\n    geography: [\n      {\n        question: \"What is the capital of Australia?\",\n        options: [\"Sydney\", \"Melbourne\", \"Canberra\", \"Perth\"],\n        correctAnswer: 2,\n        category: \"Geography\",\n        difficulty,\n        explanation: \"Canberra is the capital city of Australia.\"\n      }\n    ],\n    sports: [\n      {\n        question: \"How many players are on a basketball team on the court at one time?\",\n        options: [\"4\", \"5\", \"6\", \"7\"],\n        correctAnswer: 1,\n        category: \"Sports\",\n        difficulty,\n        explanation: \"Each basketball team has 5 players on the court at one time.\"\n      }\n    ],\n    entertainment: [\n      {\n        question: \"Which movie won the Academy Award for Best Picture in 2020?\",\n        options: [\"Joker\", \"1917\", \"Parasite\", \"Once Upon a Time in Hollywood\"],\n        correctAnswer: 2,\n        category: \"Entertainment\",\n        difficulty,\n        explanation: \"Parasite won the Academy Award for Best Picture in 2020.\"\n      }\n    ]\n  };\n\n  const categoryQuestions = fallbackQuestions[category] || fallbackQuestions.general;\n  \n  // Repeat questions if we need more than available\n  const result: TriviaQuestion[] = [];\n  for (let i = 0; i < count; i++) {\n    const questionIndex = i % categoryQuestions.length;\n    result.push({\n      ...categoryQuestions[questionIndex],\n      difficulty // Ensure difficulty matches request\n    });\n  }\n  \n  return result;\n}\n","size_bytes":5777},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst getLocalStorage = (key: string): any =>\n  JSON.parse(window.localStorage.getItem(key) || \"null\");\nconst setLocalStorage = (key: string, value: any): void =>\n  window.localStorage.setItem(key, JSON.stringify(value));\n\nexport { getLocalStorage, setLocalStorage };\n","size_bytes":438},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/trivia.ts":{"content":"export interface TriviaQuestion {\n  id?: string;\n  question: string;\n  options: string[];\n  correctAnswer: number;\n  category: string;\n  difficulty: 'easy' | 'medium' | 'hard';\n  explanation?: string;\n  timeLimit?: number;\n  points?: number;\n}\n\nexport interface GameSession {\n  id: string;\n  startTime: Date;\n  endTime?: Date;\n  questions: TriviaQuestion[];\n  answers: Answer[];\n  score: number;\n  category: string;\n  difficulty: string;\n}\n\nexport interface Answer {\n  questionId: string;\n  selectedAnswer: number;\n  isCorrect: boolean;\n  timeSpent: number;\n  points: number;\n}\n\nexport interface Player {\n  id: string;\n  name: string;\n  level: number;\n  totalScore: number;\n  gamesPlayed: number;\n  wins: number;\n  averageScore: number;\n  bestStreak: number;\n  country?: string;\n  avatar?: string;\n  lastPlayed: Date;\n}\n\nexport interface MultiplayerGame {\n  id: string;\n  mode: '1v1' | '2v2';\n  status: 'waiting' | 'in_progress' | 'completed';\n  players: Player[];\n  currentQuestion?: TriviaQuestion;\n  questionIndex: number;\n  answers: Record<string, Answer>; // playerId -> Answer\n  scores: Record<string, number>; // playerId -> score\n  startTime: Date;\n  endTime?: Date;\n}\n\nexport interface Leaderboard {\n  daily: Player[];\n  weekly: Player[];\n  monthly: Player[];\n  allTime: Player[];\n}\n\nexport interface Achievement {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  requirement: string;\n  points: number;\n  unlockedAt?: Date;\n}\n\nexport interface UserProfile extends Player {\n  achievements: Achievement[];\n  statistics: {\n    totalQuestions: number;\n    correctAnswers: number;\n    accuracy: number;\n    timeSpent: number;\n    favoriteCategory: string;\n    strongestDifficulty: string;\n    weeklyGoal: number;\n    weeklyProgress: number;\n  };\n  preferences: {\n    language: 'en' | 'ar';\n    soundEnabled: boolean;\n    notifications: boolean;\n    defaultDifficulty: string;\n    defaultCategory: string;\n  };\n}\n\nexport interface TournamentInfo {\n  id: string;\n  name: string;\n  description: string;\n  startDate: Date;\n  endDate: Date;\n  entryFee: number;\n  prizePool: number;\n  maxParticipants: number;\n  currentParticipants: number;\n  status: 'upcoming' | 'active' | 'completed';\n  rules: string[];\n}\n\nexport interface Subscription {\n  id: string;\n  plan: 'basic' | 'premium' | 'elite';\n  startDate: Date;\n  endDate: Date;\n  autoRenew: boolean;\n  price: number;\n  features: string[];\n  status: 'active' | 'cancelled' | 'expired';\n}\n","size_bytes":2460},"client/src/components/game/GameResults.tsx":{"content":"import React, { useEffect } from 'react';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { SpaceButton } from '../ui/SpaceButton';\nimport { HologramCard } from '../ui/HologramCard';\nimport { Badge } from '../ui/badge';\nimport { Progress } from '../ui/progress';\nimport { Trophy, Star, Target, Clock, RotateCcw, Home, Share2 } from 'lucide-react';\n\nexport default function GameResults() {\n  const { \n    score,\n    correctAnswers,\n    totalQuestions,\n    totalTime,\n    streak,\n    maxStreak,\n    resetGame,\n    setGameState,\n    highScore,\n    isNewHighScore\n  } = useTriviaGame();\n  const { translations } = useLanguage();\n\n  const percentage = Math.round((correctAnswers / totalQuestions) * 100);\n  const averageTime = Math.round(totalTime / totalQuestions);\n\n  // Performance rating\n  const getPerformanceRating = () => {\n    if (percentage >= 90) return { rating: 'excellent', color: 'text-yellow-400', icon: '🏆' };\n    if (percentage >= 75) return { rating: 'great', color: 'text-green-400', icon: '🌟' };\n    if (percentage >= 60) return { rating: 'good', color: 'text-blue-400', icon: '👍' };\n    if (percentage >= 40) return { rating: 'fair', color: 'text-orange-400', icon: '📈' };\n    return { rating: 'needsImprovement', color: 'text-red-400', icon: '💪' };\n  };\n\n  const performance = getPerformanceRating();\n\n  return (\n    <div className=\"h-screen overflow-y-auto overflow-x-hidden\" style={{ WebkitOverflowScrolling: 'touch' }}>\n      <div className=\"p-4 min-h-full flex items-center justify-center\">\n        <HologramCard className=\"w-full max-w-lg\">\n          <div className=\"p-6 text-center\">\n          <h2 className=\"text-3xl font-bold mb-4 bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n            {translations.gameComplete}\n          </h2>\n          \n          {isNewHighScore && (\n            <div className=\"mb-4\">\n              <Badge className=\"bg-gradient-to-r from-yellow-500/50 to-yellow-600/50 text-yellow-200 px-4 py-2 border border-yellow-400/50\">\n                <Trophy className=\"h-4 w-4 mr-2\" />\n                {translations.newHighScore}!\n              </Badge>\n            </div>\n          )}\n          \n          <div className={`text-6xl font-bold mb-2 ${performance.color}`}>\n            {performance.icon}\n          </div>\n          \n          <div className=\"text-5xl font-bold bg-gradient-to-r from-blue-400 via-purple-500 to-yellow-400 bg-clip-text text-transparent mb-2\">\n            {score}\n          </div>\n          \n          <Badge className={`bg-black/50 border-2 ${performance.color}`}>\n            {translations[performance.rating]}\n          </Badge>\n        </div>\n\n        <div className=\"px-6 pb-6 space-y-6\">\n          {/* Score Progress */}\n          <div>\n            <div className=\"flex justify-between text-sm mb-2\">\n              <span>{translations.accuracy}</span>\n              <span>{percentage}%</span>\n            </div>\n            <Progress value={percentage} className=\"h-3\" />\n          </div>\n\n          {/* Statistics Grid */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"bg-gradient-to-br from-blue-900/30 to-purple-900/30 border border-blue-500/30 rounded-lg p-3\">\n              <div className=\"text-center\">\n                <Target className=\"h-6 w-6 mx-auto mb-2 text-green-400\" />\n                <div className=\"text-lg font-bold\">{correctAnswers}/{totalQuestions}</div>\n                <div className=\"text-xs text-gray-400\">{translations.correct}</div>\n              </div>\n            </div>\n\n            <div className=\"bg-gradient-to-br from-blue-900/30 to-purple-900/30 border border-blue-500/30 rounded-lg p-3\">\n              <div className=\"text-center\">\n                <Clock className=\"h-6 w-6 mx-auto mb-2 text-blue-400\" />\n                <div className=\"text-lg font-bold\">{averageTime}s</div>\n                <div className=\"text-xs text-gray-400\">{translations.avgTime}</div>\n              </div>\n            </div>\n\n            <div className=\"bg-gradient-to-br from-blue-900/30 to-purple-900/30 border border-blue-500/30 rounded-lg p-3\">\n              <div className=\"text-center\">\n                <Star className=\"h-6 w-6 mx-auto mb-2 text-yellow-400\" />\n                <div className=\"text-lg font-bold\">{maxStreak}</div>\n                <div className=\"text-xs text-gray-400\">{translations.bestStreak}</div>\n              </div>\n            </div>\n\n            <div className=\"bg-gradient-to-br from-blue-900/30 to-purple-900/30 border border-blue-500/30 rounded-lg p-3\">\n              <div className=\"text-center\">\n                <Trophy className=\"h-6 w-6 mx-auto mb-2 text-purple-400\" />\n                <div className=\"text-lg font-bold\">{highScore}</div>\n                <div className=\"text-xs text-gray-400\">{translations.highScore}</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"space-y-3 pt-4\">\n            <SpaceButton \n              onClick={resetGame}\n              className=\"w-full\"\n            >\n              <RotateCcw className=\"h-4 w-4 mr-2\" />\n              {translations.playAgain}\n            </SpaceButton>\n\n            <div className=\"grid grid-cols-2 gap-2\">\n              <SpaceButton \n                onClick={() => setGameState('home')}\n                variant=\"secondary\"\n                className=\"\"\n              >\n                <Home className=\"h-4 w-4 mr-2\" />\n                {translations.home || 'Home'}\n              </SpaceButton>\n\n              <SpaceButton \n                onClick={() => {\n                  // Mock share functionality\n                  if (navigator.share) {\n                    navigator.share({\n                      title: 'Mirage Trivia',\n                      text: `I just scored ${score} points in Mirage Trivia! Can you beat it?`,\n                      url: window.location.href,\n                    });\n                  }\n                }}\n                variant=\"secondary\"\n                className=\"\"\n              >\n                <Share2 className=\"h-4 w-4 mr-2\" />\n                {translations.share}\n              </SpaceButton>\n            </div>\n          </div>\n        </div>\n      </HologramCard>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6357},"client/src/components/game/GameScene.tsx":{"content":"import React, { useRef } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Text, Box, Sphere, Plane } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { useLanguage } from '../../lib/stores/useLanguage';\n\n// Floating geometric shapes for visual appeal\nfunction FloatingShape({ position, color, shape }: { position: [number, number, number], color: string, shape: 'box' | 'sphere' }) {\n  const meshRef = useRef<THREE.Mesh>(null);\n  \n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.x = Math.sin(state.clock.elapsedTime + position[0]) * 0.2;\n      meshRef.current.rotation.y = state.clock.elapsedTime * 0.1;\n      meshRef.current.position.y = position[1] + Math.sin(state.clock.elapsedTime * 2 + position[0]) * 0.3;\n    }\n  });\n\n  return (\n    <mesh ref={meshRef} position={position}>\n      {shape === 'box' ? (\n        <boxGeometry args={[1, 1, 1]} />\n      ) : (\n        <sphereGeometry args={[0.5, 16, 16]} />\n      )}\n      <meshStandardMaterial color={color} transparent opacity={0.7} />\n    </mesh>\n  );\n}\n\n// Particle system for background effect\nfunction BackgroundParticles() {\n  const pointsRef = useRef<THREE.Points>(null);\n  \n  const particlesCount = 100;\n  const positions = React.useMemo(() => {\n    const positions = new Float32Array(particlesCount * 3);\n    for (let i = 0; i < particlesCount; i++) {\n      positions[i * 3] = (Math.random() - 0.5) * 50;\n      positions[i * 3 + 1] = (Math.random() - 0.5) * 50;\n      positions[i * 3 + 2] = (Math.random() - 0.5) * 50;\n    }\n    return positions;\n  }, []);\n\n  useFrame((state) => {\n    if (pointsRef.current) {\n      pointsRef.current.rotation.y = state.clock.elapsedTime * 0.02;\n    }\n  });\n\n  return (\n    <points ref={pointsRef}>\n      <bufferGeometry>\n        <bufferAttribute\n          attach=\"attributes-position\"\n          count={particlesCount}\n          array={positions}\n          itemSize={3}\n        />\n      </bufferGeometry>\n      <pointsMaterial color=\"#4A90E2\" size={0.05} sizeAttenuation transparent opacity={0.6} />\n    </points>\n  );\n}\n\n// Main game scene component\nexport default function GameScene() {\n  const { gameState, score } = useTriviaGame();\n  const { language, translations } = useLanguage();\n\n  return (\n    <>\n      {/* Lighting */}\n      <ambientLight intensity={0.4} />\n      <directionalLight \n        position={[10, 10, 5]} \n        intensity={0.8}\n        castShadow\n        shadow-mapSize={[1024, 1024]}\n      />\n      <pointLight position={[0, 0, 0]} intensity={0.5} color=\"#4A90E2\" />\n\n      {/* Background particles */}\n      <BackgroundParticles />\n\n      {/* Floating geometric shapes */}\n      <FloatingShape position={[-5, 2, -3]} color=\"#E74C3C\" shape=\"box\" />\n      <FloatingShape position={[5, 3, -2]} color=\"#3498DB\" shape=\"sphere\" />\n      <FloatingShape position={[-3, -2, -5]} color=\"#F39C12\" shape=\"box\" />\n      <FloatingShape position={[3, -1, -4]} color=\"#9B59B6\" shape=\"sphere\" />\n      <FloatingShape position={[0, 4, -6]} color=\"#1ABC9C\" shape=\"box\" />\n\n      {/* Ground plane */}\n      <Plane args={[100, 100]} rotation={[-Math.PI / 2, 0, 0]} position={[0, -3, 0]} receiveShadow>\n        <meshStandardMaterial color=\"#2C3E50\" transparent opacity={0.8} />\n      </Plane>\n\n      {/* Main display sphere */}\n      <Sphere args={[1.5, 32, 32]} position={[0, 0, 0]}>\n        <meshStandardMaterial \n          color=\"#34495E\" \n          transparent \n          opacity={0.9}\n          emissive=\"#1A252F\"\n          emissiveIntensity={0.2}\n        />\n      </Sphere>\n\n      {/* Game title in 3D space */}\n      {gameState === 'menu' && (\n        <Text\n          position={[0, 2, 2]}\n          fontSize={1.2}\n          color=\"#ECF0F1\"\n          anchorX=\"center\"\n          anchorY=\"middle\"\n          font=\"/fonts/inter.json\"\n        >\n          MIRAGE\n        </Text>\n      )}\n\n      {/* Score display during game */}\n      {(gameState === 'playing' || gameState === 'results') && (\n        <Text\n          position={[0, 3, 2]}\n          fontSize={0.6}\n          color=\"#F39C12\"\n          anchorX=\"center\"\n          anchorY=\"middle\"\n          font=\"/fonts/inter.json\"\n        >\n          {translations.score}: {score}\n        </Text>\n      )}\n    </>\n  );\n}\n","size_bytes":4302},"client/src/components/game/GameUI.tsx":{"content":"import React from 'react';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { useAudio } from '../../lib/stores/useAudio';\nimport { Button } from '../ui/button';\nimport { Card } from '../ui/card';\nimport { Progress } from '../ui/progress';\nimport { Volume2, VolumeX, Globe } from 'lucide-react';\n\nexport default function GameUI() {\n  const { \n    currentQuestion,\n    timeRemaining,\n    questionNumber,\n    totalQuestions,\n    streak\n  } = useTriviaGame();\n  const { language, toggleLanguage, translations } = useLanguage();\n  const { isMuted, toggleMute } = useAudio();\n\n  const progressPercentage = ((totalQuestions - questionNumber + 1) / totalQuestions) * 100;\n  const timePercentage = (timeRemaining / 30) * 100; // Assuming 30 seconds per question\n\n  return (\n    <div className=\"absolute top-4 left-4 right-4 z-10\">\n      {/* Top UI Bar */}\n      <div className=\"flex justify-between items-center mb-4\">\n        {/* Left side - Question progress */}\n        <Card className=\"bg-black/70 border-gray-600 px-4 py-2\">\n          <div className=\"text-white text-sm\">\n            {translations.question} {questionNumber}/{totalQuestions}\n          </div>\n          <Progress value={progressPercentage} className=\"w-32 mt-1\" />\n        </Card>\n\n        {/* Right side - Controls */}\n        <div className=\"flex gap-2\">\n          {/* Language Toggle */}\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={toggleLanguage}\n            className=\"bg-black/70 border-gray-600 text-white hover:bg-black/90\"\n          >\n            <Globe className=\"h-4 w-4 mr-1\" />\n            {language.toUpperCase()}\n          </Button>\n\n          {/* Audio Toggle */}\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={toggleMute}\n            className=\"bg-black/70 border-gray-600 text-white hover:bg-black/90\"\n          >\n            {isMuted ? <VolumeX className=\"h-4 w-4\" /> : <Volume2 className=\"h-4 w-4\" />}\n          </Button>\n        </div>\n      </div>\n\n      {/* Time remaining bar */}\n      <Card className=\"bg-black/70 border-gray-600 p-2 mb-4\">\n        <div className=\"flex justify-between items-center mb-1\">\n          <span className=\"text-white text-sm\">{translations.timeRemaining}</span>\n          <span className=\"text-white text-sm font-bold\">{timeRemaining}s</span>\n        </div>\n        <Progress \n          value={timePercentage} \n          className=\"w-full\"\n          // Change color based on time remaining\n          style={{\n            '--progress-foreground': timePercentage > 50 ? '#10B981' : timePercentage > 20 ? '#F59E0B' : '#EF4444'\n          } as React.CSSProperties}\n        />\n      </Card>\n\n      {/* Streak indicator */}\n      {streak > 1 && (\n        <Card className=\"bg-green-600/80 border-green-500 p-2 mb-4\">\n          <div className=\"text-white text-center font-bold\">\n            🔥 {translations.streak}: {streak}\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":3071},"client/src/components/game/MainMenu.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { useAuth } from '../../lib/stores/useAuth';\nimport { Button } from '../ui/button';\nimport { HologramCard } from '../ui/HologramCard';\nimport { SpaceButton } from '../ui/SpaceButton';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\nimport { Badge } from '../ui/badge';\nimport { Play, Users, CreditCard, Trophy, Globe, Settings, LogIn, LogOut, Coins, Crown } from 'lucide-react';\nimport AuthModal from '../auth/AuthModal';\n\nexport default function MainMenu() {\n  const { \n    startGame, \n    setGameState, \n    setCategory, \n    setDifficulty, \n    category, \n    difficulty,\n    highScore\n  } = useTriviaGame();\n  const { language, toggleLanguage, translations } = useLanguage();\n  const { user, isAuthenticated, logout, getCurrentUser } = useAuth();\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const [authMode, setAuthMode] = useState<'login' | 'register'>('login');\n\n  // Check for authenticated user on component mount\n  useEffect(() => {\n    getCurrentUser();\n  }, [getCurrentUser]);\n\n  const categories = [\n    { value: 'general', labelEn: 'General Knowledge', labelAr: 'معلومات عامة' },\n    { value: 'science', labelEn: 'Science & Nature', labelAr: 'علوم وطبيعة' },\n    { value: 'history', labelEn: 'History', labelAr: 'تاريخ' },\n    { value: 'geography', labelEn: 'Geography', labelAr: 'جغرافيا' },\n    { value: 'sports', labelEn: 'Sports', labelAr: 'رياضة' },\n    { value: 'entertainment', labelEn: 'Entertainment', labelAr: 'ترفيه' },\n  ];\n\n  const difficulties = [\n    { value: 'easy', labelEn: 'Easy', labelAr: 'سهل' },\n    { value: 'medium', labelEn: 'Medium', labelAr: 'متوسط' },\n    { value: 'hard', labelEn: 'Hard', labelAr: 'صعب' },\n  ];\n\n  const handleAuthAction = (mode: 'login' | 'register') => {\n    setAuthMode(mode);\n    setShowAuthModal(true);\n  };\n\n  return (\n    <>\n      <div className=\"flex items-center justify-center min-h-screen p-4\">\n        <HologramCard className=\"w-full max-w-md\">\n          <div className=\"p-6 text-center\">\n            <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-400 via-purple-500 to-yellow-400 bg-clip-text text-transparent mb-2\">\n              MIRAGE\n            </h1>\n            <p className=\"text-blue-300/80\">{translations.gameSubtitle}</p>\n          </div>\n          \n          <div className=\"px-6 pb-6 space-y-4\">\n            {/* User Information */}\n            {isAuthenticated && user ? (\n              <div className=\"p-4 rounded-lg bg-gradient-to-br from-blue-900/20 to-purple-900/20 border border-blue-500/30\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"text-sm font-medium\">{user.username}</div>\n                      {user.premium && (\n                        <Crown className=\"h-4 w-4 text-yellow-500\" />\n                      )}\n                    </div>\n                    <Badge variant=\"secondary\">{user.rank}</Badge>\n                  </div>\n                  <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                    <div className=\"flex items-center gap-1\">\n                      <Coins className=\"h-4 w-4 text-yellow-500\" />\n                      {user.coins}\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <Trophy className=\"h-4 w-4 text-primary\" />\n                      {translations.highScore}: {highScore}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-sm text-muted-foreground\">Sign in to save your progress</p>\n                <div className=\"flex gap-2\">\n                  <SpaceButton \n                    variant=\"secondary\" \n                    size=\"sm\" \n                    onClick={() => handleAuthAction('login')}\n                    className=\"flex-1\"\n                  >\n                    <LogIn className=\"h-4 w-4 mr-1\" />\n                    Login\n                  </SpaceButton>\n                  <SpaceButton \n                    variant=\"secondary\" \n                    size=\"sm\" \n                    onClick={() => handleAuthAction('register')}\n                    className=\"flex-1\"\n                  >\n                    Register\n                  </SpaceButton>\n                </div>\n              </div>\n            )}\n\n            {/* High Score Display for non-authenticated users */}\n            {!isAuthenticated && highScore > 0 && (\n              <div className=\"text-center\">\n                <Badge variant=\"outline\" className=\"border-primary text-primary\">\n                  <Trophy className=\"h-4 w-4 mr-1\" />\n                  {translations.highScore}: {highScore}\n                </Badge>\n              </div>\n            )}\n\n          {/* Language Toggle */}\n          <SpaceButton\n            variant=\"secondary\"\n            onClick={toggleLanguage}\n            className=\"w-full\"\n          >\n            <Globe className=\"h-4 w-4 mr-2\" />\n            {language === 'en' ? 'العربية' : 'English'}\n          </SpaceButton>\n\n          {/* Category Selection */}\n          <div>\n            <label className=\"text-sm text-gray-300 mb-2 block\">\n              {translations.category}\n            </label>\n            <Select value={category} onValueChange={setCategory}>\n              <SelectTrigger className=\"bg-black/50 border-gray-600 text-white\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent className=\"bg-black border-gray-600\">\n                {categories.map((cat) => (\n                  <SelectItem key={cat.value} value={cat.value} className=\"text-white focus:bg-white/10\">\n                    {language === 'en' ? cat.labelEn : cat.labelAr}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Difficulty Selection */}\n          <div>\n            <label className=\"text-sm text-gray-300 mb-2 block\">\n              {translations.difficulty}\n            </label>\n            <Select value={difficulty} onValueChange={setDifficulty}>\n              <SelectTrigger className=\"bg-black/50 border-gray-600 text-white\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent className=\"bg-black border-gray-600\">\n                {difficulties.map((diff) => (\n                  <SelectItem key={diff.value} value={diff.value} className=\"text-white focus:bg-white/10\">\n                    {language === 'en' ? diff.labelEn : diff.labelAr}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"space-y-2 pt-4\">\n            <SpaceButton \n              onClick={startGame}\n              className=\"w-full\"\n            >\n              <Play className=\"h-4 w-4 mr-2\" />\n              {translations.startGame}\n            </SpaceButton>\n\n            <SpaceButton \n              onClick={() => setGameState('multiplayer')}\n              variant=\"secondary\"\n              className=\"w-full\"\n            >\n              <Users className=\"h-4 w-4 mr-2\" />\n              {translations.multiplayer}\n            </SpaceButton>\n\n            <SpaceButton \n              onClick={() => setGameState('payment')}\n              variant=\"secondary\"\n              className=\"w-full\"\n            >\n              <CreditCard className=\"h-4 w-4 mr-2\" />\n              {translations.premium}\n            </SpaceButton>\n          </div>\n          </div>\n        </HologramCard>\n    </div>\n\n    {/* Authentication Modal */}\n    <AuthModal \n      isOpen={showAuthModal}\n      onClose={() => setShowAuthModal(false)}\n      initialMode={authMode}\n    />\n  </>\n  );\n}\n","size_bytes":8206},"client/src/components/game/MultiplayerGame.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { useMultiplayer } from '../../lib/stores/useMultiplayer';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { useAudio } from '../../lib/stores/useAudio';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { Button } from '../ui/button';\nimport { Card, CardContent, CardHeader } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { Progress } from '../ui/progress';\nimport { Avatar, AvatarFallback } from '../ui/avatar';\nimport { CheckCircle, XCircle, Clock, Users, Trophy, Star, Zap } from 'lucide-react';\n\nexport default function MultiplayerGame() {\n  const { \n    currentRoom,\n    gameStarted,\n    roundResults,\n    gameResults,\n    setPlayerReady,\n    submitAnswer,\n    disconnect\n  } = useMultiplayer();\n  \n  const { translations } = useLanguage();\n  const { playHit, playSuccess } = useAudio();\n  const { setGameState } = useTriviaGame();\n  \n  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);\n  const [hasAnswered, setHasAnswered] = useState(false);\n  const [showResults, setShowResults] = useState(false);\n\n  // Handle room state changes\n  useEffect(() => {\n    if (!currentRoom) {\n      setGameState('menu');\n      return;\n    }\n  }, [currentRoom, setGameState]);\n\n  // Handle round results\n  useEffect(() => {\n    if (roundResults) {\n      setShowResults(true);\n      setHasAnswered(false);\n      setSelectedAnswer(null);\n      \n      // Play sound based on result\n      const myResult = roundResults.results?.find((r: any) => r.playerId === currentRoom?.players[0]?.id);\n      if (myResult?.isCorrect) {\n        playSuccess();\n      } else {\n        playHit();\n      }\n    }\n  }, [roundResults, playSuccess, playHit, currentRoom]);\n\n  // Handle game end\n  useEffect(() => {\n    if (gameResults) {\n      setShowResults(true);\n    }\n  }, [gameResults]);\n\n  // Auto-hide results after delay\n  useEffect(() => {\n    if (showResults && !gameResults) {\n      const timer = setTimeout(() => {\n        setShowResults(false);\n      }, 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [showResults, gameResults]);\n\n  const handleAnswer = (answerIndex: number) => {\n    if (hasAnswered || !currentRoom?.currentQuestion) return;\n    \n    setSelectedAnswer(answerIndex);\n    setHasAnswered(true);\n    \n    const timeSpent = 30 - (currentRoom.timeRemaining || 0);\n    submitAnswer(answerIndex, timeSpent);\n  };\n\n  const handleReady = () => {\n    setPlayerReady();\n  };\n\n  const handleLeaveGame = () => {\n    disconnect();\n    setGameState('menu');\n  };\n\n  if (!currentRoom) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Card className=\"bg-black/80 border-gray-600 p-6\">\n          <div className=\"text-white text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white mx-auto mb-4\"></div>\n            Loading multiplayer game...\n          </div>\n        </Card>\n      </div>\n    );\n  }\n\n  // Waiting room\n  if (currentRoom.status === 'waiting' || !gameStarted) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen p-4\">\n        <Card className=\"w-full max-w-2xl bg-black/90 border-gray-600 text-white\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex items-center justify-center gap-2 mb-4\">\n              <Users className=\"h-6 w-6 text-blue-400\" />\n              <h2 className=\"text-2xl font-bold\">\n                {currentRoom.mode.toUpperCase()} Match\n              </h2>\n            </div>\n            <p className=\"text-gray-300\">Waiting for all players to be ready...</p>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-6\">\n            {/* Players */}\n            <div className=\"space-y-3\">\n              {currentRoom.players.map((player, index) => (\n                <div key={player.id} className=\"flex items-center justify-between p-3 bg-gray-800 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar>\n                      <AvatarFallback className=\"bg-blue-600 text-white\">\n                        {player.name.charAt(0).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <div className=\"font-semibold\">{player.name}</div>\n                      <div className=\"text-sm text-gray-400\">\n                        Level {player.level} • {player.wins} wins\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"outline\" className=\"border-gray-600\">\n                      {player.country}\n                    </Badge>\n                    {player.isReady ? (\n                      <Badge className=\"bg-green-600\">\n                        <CheckCircle className=\"h-3 w-3 mr-1\" />\n                        Ready\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"outline\" className=\"border-yellow-600 text-yellow-400\">\n                        Waiting...\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Ready Button */}\n            <div className=\"text-center space-y-4\">\n              <Button \n                onClick={handleReady}\n                className=\"bg-green-600 hover:bg-green-700 text-white px-8\"\n                size=\"lg\"\n              >\n                <CheckCircle className=\"h-4 w-4 mr-2\" />\n                I'm Ready!\n              </Button>\n              \n              <Button \n                onClick={handleLeaveGame}\n                variant=\"outline\"\n                className=\"border-gray-600 text-white hover:bg-white/10\"\n              >\n                Leave Game\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Game ended\n  if (gameResults) {\n    const sortedResults = [...gameResults.results].sort((a, b) => b.score - a.score);\n    const winner = gameResults.winner;\n    const isDraw = gameResults.isDraw;\n\n    return (\n      <div className=\"flex items-center justify-center min-h-screen p-4\">\n        <Card className=\"w-full max-w-lg bg-black/90 border-gray-600 text-white\">\n          <CardHeader className=\"text-center\">\n            <div className=\"text-6xl mb-4\">\n              {isDraw ? '🤝' : '🏆'}\n            </div>\n            <h2 className=\"text-2xl font-bold mb-2\">\n              {isDraw ? 'It\\'s a Draw!' : 'Game Complete!'}\n            </h2>\n            {winner && !isDraw && (\n              <p className=\"text-lg text-yellow-400\">\n                🎉 {winner.name} wins with {winner.score} points!\n              </p>\n            )}\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            {/* Final Scores */}\n            <div className=\"space-y-2\">\n              <h3 className=\"font-semibold text-center mb-3\">Final Scores</h3>\n              {sortedResults.map((result, index) => (\n                <div key={result.playerId} className=\"flex items-center justify-between p-3 bg-gray-800 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-sm font-bold\">\n                      #{index + 1}\n                    </div>\n                    <div>\n                      <div className=\"font-semibold\">{result.playerName}</div>\n                      <div className=\"text-sm text-gray-400\">\n                        Best streak: {result.streak}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-lg font-bold text-blue-400\">\n                      {result.score}\n                    </div>\n                    <div className=\"text-xs text-gray-400\">points</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Actions */}\n            <div className=\"pt-4 space-y-2\">\n              <Button \n                onClick={handleLeaveGame}\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n              >\n                Back to Lobby\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Show round results\n  if (showResults && roundResults) {\n    const myResult = roundResults.results?.find((r: any) => r.playerId === currentRoom?.players[0]?.id);\n    const isCorrect = myResult?.isCorrect;\n\n    return (\n      <div className=\"flex items-center justify-center min-h-screen p-4\">\n        <Card className=\"w-full max-w-2xl bg-black/90 border-gray-600 text-white\">\n          <CardHeader className=\"text-center\">\n            <div className={`text-6xl mb-4 ${isCorrect ? 'text-green-400' : 'text-red-400'}`}>\n              {isCorrect ? '✅' : '❌'}\n            </div>\n            <h2 className={`text-2xl font-bold ${isCorrect ? 'text-green-400' : 'text-red-400'}`}>\n              {isCorrect ? 'Correct!' : 'Incorrect'}\n            </h2>\n            {roundResults.explanation && (\n              <p className=\"text-gray-300 text-sm mt-2\">\n                {roundResults.explanation}\n              </p>\n            )}\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            {/* Player Scores */}\n            <div className=\"space-y-2\">\n              <h3 className=\"font-semibold text-center mb-3\">Round Results</h3>\n              {roundResults.results?.map((result: any) => (\n                <div key={result.playerId} className=\"flex items-center justify-between p-3 bg-gray-800 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className={`w-6 h-6 rounded-full flex items-center justify-center ${\n                      result.isCorrect ? 'bg-green-600' : 'bg-red-600'\n                    }`}>\n                      {result.isCorrect ? (\n                        <CheckCircle className=\"h-4 w-4\" />\n                      ) : (\n                        <XCircle className=\"h-4 w-4\" />\n                      )}\n                    </div>\n                    <div>\n                      <div className=\"font-semibold\">{result.playerName}</div>\n                      <div className=\"text-sm text-gray-400\">\n                        Streak: {result.streak}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-lg font-bold text-blue-400\">\n                      {result.score}\n                    </div>\n                    <div className=\"text-xs text-gray-400\">total</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Active game\n  const currentQuestion = currentRoom.currentQuestion;\n  const timeRemaining = currentRoom.timeRemaining || 0;\n  const timePercentage = (timeRemaining / 30) * 100;\n\n  if (!currentQuestion) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Card className=\"bg-black/80 border-gray-600 p-6\">\n          <div className=\"text-white text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white mx-auto mb-4\"></div>\n            Loading next question...\n          </div>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen p-4\">\n      {/* Top UI Bar */}\n      <div className=\"max-w-4xl mx-auto mb-6\">\n        <div className=\"flex justify-between items-center mb-4\">\n          {/* Question Progress */}\n          <Card className=\"bg-black/70 border-gray-600 px-4 py-2\">\n            <div className=\"text-white text-sm\">\n              Question {currentRoom.questionIndex + 1}/{currentRoom.totalQuestions}\n            </div>\n            <Progress \n              value={((currentRoom.questionIndex + 1) / currentRoom.totalQuestions) * 100} \n              className=\"w-32 mt-1\" \n            />\n          </Card>\n\n          {/* Players */}\n          <div className=\"flex gap-2\">\n            {currentRoom.players.map((player) => (\n              <Card key={player.id} className=\"bg-black/70 border-gray-600 px-3 py-2\">\n                <div className=\"text-white text-xs\">\n                  {player.name}\n                </div>\n                <div className=\"text-blue-400 font-bold\">\n                  {player.score || 0}\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Timer */}\n        <Card className=\"bg-black/70 border-gray-600 p-2\">\n          <div className=\"flex justify-between items-center mb-1\">\n            <span className=\"text-white text-sm\">Time Remaining</span>\n            <span className={`text-white text-sm font-bold ${timeRemaining <= 10 ? 'text-red-400' : ''}`}>\n              {timeRemaining}s\n            </span>\n          </div>\n          <Progress \n            value={timePercentage} \n            className=\"w-full\"\n            style={{\n              '--progress-foreground': timePercentage > 50 ? '#10B981' : timePercentage > 20 ? '#F59E0B' : '#EF4444'\n            } as React.CSSProperties}\n          />\n        </Card>\n      </div>\n\n      {/* Question */}\n      <div className=\"flex items-center justify-center\">\n        <Card className=\"w-full max-w-2xl bg-black/90 border-gray-600 text-white\">\n          <CardHeader className=\"text-center\">\n            <Badge className=\"bg-gray-700 text-gray-300 mb-4\">\n              {currentQuestion.category}\n            </Badge>\n            <h2 className=\"text-xl font-semibold leading-relaxed\">\n              {currentQuestion.question}\n            </h2>\n          </CardHeader>\n\n          <CardContent className=\"space-y-3\">\n            {/* Answer Options */}\n            {currentQuestion.options.map((option: string, index: number) => {\n              const isSelected = selectedAnswer === index;\n              \n              let buttonClass = \"w-full p-4 text-left transition-all duration-200 \";\n              \n              if (hasAnswered && isSelected) {\n                buttonClass += \"bg-blue-600 border-blue-500 text-white\";\n              } else if (hasAnswered) {\n                buttonClass += \"bg-gray-700 border-gray-600 text-gray-300 opacity-50\";\n              } else if (isSelected) {\n                buttonClass += \"bg-blue-600 hover:bg-blue-700 border-blue-500 text-white\";\n              } else {\n                buttonClass += \"bg-gray-800 hover:bg-gray-700 border-gray-600 text-white\";\n              }\n\n              return (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  onClick={() => handleAnswer(index)}\n                  disabled={hasAnswered}\n                  className={buttonClass}\n                >\n                  <span className=\"text-base\">{option}</span>\n                </Button>\n              );\n            })}\n\n            {/* Answer Status */}\n            {hasAnswered && (\n              <div className=\"text-center pt-4\">\n                <div className=\"text-blue-400\">\n                  ✓ Answer submitted! Waiting for other players...\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":15564},"client/src/components/game/MultiplayerLobby.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { useMultiplayer, type Challenge } from '../../lib/stores/useMultiplayer';\nimport { Button } from '../ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { Input } from '../ui/input';\nimport { Avatar, AvatarFallback } from '../ui/avatar';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '../ui/dialog';\nimport { Users, Search, ArrowLeft, Crown, Wifi, WifiOff, UserCheck, Loader } from 'lucide-react';\n\nexport default function MultiplayerLobby() {\n  const { setGameState, category, difficulty } = useTriviaGame();\n  const { translations } = useLanguage();\n  const { \n    connect, \n    disconnect, \n    findMatch, \n    cancelMatchmaking, \n    challengePlayer, \n    respondToChallenge,\n    isConnected, \n    onlinePlayers, \n    onlinePlayersCount,\n    isSearchingMatch,\n    matchmakingMode,\n    currentRoom,\n    pendingChallenge,\n    connectionError\n  } = useMultiplayer();\n  \n  const [searchQuery, setSearchQuery] = useState('');\n  const [playerName, setPlayerName] = useState('');\n  const [showNameDialog, setShowNameDialog] = useState(true);\n\n  // Initialize connection when component mounts\n  useEffect(() => {\n    if (!isConnected && playerName) {\n      const playerData = {\n        name: playerName,\n        level: Math.floor(Math.random() * 50) + 1, // Random level for demo\n        wins: Math.floor(Math.random() * 100),     // Random wins for demo\n        country: 'US' // Default country\n      };\n      connect(playerData);\n    }\n\n    return () => {\n      // Don't disconnect here as we want to maintain connection\n      // disconnect();\n    };\n  }, [playerName, isConnected, connect]);\n\n  // Navigate to game when room is found\n  useEffect(() => {\n    if (currentRoom) {\n      setGameState('playing'); // Navigate to multiplayer game\n    }\n  }, [currentRoom, setGameState]);\n\n  // Handle quick match\n  const handleQuickMatch = (mode: '1v1' | '2v2') => {\n    if (!isConnected) {\n      alert('Not connected to server. Please refresh and try again.');\n      return;\n    }\n    findMatch(mode, category, difficulty);\n  };\n\n  // Handle player name submission\n  const handleJoinMultiplayer = () => {\n    if (playerName.trim()) {\n      setShowNameDialog(false);\n    }\n  };\n\n  // Handle challenge response\n  const handleChallengeResponse = (accepted: boolean) => {\n    respondToChallenge(accepted);\n  };\n\n  // Filter players based on search\n  const filteredPlayers = onlinePlayers.filter(player =>\n    player.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <>\n      {/* Name Input Dialog */}\n      <Dialog open={showNameDialog} onOpenChange={() => {}}>\n        <DialogContent className=\"bg-black/90 border-gray-600 text-white\">\n          <DialogHeader>\n            <DialogTitle>Join Multiplayer</DialogTitle>\n            <DialogDescription>\n              Enter your player name to join the multiplayer lobby\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <Input\n              placeholder=\"Enter your player name\"\n              value={playerName}\n              onChange={(e) => setPlayerName(e.target.value)}\n              className=\"bg-gray-800 border-gray-600 text-white\"\n              onKeyPress={(e) => e.key === 'Enter' && handleJoinMultiplayer()}\n            />\n            <Button \n              onClick={handleJoinMultiplayer}\n              className=\"w-full bg-blue-600 hover:bg-blue-700\"\n              disabled={!playerName.trim()}\n            >\n              Join Multiplayer\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Challenge Dialog */}\n      {pendingChallenge && (\n        <Dialog open={!!pendingChallenge} onOpenChange={() => {}}>\n          <DialogContent className=\"bg-black/90 border-gray-600 text-white\">\n            <DialogHeader>\n              <DialogTitle>Challenge Received!</DialogTitle>\n              <DialogDescription>\n                {pendingChallenge.from.name} challenged you to a {pendingChallenge.mode} match\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"flex gap-3\">\n              <Button \n                onClick={() => handleChallengeResponse(true)}\n                className=\"flex-1 bg-green-600 hover:bg-green-700\"\n              >\n                Accept\n              </Button>\n              <Button \n                onClick={() => handleChallengeResponse(false)}\n                variant=\"outline\"\n                className=\"flex-1 border-gray-600 text-white hover:bg-white/10\"\n              >\n                Decline\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n    <div className=\"flex items-center justify-center min-h-screen p-4\">\n      <div className=\"w-full max-w-4xl space-y-6\">\n        {/* Header */}\n        <Card className=\"bg-black/90 border-gray-600 text-white\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => {\n                    disconnect(); // Disconnect when leaving\n                    setGameState('menu');\n                  }}\n                  className=\"text-white hover:bg-white/10\"\n                >\n                  <ArrowLeft className=\"h-4 w-4\" />\n                </Button>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-6 w-6 text-blue-400\" />\n                  {translations.multiplayer}\n                </CardTitle>\n              </div>\n              \n              <div className=\"flex items-center gap-2\">\n                {isConnected ? (\n                  <Badge className=\"bg-green-600\">\n                    <Wifi className=\"h-4 w-4 mr-1\" />\n                    {translations.online}\n                  </Badge>\n                ) : (\n                  <Badge variant=\"destructive\">\n                    <WifiOff className=\"h-4 w-4 mr-1\" />\n                    {connectionError ? 'Connection Error' : translations.offline}\n                  </Badge>\n                )}\n                <Badge variant=\"outline\" className=\"border-blue-500 text-blue-400\">\n                  {onlinePlayersCount} {translations.playersOnline}\n                </Badge>\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Left Panel - Game Modes */}\n          <Card className=\"bg-black/90 border-gray-600 text-white\">\n            <CardHeader>\n              <CardTitle>{translations.gameModes}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Quick Match 1v1 */}\n              <Button\n                onClick={() => handleQuickMatch('1v1')}\n                disabled={isSearchingMatch || !isConnected}\n                className=\"w-full h-16 bg-blue-600 hover:bg-blue-700 text-white\"\n              >\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold\">1 vs 1</div>\n                  <div className=\"text-sm opacity-80\">{translations.quickMatch}</div>\n                </div>\n              </Button>\n\n              {/* Quick Match 2v2 */}\n              <Button\n                onClick={() => handleQuickMatch('2v2')}\n                disabled={isSearchingMatch || !isConnected}\n                className=\"w-full h-16 bg-purple-600 hover:bg-purple-700 text-white\"\n              >\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold\">2 vs 2</div>\n                  <div className=\"text-sm opacity-80\">{translations.teamMatch}</div>\n                </div>\n              </Button>\n\n              {/* Search for Player */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm text-gray-300\">{translations.findPlayer}</label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder={translations.enterPlayerName}\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"bg-gray-800 border-gray-600 text-white\"\n                    disabled={!isConnected}\n                  />\n                  <Button \n                    variant=\"outline\"\n                    className=\"border-gray-600 text-white hover:bg-white/10\"\n                    disabled={!isConnected}\n                  >\n                    <Search className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              {/* Searching State */}\n              {isSearchingMatch && (\n                <Card className=\"bg-yellow-900/50 border-yellow-600 p-4\">\n                  <div className=\"text-center\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-yellow-400 mx-auto mb-2\"></div>\n                    <div className=\"text-yellow-200\">\n                      {translations.searchingForOpponent}...\n                    </div>\n                    <div className=\"text-sm text-yellow-300 mt-1\">\n                      {matchmakingMode} {translations.mode}\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={cancelMatchmaking}\n                      className=\"mt-3 border-yellow-600 text-yellow-200 hover:bg-yellow-800/20\"\n                    >\n                      {translations.cancel}\n                    </Button>\n                  </div>\n                </Card>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Right Panel - Online Players */}\n          <Card className=\"bg-black/90 border-gray-600 text-white\">\n            <CardHeader>\n              <CardTitle>{translations.onlinePlayers}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                {filteredPlayers.map((player) => (\n                  <Card key={player.id} className=\"bg-gray-800 border-gray-700 p-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar>\n                          <AvatarFallback className=\"bg-blue-600 text-white\">\n                            {player.name.charAt(0).toUpperCase()}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <div className=\"font-semibold flex items-center gap-2\">\n                            {player.name}\n                            {player.level > 25 && (\n                              <Crown className=\"h-4 w-4 text-yellow-400\" />\n                            )}\n                          </div>\n                          <div className=\"text-sm text-gray-400\">\n                            {translations.level} {player.level} • {player.wins} {translations.wins}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\" className=\"border-gray-600\">\n                          {player.country}\n                        </Badge>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"border-blue-600 text-blue-400 hover:bg-blue-900/20\"\n                          disabled={!isConnected}\n                          onClick={() => challengePlayer(player.id, '1v1')}\n                        >\n                          {translations.challenge}\n                        </Button>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n\n              {!isConnected && (\n                <div className=\"text-center py-8 text-gray-400\">\n                  <WifiOff className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                  <div>{translations.offlineMessage}</div>\n                </div>\n              )}\n\n              {isConnected && filteredPlayers.length === 0 && (\n                <div className=\"text-center py-8 text-gray-400\">\n                  <UserCheck className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                  <div>No other players online</div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Connection Status */}\n        {!isConnected && (\n          <Card className=\"bg-red-900/30 border-red-600\">\n            <CardContent className=\"p-4\">\n              <div className=\"text-red-200 text-sm text-center\">\n                {connectionError ? `Connection Error: ${connectionError}` : 'Connecting to multiplayer server...'}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n    </>\n  );\n}\n","size_bytes":13338},"client/src/components/game/PaymentMock.tsx":{"content":"import React, { useState } from 'react';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { Button } from '../ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Input } from '../ui/input';\nimport { Badge } from '../ui/badge';\nimport { \n  CreditCard, \n  ArrowLeft, \n  Check, \n  Star, \n  Zap, \n  Users, \n  Trophy,\n  Lock,\n  Shield\n} from 'lucide-react';\n\nexport default function PaymentMock() {\n  const { setGameState } = useTriviaGame();\n  const { translations } = useLanguage();\n  const [selectedPlan, setSelectedPlan] = useState<'basic' | 'premium' | 'elite'>('premium');\n  const [paymentMethod, setPaymentMethod] = useState<'card' | 'paypal'>('card');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const plans = [\n    {\n      id: 'basic',\n      nameEn: 'Basic',\n      nameAr: 'أساسي',\n      price: 4.99,\n      features: [\n        { en: '500 AI Questions/month', ar: '500 سؤال بالذكاء الاصطناعي/شهر' },\n        { en: 'Basic Categories', ar: 'فئات أساسية' },\n        { en: 'Score Tracking', ar: 'تتبع النقاط' },\n        { en: 'Mobile Support', ar: 'دعم الهاتف المحمول' },\n      ]\n    },\n    {\n      id: 'premium',\n      nameEn: 'Premium',\n      nameAr: 'مميز',\n      price: 9.99,\n      features: [\n        { en: 'Unlimited AI Questions', ar: 'أسئلة لا محدودة بالذكاء الاصطناعي' },\n        { en: 'All Categories', ar: 'جميع الفئات' },\n        { en: 'Multiplayer Access', ar: 'الوصول للعب الجماعي' },\n        { en: 'Advanced Statistics', ar: 'إحصائيات متقدمة' },\n        { en: 'Priority Support', ar: 'دعم أولوية' },\n      ],\n      popular: true\n    },\n    {\n      id: 'elite',\n      nameEn: 'Elite',\n      nameAr: 'نخبة',\n      price: 19.99,\n      features: [\n        { en: 'Everything in Premium', ar: 'كل شيء في المميز' },\n        { en: 'Custom Question Sets', ar: 'مجموعات أسئلة مخصصة' },\n        { en: 'Tournament Access', ar: 'الوصول للبطولات' },\n        { en: 'Leaderboard Rankings', ar: 'ترتيب قائمة المتصدرين' },\n        { en: 'White-label Options', ar: 'خيارات العلامة البيضاء' },\n      ]\n    }\n  ];\n\n  const handlePurchase = () => {\n    setIsProcessing(true);\n    \n    // Simulate payment processing\n    setTimeout(() => {\n      setIsProcessing(false);\n      alert(`${translations.mockPurchaseSuccess} (${selectedPlan.toUpperCase()})`);\n      setGameState('menu');\n    }, 2000);\n  };\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen p-4\">\n      <div className=\"w-full max-w-6xl space-y-6\">\n        {/* Header */}\n        <Card className=\"bg-black/90 border-gray-600 text-white\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setGameState('menu')}\n                  className=\"text-white hover:bg-white/10\"\n                >\n                  <ArrowLeft className=\"h-4 w-4\" />\n                </Button>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CreditCard className=\"h-6 w-6 text-green-400\" />\n                  {translations.premiumPlans}\n                </CardTitle>\n              </div>\n              <Badge className=\"bg-green-600\">\n                <Shield className=\"h-4 w-4 mr-1\" />\n                {translations.securePayment}\n              </Badge>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Pricing Plans */}\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {plans.map((plan) => (\n            <Card \n              key={plan.id}\n              className={`relative cursor-pointer transition-all duration-200 ${\n                selectedPlan === plan.id \n                  ? 'bg-blue-900/50 border-blue-500' \n                  : 'bg-black/80 border-gray-600 hover:border-gray-500'\n              } text-white`}\n              onClick={() => setSelectedPlan(plan.id as any)}\n            >\n              {plan.popular && (\n                <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                  <Badge className=\"bg-yellow-600 text-yellow-100\">\n                    <Star className=\"h-3 w-3 mr-1\" />\n                    {translations.popular}\n                  </Badge>\n                </div>\n              )}\n              \n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-xl\">\n                  {translations.language === 'en' ? plan.nameEn : plan.nameAr}\n                </CardTitle>\n                <div className=\"text-3xl font-bold text-blue-400\">\n                  ${plan.price}\n                  <span className=\"text-sm text-gray-400 font-normal\">/{translations.month}</span>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-3\">\n                {plan.features.map((feature, index) => (\n                  <div key={index} className=\"flex items-center gap-2\">\n                    <Check className=\"h-4 w-4 text-green-400 flex-shrink-0\" />\n                    <span className=\"text-sm\">\n                      {translations.language === 'en' ? feature.en : feature.ar}\n                    </span>\n                  </div>\n                ))}\n                \n                <div className=\"pt-4\">\n                  <Button \n                    className={`w-full ${\n                      selectedPlan === plan.id \n                        ? 'bg-blue-600 hover:bg-blue-700' \n                        : 'bg-gray-700 hover:bg-gray-600'\n                    }`}\n                    onClick={() => setSelectedPlan(plan.id as any)}\n                  >\n                    {selectedPlan === plan.id ? (\n                      <>\n                        <Check className=\"h-4 w-4 mr-2\" />\n                        {translations.selected}\n                      </>\n                    ) : (\n                      translations.selectPlan\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Payment Form */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Payment Method */}\n          <Card className=\"bg-black/90 border-gray-600 text-white\">\n            <CardHeader>\n              <CardTitle>{translations.paymentMethod}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button\n                  variant={paymentMethod === 'card' ? 'default' : 'outline'}\n                  onClick={() => setPaymentMethod('card')}\n                  className={paymentMethod === 'card' ? 'bg-blue-600' : 'border-gray-600 text-white hover:bg-white/10'}\n                >\n                  <CreditCard className=\"h-4 w-4 mr-2\" />\n                  {translations.creditCard}\n                </Button>\n                <Button\n                  variant={paymentMethod === 'paypal' ? 'default' : 'outline'}\n                  onClick={() => setPaymentMethod('paypal')}\n                  className={paymentMethod === 'paypal' ? 'bg-blue-600' : 'border-gray-600 text-white hover:bg-white/10'}\n                >\n                  PayPal\n                </Button>\n              </div>\n\n              {paymentMethod === 'card' && (\n                <div className=\"space-y-3\">\n                  <Input\n                    placeholder={translations.cardNumber}\n                    className=\"bg-gray-800 border-gray-600 text-white\"\n                    maxLength={19}\n                    value=\"**** **** **** 1234\"\n                    disabled\n                  />\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <Input\n                      placeholder={translations.expiryDate}\n                      className=\"bg-gray-800 border-gray-600 text-white\"\n                      value=\"12/25\"\n                      disabled\n                    />\n                    <Input\n                      placeholder={translations.cvv}\n                      className=\"bg-gray-800 border-gray-600 text-white\"\n                      value=\"***\"\n                      disabled\n                    />\n                  </div>\n                  <Input\n                    placeholder={translations.cardholderName}\n                    className=\"bg-gray-800 border-gray-600 text-white\"\n                    value=\"John Doe\"\n                    disabled\n                  />\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Order Summary */}\n          <Card className=\"bg-black/90 border-gray-600 text-white\">\n            <CardHeader>\n              <CardTitle>{translations.orderSummary}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span>{translations[selectedPlan]} {translations.plan}</span>\n                <span>${plans.find(p => p.id === selectedPlan)?.price}/mo</span>\n              </div>\n              \n              <div className=\"flex justify-between items-center text-green-400\">\n                <span>{translations.discount} (First Month)</span>\n                <span>-$2.00</span>\n              </div>\n              \n              <hr className=\"border-gray-600\" />\n              \n              <div className=\"flex justify-between items-center text-lg font-bold\">\n                <span>{translations.total}</span>\n                <span>${((plans.find(p => p.id === selectedPlan)?.price || 0) - 2).toFixed(2)}</span>\n              </div>\n\n              <Button \n                onClick={handlePurchase}\n                disabled={isProcessing}\n                className=\"w-full bg-green-600 hover:bg-green-700 text-white mt-6\"\n              >\n                {isProcessing ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    {translations.processing}...\n                  </div>\n                ) : (\n                  <>\n                    <Lock className=\"h-4 w-4 mr-2\" />\n                    {translations.subscribePay}\n                  </>\n                )}\n              </Button>\n              \n              <p className=\"text-xs text-gray-400 text-center mt-3\">\n                {translations.mockPaymentNotice}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10911},"client/src/components/game/TriviaQuestion.tsx":{"content":"import React, { useEffect } from 'react';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { useAudio } from '../../lib/stores/useAudio';\nimport { SpaceButton } from '../ui/SpaceButton';\nimport { HologramCard } from '../ui/HologramCard';\nimport { Badge } from '../ui/badge';\nimport { CheckCircle, XCircle, Clock } from 'lucide-react';\n\nexport default function TriviaQuestion() {\n  const { \n    currentQuestion, \n    selectedAnswer, \n    showAnswer,\n    answerQuestion,\n    nextQuestion,\n    questionNumber,\n    totalQuestions,\n    timeRemaining\n  } = useTriviaGame();\n  const { translations } = useLanguage();\n  const { playHit, playSuccess } = useAudio();\n\n  // Play sound when answer is revealed\n  useEffect(() => {\n    if (showAnswer) {\n      if (selectedAnswer === currentQuestion?.correctAnswer) {\n        playSuccess();\n      } else {\n        playHit();\n      }\n    }\n  }, [showAnswer, selectedAnswer, currentQuestion?.correctAnswer, playHit, playSuccess]);\n\n  if (!currentQuestion) {\n    return (\n      <div className=\"flex items-center justify-center p-4 py-20\">\n        <HologramCard className=\"p-6\">\n          <div className=\"text-blue-300 text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400 mx-auto mb-4\"></div>\n            {translations.loadingQuestion}...\n          </div>\n        </HologramCard>\n      </div>\n    );\n  }\n\n  const isCorrect = selectedAnswer === currentQuestion.correctAnswer;\n\n  return (\n    <div className=\"flex items-center justify-center p-4 py-20\">\n      <HologramCard className=\"w-full max-w-2xl\">\n        <div className=\"p-6 text-center\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <Badge className=\"bg-blue-900/50 border-blue-500 text-blue-300\">\n              {questionNumber}/{totalQuestions}\n            </Badge>\n            <div className=\"flex items-center gap-2\">\n              <Clock className=\"h-4 w-4 text-yellow-400\" />\n              <span className={`font-bold ${timeRemaining <= 10 ? 'text-red-400' : 'text-white'}`}>\n                {timeRemaining}s\n              </span>\n            </div>\n            <Badge className=\"bg-purple-900/50 border-purple-500 text-purple-300\">\n              {currentQuestion.difficulty}\n            </Badge>\n          </div>\n          \n          <Badge className=\"bg-gradient-to-r from-blue-900/50 to-purple-900/50 text-yellow-300 mb-4\">\n            {currentQuestion.category}\n          </Badge>\n        </div>\n\n        <div className=\"px-6 pb-6 space-y-6\">\n          {/* Question Text */}\n          <div className=\"text-center\">\n            <h2 className=\"text-xl font-semibold leading-relaxed mb-6\">\n              {currentQuestion.question}\n            </h2>\n          </div>\n\n          {/* Answer Options */}\n          <div className=\"grid grid-cols-1 gap-3\">\n            {currentQuestion.options.map((option, index) => {\n              const isSelected = selectedAnswer === index;\n              const isCorrectAnswer = index === currentQuestion.correctAnswer;\n              \n              let buttonClass = \"w-full p-4 text-left transition-all duration-200 \";\n              let icon = null;\n\n              if (showAnswer) {\n                if (isCorrectAnswer) {\n                  buttonClass += \"bg-green-600 hover:bg-green-700 border-green-500 text-white\";\n                  icon = <CheckCircle className=\"h-5 w-5 ml-auto text-green-200\" />;\n                } else if (isSelected) {\n                  buttonClass += \"bg-red-600 hover:bg-red-700 border-red-500 text-white\";\n                  icon = <XCircle className=\"h-5 w-5 ml-auto text-red-200\" />;\n                } else {\n                  buttonClass += \"bg-gray-700 border-gray-600 text-gray-300\";\n                }\n              } else {\n                if (isSelected) {\n                  buttonClass += \"bg-blue-600 hover:bg-blue-700 border-blue-500 text-white\";\n                } else {\n                  buttonClass += \"bg-gray-800 hover:bg-gray-700 border-gray-600 text-white\";\n                }\n              }\n\n              return (\n                <button\n                  key={index}\n                  onClick={() => !showAnswer && answerQuestion(index)}\n                  disabled={showAnswer}\n                  className={buttonClass + \"rounded-lg border-2 font-medium transition-all\"}\n                >\n                  <div className=\"flex items-center justify-between w-full\">\n                    <span className=\"text-base\">{option}</span>\n                    {icon}\n                  </div>\n                </button>\n              );\n            })}\n          </div>\n\n          {/* Answer Feedback */}\n          {showAnswer && (\n            <div className=\"text-center pt-4\">\n              <div className={`text-lg font-bold mb-2 ${isCorrect ? 'text-green-400' : 'text-red-400'}`}>\n                {isCorrect ? '✅ ' + translations.correct : '❌ ' + translations.incorrect}\n              </div>\n              \n              {currentQuestion.explanation && (\n                <p className=\"text-gray-300 text-sm mb-4\">\n                  {currentQuestion.explanation}\n                </p>\n              )}\n\n              <SpaceButton \n                onClick={nextQuestion}\n                className=\"px-8\"\n              >\n                {questionNumber === totalQuestions ? translations.seeResults : translations.nextQuestion}\n              </SpaceButton>\n            </div>\n          )}\n        </div>\n      </HologramCard>\n    </div>\n  );\n}\n","size_bytes":5573},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2001},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4419},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1598},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1140},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1902},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2935},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1828},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1012},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4873},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7224},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3849},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7480},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4132},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1198},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2143},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768},"client/src/components/ui/interface.tsx":{"content":"import { useEffect } from \"react\";\nimport { useGame } from \"@/lib/stores/useGame\";\nimport { useAudio } from \"@/lib/stores/useAudio\";\nimport { Button } from \"./button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"./card\";\nimport { VolumeX, Volume2, RotateCw, Trophy } from \"lucide-react\";\n\nexport function Interface() {\n  const restart = useGame((state) => state.restart);\n  const phase = useGame((state) => state.phase);\n  const { isMuted, toggleMute } = useAudio();\n\n  // Handle clicks on the interface in the ready phase to start the game\n  useEffect(() => {\n    if (phase === \"ready\") {\n      const handleClick = () => {\n        const activeElement = document.activeElement;\n        if (activeElement && 'blur' in activeElement) {\n          (activeElement as HTMLElement).blur();\n        }\n        const event = new KeyboardEvent(\"keydown\", { code: \"Space\" });\n        window.dispatchEvent(event);\n      };\n\n      window.addEventListener(\"click\", handleClick);\n      return () => window.removeEventListener(\"click\", handleClick);\n    }\n  }, [phase]);\n\n  return (\n    <>\n      {/* Top-right corner UI controls */}\n      <div className=\"fixed top-4 right-4 flex gap-2 z-10\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleMute}\n          title={isMuted ? \"Unmute\" : \"Mute\"}\n        >\n          {isMuted ? <VolumeX size={18} /> : <Volume2 size={18} />}\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={restart}\n          title=\"Restart Game\"\n        >\n          <RotateCw size={18} />\n        </Button>\n      </div>\n      \n      {/* Game completion overlay */}\n      {phase === \"ended\" && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-20 bg-black/30\">\n          <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                <Trophy className=\"text-yellow-500\" />\n                Level Complete!\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <p className=\"text-center text-muted-foreground\">\n                Congratulations! You successfully navigated the course.\n              </p>\n            </CardContent>\n            \n            <CardFooter className=\"flex justify-center\">\n              <Button onClick={restart} className=\"w-full\">\n                Play Again\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      )}\n      \n      {/* Instructions panel */}\n      <div className=\"fixed bottom-4 left-4 z-10\">\n        <Card className=\"w-auto max-w-xs bg-background/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-2\">Controls:</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>WASD or Arrow Keys: Move the ball</li>\n              <li>Space: Jump</li>\n              <li>R: Restart game</li>\n              <li>M: Toggle sound</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":3180},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8522},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5124},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1292},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":792},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1410},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5639},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4280},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-is-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":23790},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":266},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1037},"client/src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1148},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2859},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1877},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":649},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1486},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1217},"client/src/lib/stores/useAudio.tsx":{"content":"import { create } from \"zustand\";\n\ninterface AudioState {\n  backgroundMusic: HTMLAudioElement | null;\n  hitSound: HTMLAudioElement | null;\n  successSound: HTMLAudioElement | null;\n  isMuted: boolean;\n  \n  // Setter functions\n  setBackgroundMusic: (music: HTMLAudioElement) => void;\n  setHitSound: (sound: HTMLAudioElement) => void;\n  setSuccessSound: (sound: HTMLAudioElement) => void;\n  \n  // Control functions\n  toggleMute: () => void;\n  playHit: () => void;\n  playSuccess: () => void;\n}\n\nexport const useAudio = create<AudioState>((set, get) => ({\n  backgroundMusic: null,\n  hitSound: null,\n  successSound: null,\n  isMuted: true, // Start muted by default\n  \n  setBackgroundMusic: (music) => set({ backgroundMusic: music }),\n  setHitSound: (sound) => set({ hitSound: sound }),\n  setSuccessSound: (sound) => set({ successSound: sound }),\n  \n  toggleMute: () => {\n    const { isMuted } = get();\n    const newMutedState = !isMuted;\n    \n    // Just update the muted state\n    set({ isMuted: newMutedState });\n    \n    // Log the change\n    console.log(`Sound ${newMutedState ? 'muted' : 'unmuted'}`);\n  },\n  \n  playHit: () => {\n    const { hitSound, isMuted } = get();\n    if (hitSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Hit sound skipped (muted)\");\n        return;\n      }\n      \n      // Clone the sound to allow overlapping playback\n      const soundClone = hitSound.cloneNode() as HTMLAudioElement;\n      soundClone.volume = 0.3;\n      soundClone.play().catch(error => {\n        console.log(\"Hit sound play prevented:\", error);\n      });\n    }\n  },\n  \n  playSuccess: () => {\n    const { successSound, isMuted } = get();\n    if (successSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Success sound skipped (muted)\");\n        return;\n      }\n      \n      successSound.currentTime = 0;\n      successSound.play().catch(error => {\n        console.log(\"Success sound play prevented:\", error);\n      });\n    }\n  }\n}));\n","size_bytes":2025},"client/src/lib/stores/useGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport type GamePhase = \"ready\" | \"playing\" | \"ended\";\n\ninterface GameState {\n  phase: GamePhase;\n  \n  // Actions\n  start: () => void;\n  restart: () => void;\n  end: () => void;\n}\n\nexport const useGame = create<GameState>()(\n  subscribeWithSelector((set) => ({\n    phase: \"ready\",\n    \n    start: () => {\n      set((state) => {\n        // Only transition from ready to playing\n        if (state.phase === \"ready\") {\n          return { phase: \"playing\" };\n        }\n        return {};\n      });\n    },\n    \n    restart: () => {\n      set(() => ({ phase: \"ready\" }));\n    },\n    \n    end: () => {\n      set((state) => {\n        // Only transition from playing to ended\n        if (state.phase === \"playing\") {\n          return { phase: \"ended\" };\n        }\n        return {};\n      });\n    }\n  }))\n);\n","size_bytes":893},"client/src/lib/stores/useLanguage.tsx":{"content":"import { create } from \"zustand\";\nimport { getLocalStorage, setLocalStorage } from \"../localStorage\";\n\nexport type Language = 'en' | 'ar';\n\ninterface Translations {\n  // Game UI\n  gameSubtitle: string;\n  startGame: string;\n  multiplayer: string;\n  premium: string;\n  category: string;\n  difficulty: string;\n  question: string;\n  timeRemaining: string;\n  score: string;\n  streak: string;\n  correct: string;\n  incorrect: string;\n  nextQuestion: string;\n  seeResults: string;\n  loadingQuestion: string;\n  \n  // Results\n  gameComplete: string;\n  newHighScore: string;\n  highScore: string;\n  accuracy: string;\n  avgTime: string;\n  bestStreak: string;\n  playAgain: string;\n  mainMenu: string;\n  share: string;\n  \n  // Categories\n  general: string;\n  science: string;\n  history: string;\n  geography: string;\n  sports: string;\n  entertainment: string;\n  \n  // Difficulties\n  easy: string;\n  medium: string;\n  hard: string;\n  \n  // Performance ratings\n  excellent: string;\n  great: string;\n  good: string;\n  fair: string;\n  needsImprovement: string;\n  \n  // Multiplayer\n  online: string;\n  offline: string;\n  playersOnline: string;\n  gameModes: string;\n  quickMatch: string;\n  teamMatch: string;\n  findPlayer: string;\n  enterPlayerName: string;\n  searchingForOpponent: string;\n  mode: string;\n  cancel: string;\n  onlinePlayers: string;\n  level: string;\n  wins: string;\n  challenge: string;\n  challengePlayer: string;\n  matchFound: string;\n  offlineMessage: string;\n  mockMultiplayerNotice: string;\n  \n  // Payment\n  premiumPlans: string;\n  securePayment: string;\n  popular: string;\n  month: string;\n  selected: string;\n  selectPlan: string;\n  paymentMethod: string;\n  creditCard: string;\n  cardNumber: string;\n  expiryDate: string;\n  cvv: string;\n  cardholderName: string;\n  orderSummary: string;\n  basic: string;\n  premiumPlan: string;\n  elite: string;\n  plan: string;\n  discount: string;\n  total: string;\n  processing: string;\n  subscribePay: string;\n  mockPaymentNotice: string;\n  mockPurchaseSuccess: string;\n}\n\nconst englishTranslations: Translations = {\n  // Game UI\n  gameSubtitle: \"AI-Powered Trivia Challenge\",\n  startGame: \"Start Game\",\n  multiplayer: \"Multiplayer\",\n  premium: \"Premium\",\n  category: \"Category\",\n  difficulty: \"Difficulty\",\n  question: \"Question\",\n  timeRemaining: \"Time Remaining\",\n  score: \"Score\",\n  streak: \"Streak\",\n  correct: \"Correct!\",\n  incorrect: \"Incorrect\",\n  nextQuestion: \"Next Question\",\n  seeResults: \"See Results\",\n  loadingQuestion: \"Loading Question\",\n  \n  // Results\n  gameComplete: \"Game Complete!\",\n  newHighScore: \"New High Score\",\n  highScore: \"High Score\",\n  accuracy: \"Accuracy\",\n  avgTime: \"Avg Time\",\n  bestStreak: \"Best Streak\",\n  playAgain: \"Play Again\",\n  home: \"Home\",\n  mainMenu: \"Main Menu\",\n  share: \"Share\",\n  \n  // Categories\n  general: \"General Knowledge\",\n  science: \"Science & Nature\",\n  history: \"History\",\n  geography: \"Geography\",\n  sports: \"Sports\",\n  entertainment: \"Entertainment\",\n  \n  // Difficulties\n  easy: \"Easy\",\n  medium: \"Medium\",\n  hard: \"Hard\",\n  \n  // Performance ratings\n  excellent: \"Excellent!\",\n  great: \"Great Job!\",\n  good: \"Good Work!\",\n  fair: \"Fair\",\n  needsImprovement: \"Keep Practicing!\",\n  \n  // Multiplayer\n  online: \"Online\",\n  offline: \"Offline\",\n  playersOnline: \"players online\",\n  gameModes: \"Game Modes\",\n  quickMatch: \"Quick Match\",\n  teamMatch: \"Team Match\",\n  findPlayer: \"Find Player\",\n  enterPlayerName: \"Enter player name...\",\n  searchingForOpponent: \"Searching for opponent\",\n  mode: \"mode\",\n  cancel: \"Cancel\",\n  onlinePlayers: \"Online Players\",\n  level: \"Level\",\n  wins: \"wins\",\n  challenge: \"Challenge\",\n  challengePlayer: \"Challenge Player\",\n  matchFound: \"Match Found\",\n  offlineMessage: \"Connect to internet to play with others\",\n  mockMultiplayerNotice: \"This is a demo multiplayer interface. Real multiplayer coming soon!\",\n  \n  // Payment\n  premiumPlans: \"Premium Plans\",\n  securePayment: \"Secure Payment\",\n  popular: \"Most Popular\",\n  month: \"month\",\n  selected: \"Selected\",\n  selectPlan: \"Select Plan\",\n  paymentMethod: \"Payment Method\",\n  creditCard: \"Credit Card\",\n  cardNumber: \"Card Number\",\n  expiryDate: \"MM/YY\",\n  cvv: \"CVV\",\n  cardholderName: \"Cardholder Name\",\n  orderSummary: \"Order Summary\",\n  basic: \"Basic\",\n  premiumPlan: \"Premium\",\n  elite: \"Elite\",\n  plan: \"Plan\",\n  discount: \"Discount\",\n  total: \"Total\",\n  processing: \"Processing\",\n  subscribePay: \"Subscribe & Pay\",\n  mockPaymentNotice: \"This is a mock payment interface for demonstration purposes only.\",\n  mockPurchaseSuccess: \"Mock purchase successful! Thank you for trying our demo.\"\n};\n\nconst arabicTranslations: Translations = {\n  // Game UI\n  gameSubtitle: \"تحدي المعلومات العامة بالذكاء الاصطناعي\",\n  startGame: \"بدء اللعبة\",\n  multiplayer: \"متعدد الأشخاص\",\n  premium: \"مميز\",\n  category: \"الفئة\",\n  difficulty: \"الصعوبة\",\n  question: \"السؤال\",\n  timeRemaining: \"الوقت المتبقي\",\n  score: \"النقاط\",\n  streak: \"التتابع\",\n  correct: \"إجابة صحيحة!\",\n  incorrect: \"إجابة خاطئة\",\n  nextQuestion: \"السؤال التالي\",\n  seeResults: \"عرض النتائج\",\n  loadingQuestion: \"جاري تحميل السؤال\",\n  \n  // Results\n  gameComplete: \"انتهت اللعبة!\",\n  newHighScore: \"رقم قياسي جديد\",\n  highScore: \"أعلى نقاط\",\n  accuracy: \"الدقة\",\n  avgTime: \"متوسط الوقت\",\n  bestStreak: \"أفضل تتابع\",\n  playAgain: \"العب مرة أخرى\",\n  home: \"الرئيسية\",\n  mainMenu: \"القائمة الرئيسية\",\n  share: \"مشاركة\",\n  \n  // Categories\n  general: \"معلومات عامة\",\n  science: \"علوم وطبيعة\",\n  history: \"تاريخ\",\n  geography: \"جغرافيا\",\n  sports: \"رياضة\",\n  entertainment: \"ترفيه\",\n  \n  // Difficulties\n  easy: \"سهل\",\n  medium: \"متوسط\",\n  hard: \"صعب\",\n  \n  // Performance ratings\n  excellent: \"ممتاز!\",\n  great: \"عمل رائع!\",\n  good: \"عمل جيد!\",\n  fair: \"لا بأس\",\n  needsImprovement: \"استمر في التمرن!\",\n  \n  // Multiplayer\n  online: \"متصل\",\n  offline: \"غير متصل\",\n  playersOnline: \"لاعب متصل\",\n  gameModes: \"أنماط اللعب\",\n  quickMatch: \"مباراة سريعة\",\n  teamMatch: \"مباراة جماعية\",\n  findPlayer: \"البحث عن لاعب\",\n  enterPlayerName: \"أدخل اسم اللاعب...\",\n  searchingForOpponent: \"البحث عن منافس\",\n  mode: \"نمط\",\n  cancel: \"إلغاء\",\n  onlinePlayers: \"اللاعبون المتصلون\",\n  level: \"المستوى\",\n  wins: \"انتصار\",\n  challenge: \"تحدي\",\n  challengePlayer: \"تحدي اللاعب\",\n  matchFound: \"تم العثور على مباراة\",\n  offlineMessage: \"اتصل بالإنترنت للعب مع الآخرين\",\n  mockMultiplayerNotice: \"هذه واجهة تجريبية للعب الجماعي. اللعب الجماعي الحقيقي قادم قريباً!\",\n  \n  // Payment\n  premiumPlans: \"الخطط المميزة\",\n  securePayment: \"دفع آمن\",\n  popular: \"الأكثر شعبية\",\n  month: \"شهر\",\n  selected: \"محدد\",\n  selectPlan: \"اختر الخطة\",\n  paymentMethod: \"طريقة الدفع\",\n  creditCard: \"بطاقة ائتمان\",\n  cardNumber: \"رقم البطاقة\",\n  expiryDate: \"الشهر/السنة\",\n  cvv: \"رمز الأمان\",\n  cardholderName: \"اسم حامل البطاقة\",\n  orderSummary: \"ملخص الطلب\",\n  basic: \"أساسي\",\n  premiumPlan: \"مميز\",\n  elite: \"نخبة\",\n  plan: \"خطة\",\n  discount: \"خصم\",\n  total: \"المجموع\",\n  processing: \"جاري المعالجة\",\n  subscribePay: \"اشترك وادفع\",\n  mockPaymentNotice: \"هذه واجهة دفع تجريبية لأغراض العرض فقط.\",\n  mockPurchaseSuccess: \"تم الشراء التجريبي بنجاح! شكراً لتجربة العرض التوضيحي.\"\n};\n\ninterface LanguageState {\n  language: Language;\n  translations: Translations;\n  \n  // Actions\n  setLanguage: (language: Language) => void;\n  toggleLanguage: () => void;\n}\n\nexport const useLanguage = create<LanguageState>((set, get) => {\n  // Force reset to English for now to fix the stuck Arabic issue\n  const initialLanguage: Language = 'en';\n  const initialTranslations = englishTranslations;\n  \n  // Clear any stored language and set to English\n  setLocalStorage('mirage_language', 'en');\n  document.documentElement.dir = 'ltr';\n  \n  return {\n    language: initialLanguage,\n    translations: initialTranslations,\n  \n    setLanguage: (language) => {\n      console.log('Setting language to:', language);\n      const translations = language === 'en' ? englishTranslations : arabicTranslations;\n      setLocalStorage('mirage_language', language);\n      \n      // Update document direction for Arabic\n      document.documentElement.dir = language === 'ar' ? 'rtl' : 'ltr';\n      \n      set({ language, translations });\n    },\n  \n    toggleLanguage: () => {\n      const currentLanguage = get().language;\n      const newLanguage: Language = currentLanguage === 'en' ? 'ar' : 'en';\n      get().setLanguage(newLanguage);\n    }\n  };\n})\n\n// Force initialize to English to fix stuck Arabic issue\ndocument.documentElement.dir = 'ltr';\n","size_bytes":9226},"client/src/lib/stores/useMultiplayer.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\nimport { io, Socket } from \"socket.io-client\";\n\n// Types for multiplayer\nexport interface MultiplayerPlayer {\n  id: string;\n  name: string;\n  level: number;\n  wins: number;\n  country: string;\n  score?: number;\n  streak?: number;\n  isReady?: boolean;\n}\n\nexport interface GameRoom {\n  id: string;\n  mode: '1v1' | '2v2';\n  status: 'waiting' | 'in_progress' | 'completed';\n  players: MultiplayerPlayer[];\n  currentQuestion?: any;\n  questionIndex: number;\n  totalQuestions: number;\n  timeRemaining: number;\n}\n\nexport interface Challenge {\n  from: MultiplayerPlayer;\n  mode: '1v1' | '2v2';\n}\n\ninterface MultiplayerState {\n  // Connection state\n  socket: Socket | null;\n  isConnected: boolean;\n  connectionError: string | null;\n  \n  // Player state\n  currentPlayer: MultiplayerPlayer | null;\n  onlinePlayers: MultiplayerPlayer[];\n  onlinePlayersCount: number;\n  \n  // Matchmaking state\n  isSearchingMatch: boolean;\n  matchmakingMode: '1v1' | '2v2' | null;\n  \n  // Game room state\n  currentRoom: GameRoom | null;\n  gameStarted: boolean;\n  \n  // Challenge state\n  pendingChallenge: Challenge | null;\n  \n  // Round results\n  roundResults: any | null;\n  gameResults: any | null;\n  \n  // Actions\n  connect: (playerData: { name: string; level: number; wins: number; country: string }) => void;\n  disconnect: () => void;\n  findMatch: (mode: '1v1' | '2v2', category: string, difficulty: string) => void;\n  cancelMatchmaking: () => void;\n  challengePlayer: (targetPlayerId: string, mode: '1v1' | '2v2') => void;\n  respondToChallenge: (accepted: boolean) => void;\n  setPlayerReady: () => void;\n  submitAnswer: (answer: number, timeSpent: number) => void;\n  \n  // State setters\n  setOnlinePlayers: (players: MultiplayerPlayer[]) => void;\n  setCurrentRoom: (room: GameRoom | null) => void;\n  setPendingChallenge: (challenge: Challenge | null) => void;\n  setRoundResults: (results: any) => void;\n  setGameResults: (results: any) => void;\n}\n\nexport const useMultiplayer = create<MultiplayerState>()(\n  subscribeWithSelector((set, get) => ({\n    // Initial state\n    socket: null,\n    isConnected: false,\n    connectionError: null,\n    \n    currentPlayer: null,\n    onlinePlayers: [],\n    onlinePlayersCount: 0,\n    \n    isSearchingMatch: false,\n    matchmakingMode: null,\n    \n    currentRoom: null,\n    gameStarted: false,\n    \n    pendingChallenge: null,\n    roundResults: null,\n    gameResults: null,\n    \n    // Actions\n    connect: (playerData) => {\n      const state = get();\n      \n      if (state.socket) {\n        state.socket.disconnect();\n      }\n      \n      const socket = io('/', {\n        transports: ['websocket', 'polling'],\n        autoConnect: true\n      });\n      \n      // Connection events\n      socket.on('connect', () => {\n        console.log('Connected to multiplayer server');\n        set({ isConnected: true, connectionError: null });\n        \n        // Join multiplayer system\n        socket.emit('join_multiplayer', playerData);\n      });\n      \n      socket.on('disconnect', () => {\n        console.log('Disconnected from multiplayer server');\n        set({ \n          isConnected: false, \n          currentRoom: null,\n          gameStarted: false,\n          isSearchingMatch: false,\n          matchmakingMode: null,\n          roundResults: null,\n          gameResults: null\n        });\n      });\n      \n      socket.on('connect_error', (error) => {\n        console.error('Connection error:', error);\n        set({ connectionError: error.message, isConnected: false });\n      });\n      \n      // Player events\n      socket.on('player_joined', (data) => {\n        const player: MultiplayerPlayer = {\n          id: data.playerId,\n          ...playerData\n        };\n        set({ currentPlayer: player });\n        console.log('Joined multiplayer as:', player);\n      });\n      \n      socket.on('online_players', (players: MultiplayerPlayer[]) => {\n        set({ onlinePlayers: players, onlinePlayersCount: players.length });\n      });\n      \n      socket.on('player_online', (data) => {\n        const currentPlayers = get().onlinePlayers;\n        set({ \n          onlinePlayers: [...currentPlayers, data.player],\n          onlinePlayersCount: currentPlayers.length + 1\n        });\n      });\n      \n      socket.on('player_offline', (data) => {\n        const currentPlayers = get().onlinePlayers;\n        const filteredPlayers = currentPlayers.filter(p => p.id !== data.playerId);\n        set({ \n          onlinePlayers: filteredPlayers,\n          onlinePlayersCount: filteredPlayers.length\n        });\n      });\n      \n      socket.on('online_players_count', (count: number) => {\n        set({ onlinePlayersCount: count });\n      });\n      \n      // Matchmaking events\n      socket.on('searching_for_match', (data) => {\n        set({ isSearchingMatch: true, matchmakingMode: data.mode });\n      });\n      \n      // Listen for matchFound event (consistent with server)\n      socket.on('matchFound', (data) => {\n        const room: GameRoom = {\n          id: data.roomId,\n          mode: data.gameMode || '1v1',\n          status: 'waiting',\n          players: data.opponents || [],\n          questionIndex: 0,\n          totalQuestions: 0,\n          timeRemaining: 30\n        };\n        \n        set({ \n          currentRoom: room,\n          isSearchingMatch: false,\n          matchmakingMode: null\n        });\n        \n        console.log('Match found! Room:', data.roomId);\n      });\n      \n      socket.on('match_timeout', () => {\n        set({ isSearchingMatch: false, matchmakingMode: null });\n        console.log('Match search timed out');\n      });\n      \n      socket.on('matchmaking_cancelled', () => {\n        set({ isSearchingMatch: false, matchmakingMode: null });\n      });\n      \n      // Challenge events\n      socket.on('challenge_received', (data) => {\n        set({ pendingChallenge: data });\n      });\n      \n      socket.on('challenge_declined', () => {\n        console.log('Challenge was declined');\n        // Could show a notification here\n      });\n      \n      // Game room events\n      socket.on('player_ready_update', (data) => {\n        const room = get().currentRoom;\n        if (room) {\n          // Update room state\n          console.log('Player ready update:', data);\n        }\n      });\n      \n      socket.on('gameStarted', (data) => {\n        const room: GameRoom = {\n          id: get().currentRoom?.id || '',\n          mode: get().currentRoom?.mode || '1v1',\n          status: 'in_progress',\n          players: data.players,\n          currentQuestion: data.currentQuestion,\n          questionIndex: data.questionIndex,\n          totalQuestions: data.totalQuestions,\n          timeRemaining: 30\n        };\n        \n        set({ \n          currentRoom: room,\n          gameStarted: true,\n          roundResults: null,\n          gameResults: null\n        });\n        \n        console.log('Game started!', data);\n      });\n      \n      socket.on('timer_update', (data) => {\n        const room = get().currentRoom;\n        if (room) {\n          set({ currentRoom: { ...room, timeRemaining: data.timeRemaining } });\n        }\n      });\n      \n      socket.on('answer_submitted', (data) => {\n        console.log('Answer submitted:', data);\n      });\n      \n      socket.on('round_results', (data) => {\n        set({ roundResults: data });\n        console.log('Round results:', data);\n      });\n      \n      socket.on('next_question', (data) => {\n        const room = get().currentRoom;\n        if (room) {\n          const updatedRoom: GameRoom = {\n            ...room,\n            currentQuestion: data.currentQuestion,\n            questionIndex: data.questionIndex,\n            timeRemaining: 30\n          };\n          set({ currentRoom: updatedRoom, roundResults: null });\n        }\n      });\n      \n      socket.on('game_ended', (data) => {\n        set({ \n          gameResults: data,\n          gameStarted: false,\n          roundResults: null\n        });\n        console.log('Game ended:', data);\n      });\n      \n      socket.on('player_disconnected', (data) => {\n        if (data.gameEnded) {\n          set({ \n            currentRoom: null,\n            gameStarted: false,\n            roundResults: null,\n            gameResults: null\n          });\n          console.log('Game ended due to player disconnect');\n        }\n      });\n      \n      socket.on('error', (error) => {\n        console.error('Socket error:', error);\n        set({ connectionError: error.message });\n      });\n      \n      set({ socket });\n    },\n    \n    disconnect: () => {\n      const socket = get().socket;\n      if (socket) {\n        socket.disconnect();\n        set({ \n          socket: null,\n          isConnected: false,\n          currentPlayer: null,\n          onlinePlayers: [],\n          currentRoom: null,\n          gameStarted: false,\n          isSearchingMatch: false,\n          matchmakingMode: null,\n          pendingChallenge: null,\n          roundResults: null,\n          gameResults: null\n        });\n      }\n    },\n    \n    findMatch: (mode, category, difficulty) => {\n      const socket = get().socket;\n      if (socket && get().isConnected) {\n        socket.emit('find_match', { mode, category, difficulty });\n      }\n    },\n    \n    cancelMatchmaking: () => {\n      const socket = get().socket;\n      if (socket) {\n        socket.emit('cancel_matchmaking');\n        set({ isSearchingMatch: false, matchmakingMode: null });\n      }\n    },\n    \n    challengePlayer: (targetPlayerId, mode) => {\n      const socket = get().socket;\n      if (socket) {\n        socket.emit('challenge_player', { targetPlayerId, mode });\n      }\n    },\n    \n    respondToChallenge: (accepted) => {\n      const socket = get().socket;\n      const challenge = get().pendingChallenge;\n      \n      if (socket && challenge) {\n        socket.emit('challenge_response', {\n          challengerId: challenge.from.id,\n          accepted,\n          mode: challenge.mode\n        });\n        \n        set({ pendingChallenge: null });\n      }\n    },\n    \n    setPlayerReady: () => {\n      const socket = get().socket;\n      const room = get().currentRoom;\n      \n      if (socket && room) {\n        socket.emit('player_ready', { roomId: room.id });\n      }\n    },\n    \n    submitAnswer: (answer, timeSpent) => {\n      const socket = get().socket;\n      const room = get().currentRoom;\n      \n      if (socket && room) {\n        socket.emit('submit_answer', {\n          roomId: room.id,\n          answer,\n          timeSpent\n        });\n      }\n    },\n    \n    // State setters\n    setOnlinePlayers: (players) => set({ onlinePlayers: players }),\n    setCurrentRoom: (room) => set({ currentRoom: room }),\n    setPendingChallenge: (challenge) => set({ pendingChallenge: challenge }),\n    setRoundResults: (results) => set({ roundResults: results }),\n    setGameResults: (results) => set({ gameResults: results })\n  }))\n);","size_bytes":10911},"client/src/lib/stores/useTriviaGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\nimport { generateQuestions } from \"../openai\";\nimport { getLocalStorage, setLocalStorage } from \"../localStorage\";\n\nexport interface TriviaQuestion {\n  question: string;\n  options: string[];\n  correctAnswer: number;\n  category: string;\n  difficulty: string;\n  explanation?: string;\n}\n\nexport type GameState = 'home' | 'quiz-zone' | 'question' | 'profile' | 'coin-store' | 'menu' | 'playing' | 'results' | 'multiplayer' | 'lobby' | 'multiplayer-lobby' | 'payment' | 'privacy' | 'terms' | 'leaderboard';\nexport type Category = 'general' | 'science' | 'history' | 'geography' | 'sports' | 'entertainment';\nexport type Difficulty = 'easy' | 'medium' | 'hard';\n\ninterface TriviaGameState {\n  // Game state\n  gameState: GameState;\n  currentQuestion: TriviaQuestion | null;\n  questions: TriviaQuestion[];\n  questionNumber: number;\n  totalQuestions: number;\n  \n  // User interaction\n  selectedAnswer: number | null;\n  showAnswer: boolean;\n  timeRemaining: number;\n  \n  // Scoring\n  score: number;\n  correctAnswers: number;\n  streak: number;\n  maxStreak: number;\n  totalTime: number;\n  \n  // Game settings\n  category: Category;\n  difficulty: Difficulty;\n  \n  // Persistent data\n  highScore: number;\n  isNewHighScore: boolean;\n  \n  // Loading states\n  isLoadingQuestions: boolean;\n  \n  // Actions\n  setGameState: (state: GameState) => void;\n  setCategory: (category: Category) => void;\n  setDifficulty: (difficulty: Difficulty) => void;\n  startGame: () => Promise<void>;\n  answerQuestion: (answerIndex: number) => void;\n  nextQuestion: () => void;\n  resetGame: () => void;\n  updateTimer: () => void;\n}\n\nexport const useTriviaGame = create<TriviaGameState>()(\n  subscribeWithSelector((set, get) => ({\n    // Initial state\n    gameState: 'home',\n    currentQuestion: null,\n    questions: [],\n    questionNumber: 1,\n    totalQuestions: 10,\n    \n    selectedAnswer: null,\n    showAnswer: false,\n    timeRemaining: 30,\n    \n    score: 0,\n    correctAnswers: 0,\n    streak: 0,\n    maxStreak: 0,\n    totalTime: 0,\n    \n    category: 'general',\n    difficulty: 'medium',\n    \n    highScore: getLocalStorage('mirage_high_score') || 0,\n    isNewHighScore: false,\n    \n    isLoadingQuestions: false,\n    \n    // Actions\n    setGameState: (gameState) => set({ gameState }),\n    \n    setCategory: (category) => set({ category }),\n    \n    setDifficulty: (difficulty) => set({ difficulty }),\n    \n    startGame: async () => {\n      const { category, difficulty, totalQuestions } = get();\n      \n      // Reset session ID for new game to get fresh questions\n      const { resetSessionId } = await import('../../lib/openai');\n      resetSessionId();\n      \n      set({ \n        gameState: 'playing',\n        isLoadingQuestions: true,\n        score: 0,\n        correctAnswers: 0,\n        streak: 0,\n        maxStreak: 0,\n        questionNumber: 1,\n        totalTime: 0,\n        isNewHighScore: false\n      });\n\n      try {\n        console.log('Generating questions for:', { category, difficulty, count: totalQuestions });\n        const questions = await generateQuestions(category, difficulty, totalQuestions);\n        console.log('Generated questions:', questions);\n        console.log('Setting current question:', questions[0]);\n        \n        set({ \n          questions,\n          currentQuestion: questions[0] || null,\n          isLoadingQuestions: false,\n          timeRemaining: 30,\n          selectedAnswer: null,\n          showAnswer: false\n        });\n        \n        // Start the timer\n        get().updateTimer();\n      } catch (error) {\n        console.error('Failed to generate questions:', error);\n        // Fallback to a sample question\n        const fallbackQuestion: TriviaQuestion = {\n          question: \"What is the capital of France?\",\n          options: [\"London\", \"Berlin\", \"Paris\", \"Madrid\"],\n          correctAnswer: 2,\n          category: \"Geography\",\n          difficulty: \"easy\",\n          explanation: \"Paris is the capital and most populous city of France.\"\n        };\n        \n        set({ \n          questions: [fallbackQuestion],\n          currentQuestion: fallbackQuestion,\n          isLoadingQuestions: false,\n          timeRemaining: 30,\n          selectedAnswer: null,\n          showAnswer: false\n        });\n      }\n    },\n    \n    answerQuestion: (answerIndex) => {\n      const state = get();\n      const { currentQuestion, streak, maxStreak } = state;\n      \n      if (!currentQuestion || state.showAnswer) return;\n      \n      const isCorrect = answerIndex === currentQuestion.correctAnswer;\n      const timeBonus = Math.max(0, state.timeRemaining - 10); // Bonus for quick answers\n      const basePoints = state.difficulty === 'easy' ? 10 : state.difficulty === 'medium' ? 20 : 30;\n      const streakMultiplier = Math.min(3, Math.floor(streak / 3) + 1); // Up to 3x multiplier\n      \n      const points = isCorrect ? (basePoints + timeBonus) * streakMultiplier : 0;\n      const newStreak = isCorrect ? streak + 1 : 0;\n      const newMaxStreak = Math.max(maxStreak, newStreak);\n      \n      set({\n        selectedAnswer: answerIndex,\n        showAnswer: true,\n        score: state.score + points,\n        correctAnswers: state.correctAnswers + (isCorrect ? 1 : 0),\n        streak: newStreak,\n        maxStreak: newMaxStreak,\n        totalTime: state.totalTime + (30 - state.timeRemaining)\n      });\n      \n      console.log('Answer submitted:', {\n        selected: answerIndex,\n        correct: currentQuestion.correctAnswer,\n        isCorrect,\n        points,\n        newStreak\n      });\n    },\n    \n    nextQuestion: () => {\n      const state = get();\n      const nextQuestionNumber = state.questionNumber + 1;\n      \n      if (nextQuestionNumber > state.totalQuestions) {\n        // Game finished\n        const newHighScore = Math.max(state.highScore, state.score);\n        const isNewHighScore = state.score > state.highScore;\n        \n        if (isNewHighScore) {\n          setLocalStorage('mirage_high_score', state.score);\n        }\n        \n        set({ \n          gameState: 'results',\n          highScore: newHighScore,\n          isNewHighScore\n        });\n      } else {\n        // Next question\n        const nextQuestion = state.questions[nextQuestionNumber - 1];\n        set({\n          questionNumber: nextQuestionNumber,\n          currentQuestion: nextQuestion,\n          selectedAnswer: null,\n          showAnswer: false,\n          timeRemaining: 30\n        });\n        \n        // Restart timer\n        get().updateTimer();\n      }\n    },\n    \n    resetGame: () => {\n      // Reset session ID for new game to get fresh questions\n      import('../../lib/openai').then(({ resetSessionId }) => resetSessionId());\n      \n      set({\n        gameState: 'menu',\n        currentQuestion: null,\n        questions: [],\n        questionNumber: 1,\n        selectedAnswer: null,\n        showAnswer: false,\n        timeRemaining: 30,\n        score: 0,\n        correctAnswers: 0,\n        streak: 0,\n        maxStreak: 0,\n        totalTime: 0,\n        isNewHighScore: false,\n        isLoadingQuestions: false\n      });\n    },\n    \n    updateTimer: () => {\n      const intervalId = setInterval(() => {\n        const state = get();\n        \n        if (state.gameState !== 'playing' || state.showAnswer) {\n          clearInterval(intervalId);\n          return;\n        }\n        \n        if (state.timeRemaining <= 0) {\n          clearInterval(intervalId);\n          // Auto-submit with no answer\n          get().answerQuestion(-1); // Invalid answer index\n          return;\n        }\n        \n        set({ timeRemaining: state.timeRemaining - 1 });\n      }, 1000);\n    }\n  }))\n);\n","size_bytes":7698},"server/routes/payments.ts":{"content":"import { Router } from \"express\";\nimport Stripe from \"stripe\";\nimport { db } from \"../db\";\nimport { users } from \"../../shared/schema\";\nimport { eq, sql } from \"drizzle-orm\";\nimport { scoringService } from \"../services/scoring\";\n\nconst router = Router();\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', {\n  apiVersion: '2024-06-20',\n});\n\n// Premium subscription plans\nconst PLANS = {\n  premium: {\n    price: 999, // $9.99 in cents\n    name: \"Premium Plan\",\n    features: [\"Unlimited questions\", \"No ads\", \"Premium themes\", \"Priority support\"]\n  }\n};\n\n// Coin packs\nconst COIN_PACKS = {\n  small: { coins: 100, price: 100, name: \"Small Pack\" }, // $1.00 for 100 coins\n  medium: { coins: 250, price: 199, name: \"Medium Pack\" }, // $1.99 for 250 coins\n  large: { coins: 500, price: 399, name: \"Large Pack\" }, // $3.99 for 500 coins\n  premium: { coins: 1000, price: 999, name: \"Premium Pack\" }, // $9.99 for 1000 coins\n};\n\n// Create payment intent for premium subscription\nrouter.post(\"/create-subscription-intent\", async (req, res) => {\n  try {\n    const { planType = 'premium', userId } = req.body;\n    \n    if (!PLANS[planType as keyof typeof PLANS]) {\n      return res.status(400).json({ error: \"Invalid plan type\" });\n    }\n\n    if (!userId) {\n      return res.status(400).json({ error: \"User ID is required\" });\n    }\n\n    const plan = PLANS[planType as keyof typeof PLANS];\n\n    const paymentIntent = await stripe.paymentIntents.create({\n      amount: plan.price,\n      currency: 'usd',\n      metadata: {\n        type: 'subscription',\n        plan: planType,\n        userId: userId.toString(),\n      },\n    });\n\n    res.json({\n      clientSecret: paymentIntent.client_secret,\n      amount: plan.price,\n      plan: plan\n    });\n  } catch (error) {\n    console.error('Error creating subscription payment intent:', error);\n    res.status(500).json({ error: 'Failed to create payment intent' });\n  }\n});\n\n// Create payment intent for coin packs\nrouter.post(\"/create-coins-intent\", async (req, res) => {\n  try {\n    const { packType, userId } = req.body;\n    \n    if (!COIN_PACKS[packType as keyof typeof COIN_PACKS]) {\n      return res.status(400).json({ error: \"Invalid pack type\" });\n    }\n\n    if (!userId) {\n      return res.status(400).json({ error: \"User ID is required\" });\n    }\n\n    const pack = COIN_PACKS[packType as keyof typeof COIN_PACKS];\n\n    const paymentIntent = await stripe.paymentIntents.create({\n      amount: pack.price,\n      currency: 'usd',\n      metadata: {\n        type: 'coins',\n        pack: packType,\n        coins: pack.coins.toString(),\n        userId: userId.toString(),\n      },\n    });\n\n    res.json({\n      clientSecret: paymentIntent.client_secret,\n      amount: pack.price,\n      pack: pack\n    });\n  } catch (error) {\n    console.error('Error creating coins payment intent:', error);\n    res.status(500).json({ error: 'Failed to create payment intent' });\n  }\n});\n\n// Webhook to handle successful payments\nrouter.post(\"/webhook\", async (req, res) => {\n  const sig = req.headers['stripe-signature'] as string;\n  let event;\n\n  try {\n    event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET || '');\n  } catch (err) {\n    console.error('Webhook signature verification failed:', err);\n    return res.status(400).send('Webhook signature verification failed');\n  }\n\n  try {\n    if (event.type === 'payment_intent.succeeded') {\n      const paymentIntent = event.data.object as Stripe.PaymentIntent;\n      const userId = parseInt(paymentIntent.metadata.userId || '0');\n      \n      if (!userId) {\n        console.error('No user ID in payment metadata:', paymentIntent.id);\n        return res.status(400).json({ error: 'Invalid user ID' });\n      }\n      \n      // Handle the successful payment\n      if (paymentIntent.metadata.type === 'subscription') {\n        // Update user's premium status\n        console.log('Premium subscription activated for user:', userId, 'payment:', paymentIntent.id);\n        \n        // Set premium status and give bonus coins\n        await db.update(users)\n          .set({ \n            premium: true,\n            coins: sql`${users.coins} + 1000`, // Bonus 1000 coins for premium\n            updatedAt: new Date()\n          })\n          .where(eq(users.id, userId));\n          \n        // Record the premium purchase as a reward\n        await scoringService.awardCoins(\n          userId, \n          1000, \n          'premium_bonus', \n          'Premium subscription bonus coins',\n          undefined\n        );\n        \n        console.log(`Premium subscription activated for user ${userId} with 1000 bonus coins`);\n        \n      } else if (paymentIntent.metadata.type === 'coins') {\n        // Add coins to user's account\n        const coins = parseInt(paymentIntent.metadata.coins || '0');\n        console.log(`Adding ${coins} coins for user:`, userId, 'payment:', paymentIntent.id);\n        \n        // Award coins through the scoring service\n        await scoringService.awardCoins(\n          userId,\n          coins,\n          'coin_purchase',\n          `Purchased ${paymentIntent.metadata.pack} pack`,\n          undefined\n        );\n        \n        console.log(`Successfully added ${coins} coins to user ${userId}`);\n      }\n    }\n  } catch (error) {\n    console.error('Error processing webhook:', error);\n    return res.status(500).json({ error: 'Webhook processing failed' });\n  }\n\n  res.json({ received: true });\n});\n\n// Get available plans and coin packs\nrouter.get(\"/plans\", (req, res) => {\n  res.json({\n    subscriptions: PLANS,\n    coinPacks: COIN_PACKS\n  });\n});\n\n// Remove ads for premium users\nrouter.post(\"/remove-ads\", async (req, res) => {\n  try {\n    const { userId } = req.body;\n    \n    if (!userId) {\n      return res.status(400).json({ error: \"User ID is required\" });\n    }\n\n    // Check if user is premium\n    const user = await db.select({ premium: users.premium })\n      .from(users)\n      .where(eq(users.id, userId))\n      .limit(1);\n      \n    if (!user.length) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n    \n    if (!user[0].premium) {\n      return res.status(403).json({ error: \"Premium subscription required\" });\n    }\n    \n    res.json({ \n      success: true, \n      message: \"Ads removed for premium user\",\n      adsRemoved: true \n    });\n  } catch (error) {\n    console.error('Error removing ads:', error);\n    res.status(500).json({ error: 'Failed to remove ads' });\n  }\n});\n\n// Check premium status and benefits\nrouter.get(\"/premium-status/:userId\", async (req, res) => {\n  try {\n    const userId = parseInt(req.params.userId);\n    \n    if (!userId) {\n      return res.status(400).json({ error: \"Invalid user ID\" });\n    }\n\n    const user = await db.select({ \n      premium: users.premium, \n      coins: users.coins, \n      rank: users.rank \n    })\n      .from(users)\n      .where(eq(users.id, userId))\n      .limit(1);\n      \n    if (!user.length) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n    \n    const premiumBenefits = {\n      unlimitedGames: user[0].premium,\n      noAds: user[0].premium,\n      bonusCoins: user[0].premium ? 100 : 0, // Daily bonus for premium users\n      prioritySupport: user[0].premium,\n      exclusiveThemes: user[0].premium\n    };\n    \n    res.json({ \n      success: true,\n      isPremium: user[0].premium,\n      benefits: premiumBenefits,\n      currentCoins: user[0].coins,\n      rank: user[0].rank\n    });\n  } catch (error) {\n    console.error('Error checking premium status:', error);\n    res.status(500).json({ error: 'Failed to check premium status' });\n  }\n});\n\nexport default router;","size_bytes":7631},"client/src/lib/stripe.ts":{"content":"import { loadStripe } from '@stripe/stripe-js';\n\n// Initialize Stripe with publishable key\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY || '');\n\nexport default stripePromise;\n\n// Payment utilities\nexport const createSubscriptionPayment = async (planType: string = 'premium') => {\n  try {\n    const response = await fetch('/api/payments/create-subscription-intent', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ planType }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating subscription payment:', error);\n    throw error;\n  }\n};\n\nexport const createCoinsPayment = async (packType: string) => {\n  try {\n    const response = await fetch('/api/payments/create-coins-intent', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ packType }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating coins payment:', error);\n    throw error;\n  }\n};\n\nexport const getPaymentPlans = async () => {\n  try {\n    const response = await fetch('/api/payments/plans');\n    \n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching payment plans:', error);\n    throw error;\n  }\n};","size_bytes":1618},"server/routes/auth.ts":{"content":"import { Router } from \"express\";\nimport bcrypt from \"bcrypt\";\nimport { eq, sql } from \"drizzle-orm\";\nimport { db } from \"../db\";\nimport { users, insertUserSchema } from \"../../shared/schema\";\nimport { scoringService } from \"../services/scoring\";\n\nconst router = Router();\n\n// Register a new user\nrouter.post(\"/register\", async (req, res) => {\n  try {\n    const { username, password, language = 'en' } = req.body;\n\n    // Validate input\n    const validation = insertUserSchema.safeParse({ username, password, language });\n    if (!validation.success) {\n      return res.status(400).json({ \n        error: \"Invalid input\", \n        details: validation.error.errors \n      });\n    }\n\n    // Check if user already exists\n    const existingUser = await db\n      .select()\n      .from(users)\n      .where(eq(users.username, username))\n      .limit(1);\n\n    if (existingUser.length > 0) {\n      return res.status(409).json({ error: \"Username already exists\" });\n    }\n\n    // Hash password\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n    // Create user\n    const newUser = await db\n      .insert(users)\n      .values({\n        username,\n        password: hashedPassword,\n        language,\n        coins: 1000, // Starting coins\n        rank: \"Bronze\", // Starting rank\n        premium: false\n      })\n      .returning({\n        id: users.id,\n        username: users.username,\n        coins: users.coins,\n        rank: users.rank,\n        language: users.language,\n        premium: users.premium,\n        createdAt: users.createdAt\n      });\n\n    // Set session\n    (req.session as any).userId = newUser[0].id;\n\n    res.status(201).json({ \n      user: newUser[0],\n      message: \"User created successfully\" \n    });\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\n// Login user\nrouter.post(\"/login\", async (req, res) => {\n  try {\n    const { username, password } = req.body;\n\n    if (!username || !password) {\n      return res.status(400).json({ error: \"Username and password are required\" });\n    }\n\n    // Find user\n    const user = await db\n      .select()\n      .from(users)\n      .where(eq(users.username, username))\n      .limit(1);\n\n    if (user.length === 0) {\n      return res.status(401).json({ error: \"Invalid credentials\" });\n    }\n\n    // Verify password\n    const isPasswordValid = await bcrypt.compare(password, user[0].password);\n    if (!isPasswordValid) {\n      return res.status(401).json({ error: \"Invalid credentials\" });\n    }\n\n    // Set session\n    (req.session as any).userId = user[0].id;\n\n    // Return user without password\n    const { password: _, ...userWithoutPassword } = user[0];\n    \n    res.json({ \n      user: userWithoutPassword,\n      message: \"Login successful\" \n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\n// Logout user\nrouter.post(\"/logout\", (req, res) => {\n  req.session.destroy((err) => {\n    if (err) {\n      return res.status(500).json({ error: \"Could not logout\" });\n    }\n    res.clearCookie('connect.sid');\n    res.json({ message: \"Logout successful\" });\n  });\n});\n\n// Get current user\nrouter.get(\"/me\", async (req, res) => {\n  try {\n    const userId = (req.session as any)?.userId;\n    \n    if (!userId) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    const user = await db\n      .select({\n        id: users.id,\n        username: users.username,\n        coins: users.coins,\n        rank: users.rank,\n        language: users.language,\n        premium: users.premium,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt\n      })\n      .from(users)\n      .where(eq(users.id, userId))\n      .limit(1);\n\n    if (user.length === 0) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n\n    res.json({ user: user[0] });\n  } catch (error) {\n    console.error('Get user error:', error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\n// Update user coins\nrouter.post(\"/add-coins\", async (req, res) => {\n  try {\n    const userId = (req.session as any)?.userId;\n    const { amount } = req.body;\n    \n    if (!userId) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    if (!amount || amount < 0) {\n      return res.status(400).json({ error: \"Invalid amount\" });\n    }\n\n    const updatedUser = await db\n      .update(users)\n      .set({ \n        coins: amount,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId))\n      .returning({\n        id: users.id,\n        username: users.username,\n        coins: users.coins,\n        rank: users.rank,\n        language: users.language,\n        premium: users.premium\n      });\n\n    if (updatedUser.length === 0) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n\n    res.json({ user: updatedUser[0] });\n  } catch (error) {\n    console.error('Add coins error:', error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\n// Update user premium status\nrouter.post(\"/upgrade-premium\", async (req, res) => {\n  try {\n    const userId = (req.session as any)?.userId;\n    \n    if (!userId) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    const updatedUser = await db\n      .update(users)\n      .set({ \n        premium: true,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId))\n      .returning({\n        id: users.id,\n        username: users.username,\n        coins: users.coins,\n        rank: users.rank,\n        language: users.language,\n        premium: users.premium\n      });\n\n    if (updatedUser.length === 0) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n\n    res.json({ user: updatedUser[0] });\n  } catch (error) {\n    console.error('Upgrade premium error:', error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\n// Generate unique referral code\nfunction generateReferralCode(username: string): string {\n  const random = Math.random().toString(36).substring(2, 8).toUpperCase();\n  return `${username.substring(0, 3).toUpperCase()}${random}`;\n}\n\n// Get user's referral code\nrouter.get(\"/referral-code\", async (req, res) => {\n  try {\n    const userId = (req.session as any)?.userId;\n    \n    if (!userId) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    const user = await db\n      .select({\n        id: users.id,\n        username: users.username,\n        referralCode: users.referralCode,\n        totalReferrals: users.totalReferrals\n      })\n      .from(users)\n      .where(eq(users.id, userId))\n      .limit(1);\n\n    if (user.length === 0) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n\n    let referralCode = user[0].referralCode;\n    \n    // Generate referral code if doesn't exist\n    if (!referralCode) {\n      referralCode = generateReferralCode(user[0].username);\n      \n      try {\n        await db\n          .update(users)\n          .set({ \n            referralCode: referralCode,\n            updatedAt: new Date()\n          })\n          .where(eq(users.id, userId));\n      } catch (error) {\n        // If unique constraint fails, generate another code\n        referralCode = generateReferralCode(user[0].username + Math.random().toString(36).substring(2, 4));\n        await db\n          .update(users)\n          .set({ \n            referralCode: referralCode,\n            updatedAt: new Date()\n          })\n          .where(eq(users.id, userId));\n      }\n    }\n\n    res.json({ \n      referralCode,\n      totalReferrals: user[0].totalReferrals,\n      shareUrl: `${process.env.FRONTEND_URL || 'http://localhost:3000'}?ref=${referralCode}`\n    });\n  } catch (error) {\n    console.error('Get referral code error:', error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\n// Use referral code\nrouter.post(\"/use-referral\", async (req, res) => {\n  try {\n    const userId = (req.session as any)?.userId;\n    const { referralCode } = req.body;\n    \n    if (!userId) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    if (!referralCode) {\n      return res.status(400).json({ error: \"Referral code is required\" });\n    }\n\n    // Check if user already used a referral code\n    const currentUser = await db\n      .select({ referredBy: users.referredBy })\n      .from(users)\n      .where(eq(users.id, userId))\n      .limit(1);\n\n    if (currentUser.length === 0) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n\n    if (currentUser[0].referredBy) {\n      return res.status(400).json({ error: \"You have already used a referral code\" });\n    }\n\n    // Find the referrer\n    const referrer = await db\n      .select({\n        id: users.id,\n        username: users.username,\n        referralCode: users.referralCode\n      })\n      .from(users)\n      .where(eq(users.referralCode, referralCode.toUpperCase()))\n      .limit(1);\n\n    if (referrer.length === 0) {\n      return res.status(404).json({ error: \"Invalid referral code\" });\n    }\n\n    if (referrer[0].id === userId) {\n      return res.status(400).json({ error: \"You cannot use your own referral code\" });\n    }\n\n    // Update referred user\n    await db\n      .update(users)\n      .set({ \n        referredBy: referrer[0].id,\n        coins: sql`${users.coins} + 50`, // Give 50 coins to new user\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId));\n\n    // Update referrer\n    await db\n      .update(users)\n      .set({ \n        totalReferrals: sql`${users.totalReferrals} + 1`,\n        coins: sql`${users.coins} + 50`, // Give 50 coins to referrer\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, referrer[0].id));\n\n    // Record referral bonus rewards\n    const rewardDescription = `Referral bonus from ${referrer[0].username}`;\n    \n    try {\n      // Award coins using scoring service for proper tracking\n      await scoringService.awardCoins(\n        userId,\n        50,\n        'referral_bonus',\n        'Used referral code - welcome bonus',\n        undefined\n      );\n\n      await scoringService.awardCoins(\n        referrer[0].id,\n        50,\n        'referral_bonus',\n        `Referral reward for inviting new user`,\n        undefined\n      );\n    } catch (error) {\n      console.error('Error recording referral rewards:', error);\n    }\n\n    res.json({ \n      message: \"Referral code used successfully! You and your referrer both received 50 coins.\",\n      coinsEarned: 50\n    });\n  } catch (error) {\n    console.error('Use referral code error:', error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\nexport default router;","size_bytes":10777},"client/src/components/GameLobby.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useAuth } from '../lib/stores/useAuth';\nimport { useLanguage } from '../lib/stores/useLanguage';\nimport { useTriviaGame } from '../lib/stores/useTriviaGame';\nimport { useSocket } from '../lib/hooks/useSocket';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Badge } from './ui/badge';\nimport { Input } from './ui/input';\nimport { \n  ArrowLeft, \n  Users, \n  Crown, \n  Clock, \n  Copy,\n  Share,\n  Loader2,\n  Swords,\n  UserPlus,\n  Trophy,\n  Zap\n} from 'lucide-react';\n\n// Game Lobby component with mode selection and waiting animations\nexport default function GameLobby() {\n  const { user, isAuthenticated } = useAuth();\n  const { translations, language } = useLanguage();\n  const { setGameState } = useTriviaGame();\n  const { socket, isConnected } = useSocket();\n  \n  // Lobby state\n  const [selectedMode, setSelectedMode] = useState(null);\n  const [lobbyState, setLobbyState] = useState('modeSelection'); // modeSelection, queue, privateRoom, inGame\n  const [queuePosition, setQueuePosition] = useState(0);\n  const [estimatedWait, setEstimatedWait] = useState(0);\n  const [roomCode, setRoomCode] = useState('');\n  const [privateRoomCode, setPrivateRoomCode] = useState('');\n  const [roomPlayers, setRoomPlayers] = useState([]);\n  const [gameLimit, setGameLimit] = useState(null);\n  const [matchFoundData, setMatchFoundData] = useState(null);\n\n  // Game modes configuration\n  const gameModes = [\n    {\n      id: '1vs1',\n      title: '1 vs 1 Battle',\n      description: 'Face off against one opponent in a direct knowledge duel',\n      icon: Swords,\n      color: 'from-red-500 to-red-600',\n      maxPlayers: 2,\n      rewards: '+15 coins for win, +5 for participation'\n    },\n    {\n      id: '2vs2',\n      title: '2 vs 2 Team Battle',\n      description: 'Team up with a partner to defeat another duo',\n      icon: Users,\n      color: 'from-blue-500 to-blue-600',\n      maxPlayers: 4,\n      rewards: '+20 coins for win, +8 for participation'\n    }\n  ];\n\n  // Socket event listeners\n  useEffect(() => {\n    if (!socket || !isConnected) return;\n\n    // Queue events\n    socket.on('queueJoined', (data) => {\n      setQueuePosition(data.position);\n      setEstimatedWait(data.estimatedWait);\n      setLobbyState('queue');\n    });\n\n    socket.on('queueLeft', () => {\n      setLobbyState('modeSelection');\n      setQueuePosition(0);\n      setEstimatedWait(0);\n    });\n\n    // Match found\n    socket.on('matchFound', (data) => {\n      setMatchFoundData(data);\n      setLobbyState('matchFound');\n    });\n\n    // Private room events\n    socket.on('privateRoomCreated', (data) => {\n      setPrivateRoomCode(data.roomCode);\n      setRoomPlayers([{\n        username: user?.username || 'You',\n        rank: user?.rank || 'Bronze',\n        premium: user?.premium || false,\n        isHost: true\n      }]);\n      setLobbyState('privateRoom');\n    });\n\n    socket.on('joinedPrivateRoom', (data) => {\n      setRoomPlayers(data.players);\n      setLobbyState('privateRoom');\n    });\n\n    socket.on('playerJoined', (data) => {\n      setRoomPlayers(prev => [...prev, data.player]);\n    });\n\n    socket.on('playerLeft', (data) => {\n      setRoomPlayers(prev => prev.filter(p => p.username !== data.username));\n    });\n\n    // Game events\n    socket.on('gameStarted', (data) => {\n      setGameState('playing');\n    });\n\n    // Error and limit events\n    socket.on('gameLimit', (data) => {\n      setGameLimit(data);\n    });\n\n    socket.on('joinRoomError', (data) => {\n      alert(data.message); // Replace with toast notification\n    });\n\n    return () => {\n      // Cleanup listeners\n      socket.off('queueJoined');\n      socket.off('queueLeft');\n      socket.off('matchFound');\n      socket.off('privateRoomCreated');\n      socket.off('joinedPrivateRoom');\n      socket.off('playerJoined');\n      socket.off('playerLeft');\n      socket.off('gameStarted');\n      socket.off('gameLimit');\n      socket.off('joinRoomError');\n    };\n  }, [socket, isConnected, user, setGameState]);\n\n  // Handle mode selection\n  const handleModeSelect = (mode) => {\n    if (!isAuthenticated) {\n      alert('Please login to play multiplayer games');\n      return;\n    }\n\n    if (!isConnected) {\n      alert('Not connected to server. Please try again.');\n      return;\n    }\n\n    setSelectedMode(mode);\n  };\n\n  // Join matchmaking queue\n  const joinQueue = () => {\n    if (!socket || !selectedMode) return;\n\n    socket.emit('joinQueue', {\n      gameMode: selectedMode.id,\n      playerData: {\n        username: user?.username,\n        rank: user?.rank,\n        coins: user?.coins,\n        premium: user?.premium\n      }\n    });\n  };\n\n  // Leave queue\n  const leaveQueue = () => {\n    if (!socket || !selectedMode) return;\n\n    socket.emit('leaveQueue', { gameMode: selectedMode.id });\n  };\n\n  // Create private room\n  const createPrivateRoom = () => {\n    if (!socket || !selectedMode) return;\n\n    socket.emit('createPrivateRoom', {\n      gameMode: selectedMode.id,\n      playerData: {\n        username: user?.username,\n        rank: user?.rank,\n        coins: user?.coins,\n        premium: user?.premium\n      }\n    });\n  };\n\n  // Join private room\n  const joinPrivateRoom = () => {\n    if (!socket || !roomCode.trim()) return;\n\n    socket.emit('joinPrivateRoom', {\n      roomCode: roomCode.trim().toUpperCase(),\n      playerData: {\n        username: user?.username,\n        rank: user?.rank,\n        coins: user?.coins,\n        premium: user?.premium\n      }\n    });\n  };\n\n  // Copy room code to clipboard\n  const copyRoomCode = () => {\n    navigator.clipboard.writeText(privateRoomCode);\n    // Show success toast\n  };\n\n  // Animation variants\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        delayChildren: 0.1,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { y: 20, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        type: \"spring\",\n        damping: 20,\n        stiffness: 300\n      }\n    }\n  };\n\n  const pulseVariants = {\n    pulse: {\n      scale: [1, 1.05, 1],\n      transition: {\n        duration: 2,\n        repeat: Infinity,\n        ease: \"easeInOut\"\n      }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-primary/5 p-4 overflow-y-auto\" style={{ height: '100vh' }}>\n      <motion.div\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className=\"max-w-md mx-auto space-y-4 pb-32\"\n      >\n        {/* Header */}\n        <motion.div variants={itemVariants} className=\"flex items-center gap-4 mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setGameState('home')}\n            className=\"text-primary hover:bg-primary/10\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-primary\">Multiplayer</h1>\n            <p className=\"text-sm text-muted-foreground\">\n              {isConnected ? `${123} players online` : 'Connecting...'}\n            </p>\n          </div>\n        </motion.div>\n\n        {/* Game Limit Warning */}\n        <AnimatePresence>\n          {gameLimit && (\n            <motion.div\n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n            >\n              <Card className=\"border-yellow-500/30 bg-yellow-500/10\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Clock className=\"h-5 w-5 text-yellow-500\" />\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-yellow-700 dark:text-yellow-300\">\n                        Daily Limit Reached\n                      </p>\n                      <p className=\"text-sm text-yellow-600 dark:text-yellow-400\">\n                        {gameLimit.message}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Mode Selection */}\n        {lobbyState === 'modeSelection' && (\n          <motion.div variants={itemVariants} className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Trophy className=\"h-5 w-5 text-primary\" />\n                  Choose Game Mode\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {gameModes.map((mode) => {\n                  const IconComponent = mode.icon;\n                  const isSelected = selectedMode?.id === mode.id;\n                  \n                  return (\n                    <motion.div\n                      key={mode.id}\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                      className={`border rounded-lg overflow-hidden cursor-pointer transition-all ${\n                        isSelected ? 'border-primary border-2 bg-primary/5' : 'border-border'\n                      }`}\n                      onClick={() => handleModeSelect(mode)}\n                    >\n                      <div className={`h-1 bg-gradient-to-r ${mode.color}`} />\n                      \n                      <div className=\"p-4\">\n                        <div className=\"flex items-center gap-3 mb-3\">\n                          <div className={`w-12 h-12 rounded-xl bg-gradient-to-br ${mode.color} flex items-center justify-center`}>\n                            <IconComponent className=\"h-6 w-6 text-white\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold\">{mode.title}</h3>\n                            <p className=\"text-sm text-muted-foreground\">{mode.description}</p>\n                          </div>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {mode.maxPlayers} players\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"text-xs text-green-600 dark:text-green-400\">\n                          💰 {mode.rewards}\n                        </div>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </CardContent>\n            </Card>\n\n            {/* Action buttons */}\n            {selectedMode && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"space-y-3\"\n              >\n                <Button\n                  onClick={joinQueue}\n                  className=\"w-full bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white border-0 h-12\"\n                  disabled={!isConnected}\n                >\n                  <Zap className=\"h-5 w-5 mr-2\" />\n                  Quick Match\n                </Button>\n                \n                <div className=\"grid grid-cols-2 gap-3\">\n                  <Button\n                    onClick={createPrivateRoom}\n                    variant=\"outline\"\n                    className=\"border-primary/30 hover:bg-primary/10\"\n                    disabled={!isConnected}\n                  >\n                    <UserPlus className=\"h-4 w-4 mr-2\" />\n                    Create Room\n                  </Button>\n                  \n                  <div className=\"space-y-2\">\n                    <Input\n                      placeholder=\"Room Code\"\n                      value={roomCode}\n                      onChange={(e) => setRoomCode(e.target.value.toUpperCase())}\n                      className=\"text-center text-lg font-mono\"\n                      maxLength={6}\n                    />\n                    <Button\n                      onClick={joinPrivateRoom}\n                      variant=\"outline\"\n                      className=\"w-full border-primary/30 hover:bg-primary/10\"\n                      disabled={!isConnected || !roomCode.trim()}\n                    >\n                      Join Room\n                    </Button>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </motion.div>\n        )}\n\n        {/* Queue State */}\n        {lobbyState === 'queue' && (\n          <motion.div\n            variants={itemVariants}\n            className=\"space-y-4\"\n          >\n            <Card className=\"bg-gradient-to-r from-primary/10 to-accent/10 border-primary/20\">\n              <CardContent className=\"p-6 text-center\">\n                <motion.div\n                  variants={pulseVariants}\n                  animate=\"pulse\"\n                  className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-primary/20 flex items-center justify-center\"\n                >\n                  <Loader2 className=\"h-8 w-8 text-primary animate-spin\" />\n                </motion.div>\n                \n                <h3 className=\"text-lg font-semibold mb-2\">Finding Opponents...</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  {selectedMode?.title} • {queuePosition} in queue\n                </p>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Estimated wait:</span>\n                    <span className=\"font-medium\">{estimatedWait}s</span>\n                  </div>\n                  \n                  <div className=\"w-full bg-muted/30 rounded-full h-2\">\n                    <motion.div\n                      className=\"bg-gradient-to-r from-primary to-accent h-2 rounded-full\"\n                      initial={{ width: 0 }}\n                      animate={{ width: `${Math.min(100, ((30 - estimatedWait) / 30) * 100)}%` }}\n                      transition={{ duration: 1 }}\n                    />\n                  </div>\n                </div>\n                \n                <Button\n                  onClick={leaveQueue}\n                  variant=\"outline\"\n                  className=\"mt-4 border-red-500/30 text-red-500 hover:bg-red-500/10\"\n                >\n                  Cancel\n                </Button>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n\n        {/* Private Room State */}\n        {lobbyState === 'privateRoom' && (\n          <motion.div variants={itemVariants} className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Private Room</span>\n                  <Badge variant=\"outline\">{selectedMode?.title}</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Room code */}\n                <div className=\"text-center p-4 bg-muted/30 rounded-lg\">\n                  <p className=\"text-sm text-muted-foreground mb-2\">Room Code</p>\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <span className=\"text-2xl font-mono font-bold tracking-wider\">\n                      {privateRoomCode}\n                    </span>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={copyRoomCode}\n                      className=\"text-primary hover:bg-primary/10\"\n                    >\n                      <Copy className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Players list */}\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm font-medium\">\n                    Players ({roomPlayers.length}/{selectedMode?.maxPlayers})\n                  </p>\n                  \n                  {roomPlayers.map((player, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-3 bg-muted/20 rounded-lg\"\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center\">\n                          <span className=\"text-sm font-medium\">\n                            {player.username[0].toUpperCase()}\n                          </span>\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-sm\">{player.username}</p>\n                          <p className=\"text-xs text-muted-foreground\">{player.rank}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        {player.premium && <Crown className=\"h-4 w-4 text-yellow-500\" />}\n                        {player.isHost && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">Host</Badge>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n\n                  {/* Empty slots */}\n                  {Array.from({ length: selectedMode?.maxPlayers - roomPlayers.length }).map((_, index) => (\n                    <div\n                      key={`empty-${index}`}\n                      className=\"flex items-center justify-center p-3 border-2 border-dashed border-muted rounded-lg\"\n                    >\n                      <span className=\"text-sm text-muted-foreground\">Waiting for player...</span>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Share button */}\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full border-primary/30 hover:bg-primary/10\"\n                  onClick={() => {\n                    // Share room code\n                    navigator.share?.({\n                      title: 'Join my trivia game!',\n                      text: `Use code ${privateRoomCode} to join my ${selectedMode?.title} game`,\n                    });\n                  }}\n                >\n                  <Share className=\"h-4 w-4 mr-2\" />\n                  Invite Friends\n                </Button>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n\n        {/* Match Found State */}\n        {lobbyState === 'matchFound' && matchFoundData && (\n          <motion.div\n            variants={itemVariants}\n            className=\"space-y-4\"\n          >\n            <Card className=\"bg-gradient-to-r from-green-500/10 to-green-600/10 border-green-500/20\">\n              <CardContent className=\"p-6 text-center\">\n                <motion.div\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  transition={{ type: \"spring\", damping: 15, stiffness: 300 }}\n                  className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-green-500/20 flex items-center justify-center\"\n                >\n                  <Trophy className=\"h-8 w-8 text-green-500\" />\n                </motion.div>\n                \n                <h3 className=\"text-lg font-semibold mb-2 text-green-700 dark:text-green-300\">\n                  Match Found!\n                </h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Starting {selectedMode?.title} in 3 seconds...\n                </p>\n                \n                {/* Opponent list */}\n                <div className=\"space-y-2\">\n                  {matchFoundData.opponents.map((opponent, index) => (\n                    <div key={index} className=\"flex items-center justify-center gap-2 text-sm\">\n                      <span className=\"font-medium\">{opponent.username}</span>\n                      <Badge variant=\"outline\" className=\"text-xs\">{opponent.rank}</Badge>\n                      {opponent.premium && <Crown className=\"h-3 w-3 text-yellow-500\" />}\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n\n        {/* Connection status */}\n        {!isConnected && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className=\"text-center text-red-500 text-sm\"\n          >\n            Connecting to server...\n          </motion.div>\n        )}\n      </motion.div>\n    </div>\n  );\n}","size_bytes":20812},"client/src/components/auth/AuthModal.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogOverlay } from '../ui/dialog';\nimport LoginForm from './LoginForm';\nimport RegisterForm from './RegisterForm';\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  initialMode?: 'login' | 'register';\n}\n\nexport default function AuthModal({ isOpen, onClose, initialMode = 'login' }: AuthModalProps) {\n  const [mode, setMode] = useState<'login' | 'register'>(initialMode);\n  \n  // Update mode when initialMode changes\n  useEffect(() => {\n    setMode(initialMode);\n  }, [initialMode]);\n\n  const handleSwitchMode = () => {\n    setMode(mode === 'login' ? 'register' : 'login');\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogOverlay className=\"bg-black/80 backdrop-blur-sm\" />\n      <DialogContent className=\"max-w-md p-0 bg-transparent border-none shadow-none\">\n        {mode === 'login' ? (\n          <LoginForm onSwitchToRegister={handleSwitchMode} onClose={onClose} />\n        ) : (\n          <RegisterForm onSwitchToLogin={handleSwitchMode} onClose={onClose} />\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":1157},"client/src/components/auth/LoginForm.tsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../../lib/stores/useAuth';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { Button } from '../ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Input } from '../ui/input';\nimport { Label } from '../ui/label';\nimport { AlertCircle, Loader2 } from 'lucide-react';\n\ninterface LoginFormProps {\n  onSwitchToRegister: () => void;\n  onClose: () => void;\n}\n\nexport default function LoginForm({ onSwitchToRegister, onClose }: LoginFormProps) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const { login, isLoading, error, clearError } = useAuth();\n  const { translations } = useLanguage();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    clearError();\n    \n    try {\n      await login(username, password);\n      onClose();\n    } catch (error) {\n      // Error is handled by the store\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto bg-card/95 backdrop-blur-md border-border\">\n      <CardHeader>\n        <CardTitle className=\"text-center text-primary\">Login</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {error && (\n            <div className=\"flex items-center gap-2 p-3 text-sm text-destructive-foreground bg-destructive/10 border border-destructive/20 rounded-md\">\n              <AlertCircle className=\"h-4 w-4\" />\n              {error}\n            </div>\n          )}\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"username\">Username</Label>\n            <Input\n              id=\"username\"\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              required\n              disabled={isLoading}\n              className=\"bg-input/50\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n              disabled={isLoading}\n              className=\"bg-input/50\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Button \n              type=\"submit\" \n              className=\"w-full\"\n              disabled={isLoading || !username || !password}\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Logging in...\n                </>\n              ) : (\n                'Login'\n              )}\n            </Button>\n            \n            <Button \n              type=\"button\" \n              variant=\"ghost\" \n              className=\"w-full\"\n              onClick={onSwitchToRegister}\n              disabled={isLoading}\n            >\n              Don't have an account? Register\n            </Button>\n            \n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              className=\"w-full\"\n              onClick={onClose}\n              disabled={isLoading}\n            >\n              Cancel\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3442},"client/src/components/auth/RegisterForm.tsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../../lib/stores/useAuth';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { Button } from '../ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Input } from '../ui/input';\nimport { Label } from '../ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\nimport { AlertCircle, Loader2 } from 'lucide-react';\n\ninterface RegisterFormProps {\n  onSwitchToLogin: () => void;\n  onClose: () => void;\n}\n\nexport default function RegisterForm({ onSwitchToLogin, onClose }: RegisterFormProps) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('en');\n  const { register, isLoading, error, clearError } = useAuth();\n  const { translations } = useLanguage();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    clearError();\n    \n    if (password !== confirmPassword) {\n      return;\n    }\n    \n    try {\n      await register(username, password, selectedLanguage);\n      onClose();\n    } catch (error) {\n      // Error is handled by the store\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto bg-card/95 backdrop-blur-md border-border\">\n      <CardHeader>\n        <CardTitle className=\"text-center text-primary\">Create Account</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {error && (\n            <div className=\"flex items-center gap-2 p-3 text-sm text-destructive-foreground bg-destructive/10 border border-destructive/20 rounded-md\">\n              <AlertCircle className=\"h-4 w-4\" />\n              {error}\n            </div>\n          )}\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"username\">Username</Label>\n            <Input\n              id=\"username\"\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              required\n              disabled={isLoading}\n              className=\"bg-input/50\"\n              minLength={3}\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"language\">Preferred Language</Label>\n            <Select value={selectedLanguage} onValueChange={setSelectedLanguage} disabled={isLoading}>\n              <SelectTrigger className=\"bg-input/50\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"en\">English</SelectItem>\n                <SelectItem value=\"ar\">العربية (Arabic)</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n              disabled={isLoading}\n              className=\"bg-input/50\"\n              minLength={6}\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n            <Input\n              id=\"confirmPassword\"\n              type=\"password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              required\n              disabled={isLoading}\n              className=\"bg-input/50\"\n              minLength={6}\n            />\n            {password !== confirmPassword && confirmPassword && (\n              <p className=\"text-sm text-destructive\">Passwords do not match</p>\n            )}\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Button \n              type=\"submit\" \n              className=\"w-full\"\n              disabled={isLoading || !username || !password || password !== confirmPassword}\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Creating Account...\n                </>\n              ) : (\n                'Create Account'\n              )}\n            </Button>\n            \n            <Button \n              type=\"button\" \n              variant=\"ghost\" \n              className=\"w-full\"\n              onClick={onSwitchToLogin}\n              disabled={isLoading}\n            >\n              Already have an account? Login\n            </Button>\n            \n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              className=\"w-full\"\n              onClick={onClose}\n              disabled={isLoading}\n            >\n              Cancel\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5060},"client/src/components/multiplayer/MultiplayerGameUI.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useMultiplayerGame } from '../../lib/hooks/useSocket';\nimport { useAuth } from '../../lib/stores/useAuth';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { Button } from '../ui/button';\nimport { Card, CardContent } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { Progress } from '../ui/progress';\nimport { \n  Clock, \n  Users, \n  Trophy, \n  Zap,\n  Crown,\n  Target,\n  CheckCircle,\n  XCircle\n} from 'lucide-react';\n\n// Multiplayer Game UI component with real-time opponent tracking\nexport default function MultiplayerGameUI() {\n  const { user } = useAuth();\n  const { translations, language } = useLanguage();\n  const { setGameState } = useTriviaGame();\n  const {\n    gameState,\n    room,\n    opponents,\n    currentQuestion,\n    scores,\n    gameMode,\n    submitAnswer,\n    leaveGame\n  } = useMultiplayerGame();\n\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [hasAnswered, setHasAnswered] = useState(false);\n  const [questionNumber, setQuestionNumber] = useState(1);\n  const [showResults, setShowResults] = useState(false);\n  const [roundResults, setRoundResults] = useState(null);\n\n  // Handle question timer\n  useEffect(() => {\n    if (gameState === 'playing' && currentQuestion && !hasAnswered) {\n      setTimeRemaining(30);\n      const timer = setInterval(() => {\n        setTimeRemaining(prev => {\n          if (prev <= 1) {\n            clearInterval(timer);\n            // Auto-submit if time runs out\n            if (!hasAnswered) {\n              handleAnswerSubmit(-1); // -1 indicates no answer\n            }\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n\n      return () => clearInterval(timer);\n    }\n  }, [currentQuestion, hasAnswered, gameState]);\n\n  // Handle answer submission\n  const handleAnswerSubmit = (answerIndex) => {\n    if (hasAnswered) return;\n    \n    setSelectedAnswer(answerIndex);\n    setHasAnswered(true);\n    \n    // Submit to server\n    submitAnswer(answerIndex);\n  };\n\n  // Reset for next question\n  useEffect(() => {\n    if (currentQuestion) {\n      setSelectedAnswer(null);\n      setHasAnswered(false);\n      setShowResults(false);\n      setQuestionNumber(prev => prev + 1);\n    }\n  }, [currentQuestion]);\n\n  // Handle game end\n  const handleLeaveGame = () => {\n    leaveGame();\n    setGameState('home');\n  };\n\n  if (gameState !== 'playing' || !currentQuestion) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-primary/5 p-4 flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <h2 className=\"text-xl font-bold mb-4\">Waiting for game...</h2>\n            <Button onClick={handleLeaveGame} variant=\"outline\">\n              Leave Game\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const timeProgress = (timeRemaining / 30) * 100;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-primary/5 p-4\">\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"max-w-4xl mx-auto space-y-4\"\n      >\n        {/* Header with scores and timer */}\n        <motion.div\n          initial={{ y: -20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\"\n        >\n          {/* Game Info */}\n          <Card className=\"bg-gradient-to-r from-primary/10 to-accent/10 border-primary/20\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"flex items-center justify-center gap-2 mb-2\">\n                <Trophy className=\"h-5 w-5 text-primary\" />\n                <Badge variant=\"outline\">{gameMode}</Badge>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">Question {questionNumber}</p>\n            </CardContent>\n          </Card>\n\n          {/* Timer */}\n          <Card className={timeRemaining <= 10 ? 'border-red-500/50' : 'border-primary/20'}>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"flex items-center justify-center gap-2 mb-2\">\n                <Clock className={`h-5 w-5 ${timeRemaining <= 10 ? 'text-red-500' : 'text-primary'}`} />\n                <span className={`text-xl font-bold ${timeRemaining <= 10 ? 'text-red-500' : 'text-primary'}`}>\n                  {timeRemaining}s\n                </span>\n              </div>\n              <Progress \n                value={timeProgress} \n                className={`h-2 ${timeRemaining <= 10 ? 'bg-red-500' : ''}`}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Scores */}\n          <Card>\n            <CardContent className=\"p-4\">\n              {gameMode === '1vs1' ? (\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">{user?.username || 'You'}</span>\n                    <span className=\"font-bold text-primary\">\n                      {Object.entries(scores).find(([id]) => id.includes('user'))?.[1] || 0}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">\n                      {opponents[0]?.username || 'Opponent'}\n                    </span>\n                    <span className=\"font-bold text-accent\">\n                      {Object.entries(scores).find(([id]) => !id.includes('user'))?.[1] || 0}\n                    </span>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Team 1</span>\n                    <span className=\"font-bold text-primary\">{scores.team1 || 0}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Team 2</span>\n                    <span className=\"font-bold text-accent\">{scores.team2 || 0}</span>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Question */}\n        <motion.div\n          key={currentQuestion.question}\n          initial={{ scale: 0.9, opacity: 0 }}\n          animate={{ scale: 1, opacity: 1 }}\n          transition={{ type: \"spring\", damping: 20, stiffness: 300 }}\n        >\n          <Card className=\"bg-card/80 backdrop-blur-sm\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center mb-6\">\n                <Badge variant=\"secondary\" className=\"mb-4\">\n                  {currentQuestion.category} • {currentQuestion.difficulty}\n                </Badge>\n                <h2 className=\"text-xl md:text-2xl font-bold\">\n                  {currentQuestion.question}\n                </h2>\n              </div>\n\n              {/* Answer Options */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {currentQuestion.options.map((option, index) => {\n                  const isSelected = selectedAnswer === index;\n                  const isDisabled = hasAnswered;\n                  \n                  return (\n                    <motion.div\n                      key={index}\n                      whileHover={!isDisabled ? { scale: 1.02 } : {}}\n                      whileTap={!isDisabled ? { scale: 0.98 } : {}}\n                    >\n                      <Button\n                        onClick={() => handleAnswerSubmit(index)}\n                        disabled={isDisabled}\n                        variant={isSelected ? \"default\" : \"outline\"}\n                        className={`w-full h-auto p-4 text-left justify-start ${\n                          isSelected \n                            ? 'bg-primary text-primary-foreground' \n                            : 'hover:bg-primary/10'\n                        } ${isDisabled ? 'opacity-60' : ''}`}\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center ${\n                            isSelected \n                              ? 'border-primary-foreground bg-primary-foreground text-primary' \n                              : 'border-muted-foreground'\n                          }`}>\n                            {String.fromCharCode(65 + index)}\n                          </div>\n                          <span className=\"flex-1\">{option}</span>\n                          {isSelected && hasAnswered && (\n                            <CheckCircle className=\"h-5 w-5\" />\n                          )}\n                        </div>\n                      </Button>\n                    </motion.div>\n                  );\n                })}\n              </div>\n\n              {/* Answer Status */}\n              {hasAnswered && (\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  className=\"mt-6 text-center\"\n                >\n                  <div className=\"flex items-center justify-center gap-2 text-green-600 dark:text-green-400\">\n                    <CheckCircle className=\"h-5 w-5\" />\n                    <span className=\"font-medium\">Answer submitted!</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Waiting for other players...\n                  </p>\n                </motion.div>\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Players Status */}\n        <motion.div\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          className=\"grid grid-cols-2 md:grid-cols-4 gap-4\"\n        >\n          {/* Current Player */}\n          <Card className=\"border-primary/30\">\n            <CardContent className=\"p-3 text-center\">\n              <div className=\"flex items-center justify-center gap-2 mb-2\">\n                <div className=\"w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center\">\n                  <span className=\"text-sm font-medium\">\n                    {(user?.username || 'You')[0].toUpperCase()}\n                  </span>\n                </div>\n                {user?.premium && <Crown className=\"h-4 w-4 text-yellow-500\" />}\n              </div>\n              <p className=\"text-sm font-medium\">{user?.username || 'You'}</p>\n              <div className=\"flex items-center justify-center mt-1\">\n                {hasAnswered ? (\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                ) : (\n                  <Clock className=\"h-4 w-4 text-orange-500\" />\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Opponents */}\n          {opponents.map((opponent, index) => (\n            <Card key={index}>\n              <CardContent className=\"p-3 text-center\">\n                <div className=\"flex items-center justify-center gap-2 mb-2\">\n                  <div className=\"w-8 h-8 rounded-full bg-accent/20 flex items-center justify-center\">\n                    <span className=\"text-sm font-medium\">\n                      {opponent.username[0].toUpperCase()}\n                    </span>\n                  </div>\n                  {opponent.premium && <Crown className=\"h-4 w-4 text-yellow-500\" />}\n                </div>\n                <p className=\"text-sm font-medium\">{opponent.username}</p>\n                <div className=\"flex items-center justify-center mt-1\">\n                  <Clock className=\"h-4 w-4 text-orange-500\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n\n          {/* Empty slots for team mode */}\n          {gameMode === '2vs2' && Array.from({ \n            length: Math.max(0, 4 - opponents.length - 1) \n          }).map((_, index) => (\n            <Card key={`empty-${index}`} className=\"opacity-50\">\n              <CardContent className=\"p-3 text-center\">\n                <div className=\"w-8 h-8 rounded-full bg-muted/30 flex items-center justify-center mb-2 mx-auto\">\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Waiting...</p>\n              </CardContent>\n            </Card>\n          ))}\n        </motion.div>\n\n        {/* Leave Game Button */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          className=\"text-center pt-4\"\n        >\n          <Button\n            onClick={handleLeaveGame}\n            variant=\"outline\"\n            className=\"border-red-500/30 text-red-500 hover:bg-red-500/10\"\n          >\n            Leave Game\n          </Button>\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":13304},"client/src/components/pages/CoinStore.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { useAuth } from '../../lib/stores/useAuth';\nimport { Button } from '../ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { ArrowLeft, Coins, Crown, Star, Zap, Gift, CreditCard, Shield, Loader2, Check, X, LogIn, UserPlus } from 'lucide-react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport AuthModal from '../auth/AuthModal';\n\n// Initialize Stripe with environment variable - using import.meta.env for Vite\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY || 'pk_test_51abc123def456ghi789jkl012mno345pqr678stu901vwx234yz567');\n\n// Types for Stripe payment data\ninterface CoinPack {\n  coins: number;\n  price: number;\n  name: string;\n}\n\ninterface PremiumPlan {\n  price: number;\n  name: string;\n  features: string[];\n}\n\ninterface PaymentData {\n  subscriptions: Record<string, PremiumPlan>;\n  coinPacks: Record<string, CoinPack>;\n}\n\n// Payment Form Component\nfunction PaymentForm({ \n  amount, \n  onSuccess, \n  onError, \n  isSubscription = false, \n  userId, \n  packType \n}: {\n  amount: number;\n  onSuccess: () => void;\n  onError: (error: string) => void;\n  isSubscription?: boolean;\n  userId: number;\n  packType: string;\n}) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const { language } = useLanguage();\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      // Create payment intent\n      const endpoint = isSubscription ? '/api/payments/create-subscription-intent' : '/api/payments/create-coins-intent';\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId,\n          [isSubscription ? 'planType' : 'packType']: packType\n        }),\n      });\n\n      const { clientSecret } = await response.json();\n\n      // Confirm payment\n      const { error } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement(CardElement)!,\n        }\n      });\n\n      if (error) {\n        onError(error.message || 'Payment failed');\n      } else {\n        onSuccess();\n      }\n    } catch (error) {\n      onError('Payment processing failed');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"p-4 border border-border rounded-lg bg-card\">\n        <CardElement\n          options={{\n            style: {\n              base: {\n                fontSize: '16px',\n                color: '#424770',\n                '::placeholder': {\n                  color: '#aab7c4',\n                },\n              },\n            },\n          }}\n        />\n      </div>\n      \n      <Button \n        type=\"submit\" \n        disabled={!stripe || isProcessing}\n        className=\"w-full bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white border-0\"\n      >\n        {isProcessing ? (\n          <>\n            <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n            {language === 'ar' ? 'جاري المعالجة...' : 'Processing...'}\n          </>\n        ) : (\n          <>\n            <CreditCard className=\"h-4 w-4 mr-2\" />\n            {language === 'ar' ? `ادفع $${(amount / 100).toFixed(2)}` : `Pay $${(amount / 100).toFixed(2)}`}\n          </>\n        )}\n      </Button>\n    </form>\n  );\n}\n\n// Main Coin Store component\nexport default function CoinStore() {\n  const { translations, language } = useLanguage();\n  const { setGameState } = useTriviaGame();\n  const { user, getCurrentUser } = useAuth();\n  \n  const [paymentData, setPaymentData] = useState<PaymentData | null>(null);\n  const [selectedPack, setSelectedPack] = useState<string | null>(null);\n  const [showPayment, setShowPayment] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [paymentSuccess, setPaymentSuccess] = useState(false);\n  const [paymentError, setPaymentError] = useState<string | null>(null);\n  const [premiumStatus, setPremiumStatus] = useState({\n    isPremium: false,\n    benefits: {},\n    currentCoins: 0\n  });\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const [authMode, setAuthMode] = useState<'login' | 'register'>('login');\n\n  // Fetch payment data and premium status\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        \n        // Fetch payment plans\n        const plansResponse = await fetch('/api/payments/plans');\n        const plans = await plansResponse.json();\n        setPaymentData(plans);\n        \n        // Fetch premium status if user is logged in\n        if (user?.id) {\n          const statusResponse = await fetch(`/api/payments/premium-status/${user.id}`);\n          const status = await statusResponse.json();\n          if (status.success) {\n            setPremiumStatus(status);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching payment data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [user]);\n\n  // Handle payment success\n  const handlePaymentSuccess = async () => {\n    setPaymentSuccess(true);\n    setShowPayment(false);\n    setSelectedPack(null);\n    \n    // For coin purchases, manually update coins since webhooks might not work in dev\n    if (selectedPack && paymentData?.coinPacks?.[selectedPack]) {\n      const pack = paymentData.coinPacks[selectedPack];\n      try {\n        // Manually add coins to user account using the total amount\n        const newAmount = (user?.coins || 0) + pack.coins;\n        console.log(`Adding ${pack.coins} coins to user account. Current: ${user?.coins}, New total: ${newAmount}`);\n        \n        const response = await fetch('/api/auth/add-coins', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          credentials: 'include',\n          body: JSON.stringify({ \n            amount: newAmount\n          })\n        });\n        \n        if (!response.ok) {\n          throw new Error('Failed to update coins');\n        }\n        \n        console.log('Coins updated successfully');\n      } catch (error) {\n        console.error('Error updating coins:', error);\n      }\n    }\n    \n    // Wait a moment then refresh user data to show updated coins\n    setTimeout(async () => {\n      await getCurrentUser();\n    }, 500);\n    \n    setTimeout(async () => {\n      setPaymentSuccess(false);\n      // Refresh premium status and user data again\n      if (user?.id) {\n        try {\n          const [status] = await Promise.all([\n            fetch(`/api/payments/premium-status/${user.id}`).then(res => res.json()),\n            getCurrentUser()\n          ]);\n          if (status.success) {\n            setPremiumStatus(status);\n          }\n        } catch (error) {\n          console.error('Error refreshing user data:', error);\n        }\n      }\n    }, 2000);\n  };\n\n  // Handle payment error\n  const handlePaymentError = (error: string) => {\n    setPaymentError(error);\n    setTimeout(() => {\n      setPaymentError(null);\n    }, 5000);\n  };\n\n  // Start payment process\n  const startPayment = (packType: string, isSubscription = false) => {\n    if (!user) {\n      setAuthMode('login');\n      setShowAuthModal(true);\n      return;\n    }\n    setSelectedPack(packType);\n    setShowPayment(true);\n  };\n\n  // Handle auth modal actions\n  const handleAuthAction = (mode: 'login' | 'register') => {\n    setAuthMode(mode);\n    setShowAuthModal(true);\n  };\n\n  // Animation variants\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        delayChildren: 0.1,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { y: 20, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        type: \"spring\",\n        damping: 20,\n        stiffness: 300\n      }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-primary/5 p-4 overflow-y-auto\" style={{ height: '100vh' }}>\n      <motion.div\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className=\"max-w-4xl mx-auto space-y-6 pb-40\"\n      >\n        {/* Header */}\n        <motion.div variants={itemVariants} className=\"flex items-center gap-4 mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setGameState('home')}\n            className=\"text-primary hover:bg-primary/10\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold text-primary flex items-center gap-2\">\n              <Coins className=\"h-8 w-8\" />\n              {language === 'ar' ? 'متجر العملات' : 'Coin Store'}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {language === 'ar' ? 'عزز تجربة اللعب لديك' : 'Boost your gaming experience'}\n            </p>\n          </div>\n        </motion.div>\n\n        {/* Current Balance */}\n        <motion.div variants={itemVariants}>\n          <Card className=\"bg-gradient-to-r from-primary/10 to-accent/10 border-primary/20\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-center gap-4\">\n                <div className=\"p-3 bg-yellow-500/20 rounded-full\">\n                  <Coins className=\"h-8 w-8 text-yellow-500\" />\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-3xl font-bold text-yellow-500\">\n                    {(user?.coins || 0).toLocaleString()}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {language === 'ar' ? 'الرصيد الحالي' : 'Current Balance'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Payment Success/Error Messages */}\n        {paymentSuccess && (\n          <motion.div\n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"bg-green-500/10 border border-green-500/20 rounded-lg p-4 mb-6\"\n          >\n            <div className=\"flex items-center gap-2 text-green-600\">\n              <Check className=\"h-5 w-5\" />\n              <span className=\"font-medium\">\n                {language === 'ar' ? 'تمت المعاملة بنجاح!' : 'Payment successful!'}\n              </span>\n            </div>\n          </motion.div>\n        )}\n\n        {paymentError && (\n          <motion.div\n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"bg-red-500/10 border border-red-500/20 rounded-lg p-4 mb-6\"\n          >\n            <div className=\"flex items-center gap-2 text-red-600\">\n              <X className=\"h-5 w-5\" />\n              <span className=\"font-medium\">{paymentError}</span>\n            </div>\n          </motion.div>\n        )}\n\n        {/* Login Prompt for Non-Authenticated Users */}\n        {!user && (\n          <motion.div variants={itemVariants}>\n            <Card className=\"bg-gradient-to-r from-primary/10 to-accent/10 border-primary/20\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"flex items-center justify-center gap-3 mb-4\">\n                  <LogIn className=\"h-8 w-8 text-primary\" />\n                  <div>\n                    <h3 className=\"font-bold text-lg\">\n                      {language === 'ar' ? 'سجل دخولك أو أنشئ حساباً' : 'Login or Create Account'}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {language === 'ar' ? 'سجل دخولك لشراء العملات والاشتراك المميز' : 'Login to purchase coins and premium subscription'}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex gap-3 justify-center\">\n                  <Button \n                    className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white border-0\"\n                    onClick={() => handleAuthAction('login')}\n                  >\n                    <LogIn className=\"h-4 w-4 mr-2\" />\n                    {language === 'ar' ? 'تسجيل الدخول' : 'Login'}\n                  </Button>\n                  <Button \n                    variant=\"outline\"\n                    className=\"border-primary/30 hover:bg-primary/10\"\n                    onClick={() => handleAuthAction('register')}\n                  >\n                    <UserPlus className=\"h-4 w-4 mr-2\" />\n                    {language === 'ar' ? 'إنشاء حساب' : 'Sign Up'}\n                  </Button>\n                </div>\n                <div className=\"mt-4 p-3 bg-muted/50 rounded-lg\">\n                  <p className=\"text-xs text-muted-foreground\">\n                    {language === 'ar' ? \n                      'للاختبار: اسم المستخدم: demo | كلمة المرور: demo123' : \n                      'Demo account: username: demo | password: demo123'\n                    }\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n\n        {/* Premium Status */}\n        {premiumStatus.isPremium && (\n          <motion.div variants={itemVariants}>\n            <Card className=\"bg-gradient-to-r from-purple-500/10 to-pink-500/10 border-purple-500/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <Crown className=\"h-6 w-6 text-purple-500\" />\n                  <div>\n                    <h3 className=\"font-bold text-lg text-purple-600\">\n                      {language === 'ar' ? 'العضوية المميزة نشطة' : 'Premium Active'}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {language === 'ar' ? 'استمتع بجميع المزايا المميزة' : 'Enjoy all premium benefits'}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <Check className=\"h-4 w-4 text-green-500\" />\n                    <span>{language === 'ar' ? 'ألعاب غير محدودة' : 'Unlimited games'}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Check className=\"h-4 w-4 text-green-500\" />\n                    <span>{language === 'ar' ? 'بدون إعلانات' : 'No ads'}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Check className=\"h-4 w-4 text-green-500\" />\n                    <span>{language === 'ar' ? 'عملات يومية إضافية' : 'Daily bonus coins'}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Check className=\"h-4 w-4 text-green-500\" />\n                    <span>{language === 'ar' ? 'دعم أولوية' : 'Priority support'}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n\n        {/* Loading State */}\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-12\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            <span className=\"ml-2\">{language === 'ar' ? 'جاري التحميل...' : 'Loading...'}</span>\n          </div>\n        ) : (\n          <>\n            {/* Premium Subscription */}\n            {!premiumStatus.isPremium && paymentData?.subscriptions && (\n              <motion.div variants={itemVariants}>\n                <Card className=\"bg-gradient-to-r from-purple-500/5 to-pink-500/5 border-purple-500/20\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-purple-600\">\n                      <Crown className=\"h-6 w-6\" />\n                      {language === 'ar' ? 'العضوية المميزة' : 'Premium Subscription'}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {Object.entries(paymentData.subscriptions).map(([key, plan]) => (\n                      <div key={key} className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h3 className=\"font-bold text-lg\">{plan.name}</h3>\n                            <p className=\"text-2xl font-bold text-purple-600\">\n                              ${(plan.price / 100).toFixed(2)}/month\n                            </p>\n                          </div>\n                          <Badge className=\"bg-purple-500 text-white\">\n                            {language === 'ar' ? 'الأفضل' : 'Best Value'}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                          {plan.features.map((feature, index) => (\n                            <div key={index} className=\"flex items-center gap-2 text-sm\">\n                              <Star className=\"h-4 w-4 text-purple-500\" />\n                              <span>{feature}</span>\n                            </div>\n                          ))}\n                        </div>\n                        \n                        <Button \n                          className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white border-0\"\n                          onClick={() => startPayment(key, true)}\n                        >\n                          <Crown className=\"h-4 w-4 mr-2\" />\n                          {language === 'ar' ? 'اشترك الآن' : 'Subscribe Now'}\n                        </Button>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              </motion.div>\n            )}\n\n            {/* Coin Packages */}\n            {paymentData?.coinPacks && (\n              <motion.div variants={itemVariants}>\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Coins className=\"h-5 w-5 text-primary\" />\n                      {language === 'ar' ? 'حزم العملات' : 'Coin Packages'}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {Object.entries(paymentData.coinPacks).map(([key, pack]) => (\n                        <motion.div\n                          key={key}\n                          whileHover={{ scale: 1.02 }}\n                          whileTap={{ scale: 0.98 }}\n                        >\n                          <Card className=\"border-2 border-primary/20 hover:border-primary/40 transition-colors\">\n                            <CardContent className=\"p-6\">\n                              <div className=\"flex items-center justify-between mb-4\">\n                                <div className=\"flex items-center gap-3\">\n                                  <div className=\"p-3 rounded-xl bg-gradient-to-br from-primary to-accent\">\n                                    <Coins className=\"h-6 w-6 text-white\" />\n                                  </div>\n                                  <div>\n                                    <h3 className=\"font-bold text-lg\">{pack.coins.toLocaleString()}</h3>\n                                    <p className=\"text-sm text-muted-foreground\">{pack.name}</p>\n                                  </div>\n                                </div>\n                                \n                                <div className=\"text-right\">\n                                  <div className=\"text-2xl font-bold text-primary\">\n                                    ${(pack.price / 100).toFixed(2)}\n                                  </div>\n                                  <div className=\"text-xs text-muted-foreground\">\n                                    {(pack.coins / (pack.price / 100)).toFixed(0)} coins/$\n                                  </div>\n                                </div>\n                              </div>\n                              \n                              <Button \n                                className=\"w-full bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white border-0\"\n                                onClick={() => startPayment(key)}\n                              >\n                                <CreditCard className=\"h-4 w-4 mr-2\" />\n                                {language === 'ar' ? 'اشتر الآن' : 'Buy Now'}\n                              </Button>\n                            </CardContent>\n                          </Card>\n                        </motion.div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            )}\n          </>\n        )}\n\n        {/* Payment Modal */}\n        {showPayment && selectedPack && paymentData && user && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className=\"fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4\"\n            onClick={() => setShowPayment(false)}\n          >\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              className=\"bg-card border border-border rounded-lg p-6 w-full max-w-md\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"font-bold text-lg\">\n                  {language === 'ar' ? 'إتمام الدفع' : 'Complete Payment'}\n                </h3>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => setShowPayment(false)}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              \n              <div className=\"mb-6\">\n                {selectedPack in (paymentData.subscriptions || {}) ? (\n                  <div className=\"p-4 bg-purple-500/10 rounded-lg border border-purple-500/20\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Crown className=\"h-5 w-5 text-purple-500\" />\n                      <span className=\"font-medium\">Premium Subscription</span>\n                    </div>\n                    <div className=\"text-2xl font-bold text-purple-600\">\n                      ${(paymentData.subscriptions[selectedPack].price / 100).toFixed(2)}/month\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"p-4 bg-primary/10 rounded-lg border border-primary/20\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Coins className=\"h-5 w-5 text-primary\" />\n                      <span className=\"font-medium\">\n                        {paymentData.coinPacks[selectedPack]?.coins} Coins\n                      </span>\n                    </div>\n                    <div className=\"text-2xl font-bold text-primary\">\n                      ${(paymentData.coinPacks[selectedPack]?.price / 100).toFixed(2)}\n                    </div>\n                  </div>\n                )}\n              </div>\n              \n              <Elements stripe={stripePromise}>\n                <PaymentForm\n                  amount={selectedPack in (paymentData.subscriptions || {}) ? \n                    paymentData.subscriptions[selectedPack].price : \n                    paymentData.coinPacks[selectedPack]?.price || 0\n                  }\n                  onSuccess={handlePaymentSuccess}\n                  onError={handlePaymentError}\n                  isSubscription={selectedPack in (paymentData.subscriptions || {})}\n                  userId={user.id}\n                  packType={selectedPack}\n                />\n              </Elements>\n              \n              <div className=\"mt-4 p-3 bg-muted/50 rounded-lg\">\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Shield className=\"h-4 w-4\" />\n                  <span>\n                    {language === 'ar' ? \n                      'مدفوعات آمنة ومشفرة بواسطة Stripe' : \n                      'Secure payments powered by Stripe'\n                    }\n                  </span>\n                </div>\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  {language === 'ar' ? \n                    'للاختبار: استخدم 4242 4242 4242 4242' : \n                    'Test card: 4242 4242 4242 4242'\n                  }\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n\n        {/* Authentication Modal */}\n        <AuthModal \n          isOpen={showAuthModal}\n          onClose={() => setShowAuthModal(false)}\n          initialMode={authMode}\n        />\n      </motion.div>\n    </div>\n  );\n}","size_bytes":26187},"client/src/components/pages/HomePage.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { useAuth } from '../../lib/stores/useAuth';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { Button } from '../ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { SpaceScene } from '../3d/SpaceScene';\nimport { SpaceButton } from '../ui/SpaceButton';\nimport { HologramCard } from '../ui/HologramCard';\nimport { WarpSpeed } from '../effects/WarpSpeed';\nimport { \n  Trophy, \n  Coins, \n  Crown, \n  Zap, \n  Users, \n  Swords, \n  Gift,\n  TrendingUp,\n  Star\n} from 'lucide-react';\nimport { \n  FaGift, \n  FaTrophy, \n  FaCoins, \n  FaBolt,\n  FaUserFriends\n} from 'react-icons/fa';\n\n// Home page component with rank, coins, score, ad rewards, contests, and battles\nexport default function HomePage() {\n  const { user, isAuthenticated } = useAuth();\n  const { translations, language } = useLanguage();\n  const { highScore, setGameState } = useTriviaGame();\n  const [warpActive, setWarpActive] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n  \n  const handleCategorySelect = (category: string) => {\n    setSelectedCategory(category);\n    setWarpActive(true);\n    setTimeout(() => {\n      setGameState('quiz-zone');\n    }, 1000);\n  };\n\n  // Animation variants for stagger effect\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        delayChildren: 0.1,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { y: 20, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        type: \"spring\",\n        damping: 20,\n        stiffness: 300\n      }\n    }\n  };\n\n  // User stats for display\n  const userStats = {\n    rank: user?.rank || 'Bronze',\n    coins: user?.coins || 0,\n    score: highScore,\n    level: user ? Math.floor(user.coins / 100) + 1 : 1,\n    premium: user?.premium || false\n  };\n\n  return (\n    <>\n      {/* 3D Space Background */}\n      <SpaceScene \n        onCategorySelect={handleCategorySelect}\n        enableInteraction={!warpActive}\n      />\n      \n      {/* Warp Speed Transition */}\n      <WarpSpeed \n        active={warpActive} \n        duration={1}\n        onComplete={() => setWarpActive(false)}\n      />\n      \n      <div className=\"min-h-screen p-4 overflow-y-auto relative z-10\" style={{ height: '100vh' }}>\n        <motion.div\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          className=\"max-w-md mx-auto space-y-4 pb-32\"\n        >\n          {/* Header with user info */}\n          <motion.div variants={itemVariants}>\n            <HologramCard \n              glowColor=\"rgba(59, 130, 246, 0.5)\"\n              floatAnimation={true}\n            >\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-12 h-12 rounded-full bg-primary/20 flex items-center justify-center\">\n                    <Trophy className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <div>\n                    <h2 className=\"text-lg font-bold text-primary\">\n                      {isAuthenticated ? user?.username : 'Guest Player'}\n                    </h2>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {userStats.rank}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        Level {userStats.level}\n                      </Badge>\n                      {userStats.premium && (\n                        <Crown className=\"h-4 w-4 text-yellow-500\" />\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Stats row */}\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center justify-center gap-1\">\n                    <Coins className=\"h-4 w-4 text-yellow-500\" />\n                    <span className=\"text-lg font-bold text-yellow-500\">\n                      {userStats.coins.toLocaleString()}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Coins</p>\n                </div>\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center justify-center gap-1\">\n                    <Trophy className=\"h-4 w-4 text-primary\" />\n                    <span className=\"text-lg font-bold text-primary\">\n                      {userStats.score.toLocaleString()}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Best Score</p>\n                </div>\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center justify-center gap-1\">\n                    <Star className=\"h-4 w-4 text-accent\" />\n                    <span className=\"text-lg font-bold text-accent\">\n                      {userStats.level}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Level</p>\n                </div>\n              </div>\n            </HologramCard>\n          </motion.div>\n\n        {/* Quick actions */}\n        <motion.div variants={itemVariants} className=\"grid grid-cols-2 gap-3\">\n          {/* Ad Rewards Button */}\n          <motion.div\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <Button \n              className=\"w-full h-20 bg-gradient-to-br from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white border-0 flex flex-col gap-1\"\n              onClick={async () => {\n                try {\n                  // Call ad reward API\n                  const response = await fetch('/api/rewards/ad', {\n                    method: 'POST',\n                    headers: {\n                      'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                      userId: user?.id || 1 // Use actual user ID\n                    })\n                  });\n                  \n                  const data = await response.json();\n                  \n                  if (data.success) {\n                    console.log(`Earned ${data.reward} coins! New balance: ${data.newBalance}`);\n                    // You could add a toast notification here\n                  }\n                } catch (error) {\n                  console.error('Error claiming ad reward:', error);\n                }\n              }}\n            >\n              <FaGift className=\"h-5 w-5\" />\n              <span className=\"text-xs font-medium\">\n                {language === 'ar' ? 'عملات مجانية' : 'Free Coins'}\n              </span>\n              <span className=\"text-xs opacity-80\">\n                {language === 'ar' ? 'شاهد إعلان' : 'Watch Ad'}\n              </span>\n            </Button>\n          </motion.div>\n\n          {/* Leaderboard */}\n          <motion.div\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <Button \n              className=\"w-full h-20 bg-gradient-to-br from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white border-0 flex flex-col gap-1\"\n              onClick={async () => {\n                if (!isAuthenticated || !user) {\n                  console.log('User must be logged in to claim daily bonus');\n                  return;\n                }\n                \n                try {\n                  // Call daily bonus API\n                  const response = await fetch('/api/rewards/daily-bonus', {\n                    method: 'POST',\n                    headers: {\n                      'Content-Type': 'application/json',\n                    },\n                    credentials: 'include',\n                    body: JSON.stringify({\n                      userId: user.id\n                    })\n                  });\n                  \n                  if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                  }\n                  \n                  const data = await response.json();\n                  console.log('Daily bonus response:', data);\n                  \n                  if (data.success) {\n                    console.log(`Daily bonus claimed! Earned ${data.reward} coins! New balance: ${data.newBalance}`);\n                    alert(language === 'ar' ? \n                      `مكافأة يومية! حصلت على ${data.reward} عملة` : \n                      `Daily bonus! Earned ${data.reward} coins`\n                    );\n                    // Refresh the page to update coin balance\n                    window.location.reload();\n                  } else {\n                    console.log(`Daily bonus error: ${data.error}`);\n                    if (data.error && data.error.includes('already claimed')) {\n                      alert(language === 'ar' ? 'تم استلام المكافأة اليومية بالفعل! عد غداً.' : 'Daily bonus already claimed! Come back tomorrow.');\n                    } else {\n                      alert(language === 'ar' ? `خطأ: ${data.error}` : `Error: ${data.error}`);\n                    }\n                  }\n                } catch (error) {\n                  console.error('Error claiming daily bonus:', error);\n                  alert(language === 'ar' ? 'خطأ في استلام المكافأة' : 'Error claiming daily bonus');\n                }\n              }}\n            >\n              <Zap className=\"h-5 w-5\" />\n              <span className=\"text-xs font-medium\">\n                {language === 'ar' ? 'مكافأة يومية' : 'Daily Bonus'}\n              </span>\n              <span className=\"text-xs opacity-80\">\n                +{user?.premium ? '50' : '25'} {language === 'ar' ? 'عملة' : 'Coins'}\n              </span>\n            </Button>\n          </motion.div>\n        </motion.div>\n\n        {/* Main game modes */}\n        <motion.div variants={itemVariants} className=\"space-y-3\">\n          {/* Quiz Zone */}\n          <motion.div\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n          >\n            <Button \n              className=\"w-full h-16 bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary text-white border-0 flex items-center justify-between px-6\"\n              onClick={() => setGameState('quiz-zone')}\n            >\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 rounded-lg bg-white/20 flex items-center justify-center\">\n                  <FaBolt className=\"h-5 w-5\" />\n                </div>\n                <div className=\"text-left\">\n                  <p className=\"font-semibold\">Quiz Zone</p>\n                  <p className=\"text-xs opacity-80\">Solo Challenge</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-xs opacity-80\">Play Now</p>\n              </div>\n            </Button>\n          </motion.div>\n\n          {/* Contests */}\n          <motion.div\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n          >\n            <Button \n              className=\"w-full h-16 bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white border-0 flex items-center justify-between px-6\"\n              onClick={() => {\n                console.log('Open contests');\n              }}\n            >\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 rounded-lg bg-white/20 flex items-center justify-center\">\n                  <FaTrophy className=\"h-5 w-5\" />\n                </div>\n                <div className=\"text-left\">\n                  <p className=\"font-semibold\">Contests</p>\n                  <p className=\"text-xs opacity-80\">Weekly Tournaments</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <Badge className=\"bg-yellow-500 text-black text-xs\">\n                  🏆 Live\n                </Badge>\n              </div>\n            </Button>\n          </motion.div>\n\n          {/* Battles */}\n          <motion.div\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n          >\n            <Button \n              className=\"w-full h-16 bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white border-0 flex items-center justify-between px-6\"\n              onClick={() => setGameState('lobby')}\n            >\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 rounded-lg bg-white/20 flex items-center justify-center\">\n                  <Swords className=\"h-5 w-5\" />\n                </div>\n                <div className=\"text-left\">\n                  <p className=\"font-semibold\">Battles</p>\n                  <p className=\"text-xs opacity-80\">1v1 & Team Matches</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-xs opacity-80\">\n                  <Users className=\"inline h-3 w-3 mr-1\" />\n                  23 Online\n                </p>\n              </div>\n            </Button>\n          </motion.div>\n        </motion.div>\n\n        {/* Bottom actions */}\n        <motion.div variants={itemVariants} className=\"grid grid-cols-2 gap-3\">\n          {/* Coin Store */}\n          <motion.div\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <Button \n              variant=\"outline\"\n              className=\"w-full h-14 border-primary/30 hover:bg-primary/10 flex flex-col gap-1\"\n              onClick={() => setGameState('coin-store')}\n            >\n              <FaCoins className=\"h-4 w-4 text-yellow-500\" />\n              <span className=\"text-xs\">Coin Store</span>\n            </Button>\n          </motion.div>\n\n          {/* Friends */}\n          <motion.div\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <Button \n              variant=\"outline\"\n              className=\"w-full h-14 border-primary/30 hover:bg-primary/10 flex flex-col gap-1\"\n              onClick={() => setGameState('friends')}\n            >\n              <FaUserFriends className=\"h-4 w-4 text-primary\" />\n              <span className=\"text-xs\">Friends</span>\n            </Button>\n          </motion.div>\n        </motion.div>\n\n        {/* Progress indicator */}\n        <motion.div variants={itemVariants}>\n          <Card className=\"bg-card/50\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium\">Level Progress</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {userStats.coins % 100}/100\n                </span>\n              </div>\n              <div className=\"w-full bg-muted/30 rounded-full h-2\">\n                <motion.div \n                  className=\"bg-gradient-to-r from-primary to-accent h-2 rounded-full\"\n                  initial={{ width: 0 }}\n                  animate={{ width: `${(userStats.coins % 100)}%` }}\n                  transition={{ duration: 1, delay: 0.5 }}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </motion.div>\n    </div>\n    </>\n  );\n}","size_bytes":15994},"client/src/components/pages/ProfilePage.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { useAuth } from '../../lib/stores/useAuth';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { useTheme, themeOptions } from '../../lib/stores/useTheme';\nimport { Button } from '../ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { Switch } from '../ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\nimport { \n  ArrowLeft, \n  User, \n  Trophy, \n  Coins, \n  Crown, \n  Globe,\n  Palette,\n  Settings,\n  Gift,\n  BarChart3,\n  Calendar,\n  Target,\n  Award,\n  TrendingUp,\n  Share2,\n  Copy,\n  Users\n} from 'lucide-react';\n\n// Profile component with rewards, statistics, theme, language selector\nexport default function ProfilePage() {\n  const { user, isAuthenticated, logout } = useAuth();\n  const { language, setLanguage, translations } = useLanguage();\n  const { highScore, setGameState } = useTriviaGame();\n  const { theme, setTheme } = useTheme();\n  const [notificationsEnabled, setNotificationsEnabled] = useState(true);\n  const [referralData, setReferralData] = useState<{\n    referralCode: string;\n    totalReferrals: number;\n    shareUrl: string;\n  } | null>(null);\n  const [showReferralInput, setShowReferralInput] = useState(false);\n  const [referralCodeInput, setReferralCodeInput] = useState('');\n  const [referralMessage, setReferralMessage] = useState('');\n\n  // Fetch referral data\n  const fetchReferralData = async () => {\n    if (!isAuthenticated) return;\n    \n    try {\n      const response = await fetch('/api/auth/referral-code', {\n        credentials: 'include'\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setReferralData(data);\n      }\n    } catch (error) {\n      console.error('Error fetching referral data:', error);\n    }\n  };\n\n  // Use referral code\n  const useReferralCode = async () => {\n    if (!referralCodeInput.trim()) return;\n    \n    try {\n      const response = await fetch('/api/auth/use-referral', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({ referralCode: referralCodeInput.trim() })\n      });\n      \n      const data = await response.json();\n      \n      if (response.ok) {\n        setReferralMessage(`✅ ${data.message}`);\n        setShowReferralInput(false);\n        setReferralCodeInput('');\n        // Refresh user data to show new coins\n        window.location.reload();\n      } else {\n        setReferralMessage(`❌ ${data.error}`);\n      }\n    } catch (error) {\n      setReferralMessage('❌ Failed to use referral code');\n    }\n    \n    setTimeout(() => setReferralMessage(''), 5000);\n  };\n\n  // Copy referral link to clipboard\n  const copyReferralLink = async () => {\n    if (!referralData?.shareUrl) return;\n    \n    try {\n      await navigator.clipboard.writeText(referralData.shareUrl);\n      setReferralMessage('✅ Referral link copied to clipboard!');\n    } catch (error) {\n      setReferralMessage('❌ Failed to copy link');\n    }\n    \n    setTimeout(() => setReferralMessage(''), 3000);\n  };\n\n  // Load referral data on component mount\n  React.useEffect(() => {\n    fetchReferralData();\n  }, [isAuthenticated]);\n\n  // Use real user statistics from the user object, defaulting to 0 for new accounts\n  const userStats = {\n    totalGamesPlayed: user?.totalGames || 0,\n    correctAnswers: user?.correctAnswers || 0,\n    accuracy: user?.totalGames ? Math.round((user.correctAnswers || 0) / (user.totalGames || 1) * 100) : 0,\n    averageTime: user?.averageTime || 0,\n    longestStreak: user?.maxStreak || 0,\n    dailyStreak: user?.currentStreak || 0,\n    questionsAnswered: user?.questionsAnswered || 0,\n    timeSpent: user?.timeSpent || 0, // hours\n    rank: user?.rank || 'Bronze',\n    level: user ? Math.floor((user.coins || 0) / 100) + 1 : 1,\n    nextLevelCoins: 100 - ((user?.coins || 0) % 100)\n  };\n\n  // Language options\n  const languageOptions = [\n    { code: 'en', name: 'English', flag: '🇺🇸' },\n    { code: 'ar', name: 'العربية', flag: '🇸🇦' }\n  ];\n\n\n  // Recent achievements - check actual progress for new accounts\n  const achievements = [\n    { \n      icon: '🏆', \n      title: 'Quiz Master', \n      description: 'Answered 100 questions correctly', \n      earned: (user?.correctAnswers || 0) >= 100 \n    },\n    { \n      icon: '🔥', \n      title: 'Streak Champion', \n      description: 'Maintained 10-question streak', \n      earned: (user?.maxStreak || 0) >= 10 \n    },\n    { \n      icon: '⚡', \n      title: 'Speed Demon', \n      description: 'Answer in under 5 seconds', \n      earned: (user?.hasSpeedDemon || false) \n    },\n    { \n      icon: '🎯', \n      title: 'Perfect Score', \n      description: 'Get 100% in a category', \n      earned: (user?.hasPerfectScore || false) \n    }\n  ];\n\n  // Animation variants\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        delayChildren: 0.1,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { y: 20, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        type: \"spring\",\n        damping: 20,\n        stiffness: 300\n      }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-primary/5 p-4 overflow-y-auto\" style={{ height: '100vh' }}>\n      <motion.div\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className=\"max-w-md mx-auto space-y-4 pb-40\"\n      >\n        {/* Header */}\n        <motion.div variants={itemVariants} className=\"flex items-center gap-4 mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setGameState('home')}\n            className=\"text-primary hover:bg-primary/10\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-primary\">Profile</h1>\n            <p className=\"text-sm text-muted-foreground\">Manage your account</p>\n          </div>\n        </motion.div>\n\n        {/* User Info Card */}\n        <motion.div variants={itemVariants}>\n          <Card className=\"bg-gradient-to-r from-primary/10 to-accent/10 border-primary/20\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4 mb-4\">\n                <div className=\"w-16 h-16 rounded-full bg-primary/20 flex items-center justify-center\">\n                  <User className=\"h-8 w-8 text-primary\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-bold\">\n                    {isAuthenticated ? user?.username : 'Guest Player'}\n                  </h3>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    <Badge variant=\"secondary\">{userStats.rank}</Badge>\n                    <Badge variant=\"outline\">Level {userStats.level}</Badge>\n                    {user?.premium && (\n                      <Crown className=\"h-4 w-4 text-yellow-500\" />\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Stats row */}\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                <div>\n                  <div className=\"flex items-center justify-center gap-1\">\n                    <Coins className=\"h-4 w-4 text-yellow-500\" />\n                    <span className=\"text-lg font-bold text-yellow-500\">\n                      {(user?.coins || 0).toLocaleString()}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Coins</p>\n                </div>\n                <div>\n                  <div className=\"flex items-center justify-center gap-1\">\n                    <Trophy className=\"h-4 w-4 text-primary\" />\n                    <span className=\"text-lg font-bold text-primary\">\n                      {highScore.toLocaleString()}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Best Score</p>\n                </div>\n                <div>\n                  <div className=\"flex items-center justify-center gap-1\">\n                    <Award className=\"h-4 w-4 text-accent\" />\n                    <span className=\"text-lg font-bold text-accent\">\n                      {userStats.totalGamesPlayed}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Games</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Statistics */}\n        <motion.div variants={itemVariants}>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <BarChart3 className=\"h-5 w-5 text-primary\" />\n                Statistics\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-3 rounded-lg bg-muted/30\">\n                  <p className=\"text-2xl font-bold text-green-500\">{userStats.accuracy}%</p>\n                  <p className=\"text-xs text-muted-foreground\">Accuracy</p>\n                </div>\n                <div className=\"text-center p-3 rounded-lg bg-muted/30\">\n                  <p className=\"text-2xl font-bold text-blue-500\">{userStats.averageTime}s</p>\n                  <p className=\"text-xs text-muted-foreground\">Avg Time</p>\n                </div>\n                <div className=\"text-center p-3 rounded-lg bg-muted/30\">\n                  <p className=\"text-2xl font-bold text-orange-500\">{userStats.longestStreak}</p>\n                  <p className=\"text-xs text-muted-foreground\">Best Streak</p>\n                </div>\n                <div className=\"text-center p-3 rounded-lg bg-muted/30\">\n                  <p className=\"text-2xl font-bold text-purple-500\">{userStats.dailyStreak}</p>\n                  <p className=\"text-xs text-muted-foreground\">Daily Streak</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Questions Answered</span>\n                  <span className=\"font-medium\">{userStats.questionsAnswered.toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Time Spent</span>\n                  <span className=\"font-medium\">{userStats.timeSpent}h</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Correct Answers</span>\n                  <span className=\"font-medium\">{userStats.correctAnswers.toLocaleString()}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Achievements */}\n        <motion.div variants={itemVariants}>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Gift className=\"h-5 w-5 text-primary\" />\n                Achievements\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {achievements.map((achievement, index) => (\n                <div \n                  key={index}\n                  className={`flex items-center gap-3 p-3 rounded-lg ${\n                    achievement.earned \n                      ? 'bg-primary/10 border border-primary/20' \n                      : 'bg-muted/30 opacity-60'\n                  }`}\n                >\n                  <div className=\"text-2xl\">{achievement.icon}</div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-sm\">{achievement.title}</p>\n                    <p className=\"text-xs text-muted-foreground\">{achievement.description}</p>\n                  </div>\n                  {achievement.earned && (\n                    <Badge className=\"bg-green-500 text-white text-xs\">Earned</Badge>\n                  )}\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Settings */}\n        <motion.div variants={itemVariants}>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Settings className=\"h-5 w-5 text-primary\" />\n                Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Language Selector */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <Globe className=\"h-4 w-4\" />\n                  Language: {language} \n                </label>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant={language === 'en' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => {\n                      console.log('Switching to English');\n                      setLanguage('en');\n                    }}\n                    className=\"flex items-center gap-2\"\n                  >\n                    🇺🇸 English\n                  </Button>\n                  <Button\n                    variant={language === 'ar' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => {\n                      console.log('Switching to Arabic');\n                      setLanguage('ar');\n                    }}\n                    className=\"flex items-center gap-2\"\n                  >\n                    🇸🇦 العربية\n                  </Button>\n                </div>\n              </div>\n\n              {/* Theme Selector */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <Palette className=\"h-4 w-4\" />\n                  Theme\n                </label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {themeOptions.map((themeOption) => (\n                    <Button\n                      key={themeOption.id}\n                      variant={theme === themeOption.id ? \"default\" : \"outline\"}\n                      className=\"h-12 flex items-center gap-2\"\n                      onClick={() => {\n                        console.log('Theme button clicked:', themeOption.id);\n                        setTheme(themeOption.id);\n                      }}\n                    >\n                      <div \n                        className=\"w-4 h-4 rounded-full\"\n                        style={{ backgroundColor: themeOption.color }}\n                      />\n                      <span className=\"text-xs\">{themeOption.name}</span>\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Notifications */}\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-medium\">Push Notifications</label>\n                <Switch \n                  checked={notificationsEnabled}\n                  onCheckedChange={setNotificationsEnabled}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Referral System */}\n        {isAuthenticated && (\n          <motion.div variants={itemVariants}>\n            <Card className=\"bg-gradient-to-r from-green-500/10 to-blue-500/10 border-green-500/20\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-lg\">\n                  <Users className=\"h-5 w-5 text-green-500\" />\n                  {language === 'ar' ? 'نظام الإحالة' : 'Referral System'}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {referralData && (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {language === 'ar' ? 'كودك الشخصي' : 'Your Referral Code'}\n                        </p>\n                        <p className=\"font-mono font-bold text-lg\">{referralData.referralCode}</p>\n                      </div>\n                      <Button size=\"sm\" variant=\"outline\" onClick={copyReferralLink}>\n                        <Copy className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 text-center\">\n                      <div className=\"p-3 bg-muted/30 rounded-lg\">\n                        <p className=\"text-2xl font-bold text-green-500\">{referralData.totalReferrals}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {language === 'ar' ? 'إحالات ناجحة' : 'Successful Referrals'}\n                        </p>\n                      </div>\n                      <div className=\"p-3 bg-muted/30 rounded-lg\">\n                        <p className=\"text-2xl font-bold text-yellow-500\">\n                          {referralData.totalReferrals * 50}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {language === 'ar' ? 'عملات مكتسبة' : 'Coins Earned'}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {!showReferralInput ? (\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={() => setShowReferralInput(true)}\n                  >\n                    <Gift className=\"h-4 w-4 mr-2\" />\n                    {language === 'ar' ? 'استخدم كود إحالة' : 'Use Referral Code'}\n                  </Button>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <input\n                      type=\"text\"\n                      placeholder={language === 'ar' ? 'أدخل كود الإحالة' : 'Enter referral code'}\n                      value={referralCodeInput}\n                      onChange={(e) => setReferralCodeInput(e.target.value)}\n                      className=\"w-full p-2 border rounded-lg bg-background\"\n                    />\n                    <div className=\"flex gap-2\">\n                      <Button size=\"sm\" onClick={useReferralCode} className=\"flex-1\">\n                        {language === 'ar' ? 'تأكيد' : 'Apply'}\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        onClick={() => {\n                          setShowReferralInput(false);\n                          setReferralCodeInput('');\n                        }}\n                      >\n                        {language === 'ar' ? 'إلغاء' : 'Cancel'}\n                      </Button>\n                    </div>\n                  </div>\n                )}\n\n                {referralMessage && (\n                  <p className=\"text-sm text-center p-2 rounded-lg bg-muted/30\">\n                    {referralMessage}\n                  </p>\n                )}\n\n                <div className=\"text-xs text-muted-foreground text-center\">\n                  {language === 'ar' \n                    ? 'شارك كودك واحصل على 50 عملة لكل صديق جديد!' \n                    : 'Share your code and earn 50 coins for each new friend!'}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n\n        {/* Action buttons */}\n        {isAuthenticated && (\n          <motion.div variants={itemVariants} className=\"space-y-2\">\n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => setGameState('friends')}\n            >\n              <Users className=\"h-4 w-4 mr-2\" />\n              {language === 'ar' ? 'قائمة الأصدقاء' : 'Friends List'}\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => setGameState('coin-store')}\n            >\n              <Crown className=\"h-4 w-4 mr-2\" />\n              {language === 'ar' ? 'الترقية إلى المميز' : 'Upgrade to Premium'}\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"w-full text-red-500 border-red-500/30 hover:bg-red-500/10\"\n              onClick={logout}\n            >\n              {language === 'ar' ? 'تسجيل خروج' : 'Sign Out'}\n            </Button>\n          </motion.div>\n        )}\n      </motion.div>\n    </div>\n  );\n}","size_bytes":21367},"client/src/components/pages/QuestionScreen.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { Button } from '../ui/button';\nimport { Card, CardContent } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { Progress } from '../ui/progress';\nimport { \n  ArrowLeft, \n  Lightbulb, \n  Send, \n  Clock, \n  Heart,\n  Zap\n} from 'lucide-react';\n\n// Question Screen component with image, scrambled letters input, hint/back/submit buttons\nexport default function QuestionScreen() {\n  const { translations, language } = useLanguage();\n  const { \n    currentQuestion, \n    questionNumber, \n    totalQuestions, \n    timeRemaining, \n    score,\n    streak,\n    answerQuestion,\n    setGameState\n  } = useTriviaGame();\n\n  const [selectedAnswer, setSelectedAnswer] = useState<string>('');\n  const [scrambledLetters, setScrambledLetters] = useState<string[]>([]);\n  const [usedHint, setUsedHint] = useState(false);\n  const [showHint, setShowHint] = useState(false);\n\n  // Scramble the correct answer letters\n  useEffect(() => {\n    if (currentQuestion) {\n      const correctAnswer = currentQuestion.options[currentQuestion.correctAnswer];\n      const letters = correctAnswer.split('').filter(char => char !== ' ');\n      // Add some extra random letters to make it challenging\n      const extraLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')\n        .sort(() => Math.random() - 0.5)\n        .slice(0, Math.max(3, Math.floor(letters.length * 0.3)));\n      \n      const allLetters = [...letters, ...extraLetters]\n        .sort(() => Math.random() - 0.5);\n      \n      setScrambledLetters(allLetters);\n    }\n  }, [currentQuestion]);\n\n  // Animation variants\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.5,\n        delayChildren: 0.1,\n        staggerChildren: 0.1\n      }\n    },\n    exit: {\n      opacity: 0,\n      y: -20,\n      transition: { duration: 0.3 }\n    }\n  };\n\n  const letterVariants = {\n    hidden: { scale: 0, rotate: 180 },\n    visible: {\n      scale: 1,\n      rotate: 0,\n      transition: {\n        type: \"spring\",\n        damping: 20,\n        stiffness: 300\n      }\n    }\n  };\n\n  const handleLetterClick = (letter: string, index: number) => {\n    if (selectedAnswer.length < 20) { // Reasonable limit\n      setSelectedAnswer(prev => prev + letter);\n      // Remove letter from available letters\n      setScrambledLetters(prev => prev.filter((_, i) => i !== index));\n    }\n  };\n\n  const handleBackspace = () => {\n    if (selectedAnswer.length > 0) {\n      const lastLetter = selectedAnswer[selectedAnswer.length - 1];\n      setSelectedAnswer(prev => prev.slice(0, -1));\n      // Add letter back to scrambled letters\n      setScrambledLetters(prev => [...prev, lastLetter]);\n    }\n  };\n\n  const handleSubmit = () => {\n    if (selectedAnswer.trim()) {\n      // Find the matching option\n      const matchingIndex = currentQuestion?.options.findIndex(\n        option => option.toLowerCase().replace(/\\s/g, '') === selectedAnswer.toLowerCase().replace(/\\s/g, '')\n      ) ?? -1;\n      \n      if (matchingIndex !== -1) {\n        answerQuestion(matchingIndex);\n      } else {\n        // Wrong answer - still submit as first option to trigger incorrect logic\n        answerQuestion(0);\n      }\n    }\n  };\n\n  const handleHint = () => {\n    if (!usedHint && currentQuestion) {\n      setUsedHint(true);\n      setShowHint(true);\n      // Auto-hide hint after 5 seconds\n      setTimeout(() => setShowHint(false), 5000);\n    }\n  };\n\n  if (!currentQuestion) {\n    return <div>Loading...</div>;\n  }\n\n  const progress = ((questionNumber - 1) / totalQuestions) * 100;\n  const timeProgress = (timeRemaining / 30) * 100;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-primary/5 p-4 overflow-y-auto\" style={{ height: '100vh' }}>\n      <motion.div\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        exit=\"exit\"\n        className=\"max-w-md mx-auto space-y-4 pb-32\"\n      >\n        {/* Header with progress */}\n        <motion.div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setGameState('quiz-zone')}\n              className=\"text-primary hover:bg-primary/10\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\" className=\"text-xs\">\n                Question {questionNumber}/{totalQuestions}\n              </Badge>\n              <div className=\"flex items-center gap-1\">\n                <Zap className=\"h-4 w-4 text-yellow-500\" />\n                <span className=\"text-sm font-bold text-yellow-500\">{streak}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Progress bars */}\n          <div className=\"space-y-2\">\n            <Progress value={progress} className=\"h-2\" />\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"h-4 w-4 text-primary\" />\n                <span className=\"text-sm font-medium\">{timeRemaining}s</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Heart className=\"h-4 w-4 text-red-500\" />\n                <span className=\"text-sm font-medium\">{score.toLocaleString()}</span>\n              </div>\n            </div>\n            <Progress \n              value={timeProgress} \n              className=\"h-1\" \n              color={timeRemaining < 10 ? 'bg-red-500' : 'bg-primary'}\n            />\n          </div>\n        </motion.div>\n\n        {/* Question image */}\n        <motion.div\n          initial={{ scale: 0.8, opacity: 0 }}\n          animate={{ scale: 1, opacity: 1 }}\n          transition={{ duration: 0.5 }}\n        >\n          <Card className=\"overflow-hidden\">\n            <div className=\"aspect-video bg-gradient-to-br from-primary/20 to-accent/20 flex items-center justify-center\">\n              {/* Placeholder for question image */}\n              <div className=\"text-center p-6\">\n                <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-primary/20 flex items-center justify-center\">\n                  <span className=\"text-2xl\">🧠</span>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Question Image</p>\n              </div>\n            </div>\n          </Card>\n        </motion.div>\n\n        {/* Question text */}\n        <motion.div\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ delay: 0.2 }}\n        >\n          <Card className=\"bg-card/80 backdrop-blur-sm\">\n            <CardContent className=\"p-6 text-center\">\n              <h2 className=\"text-lg font-semibold mb-2\">\n                {currentQuestion.question}\n              </h2>\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {currentQuestion.category} • {currentQuestion.difficulty}\n              </Badge>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Hint display */}\n        <AnimatePresence>\n          {showHint && (\n            <motion.div\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              className=\"bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-3\"\n            >\n              <p className=\"text-sm text-yellow-700 dark:text-yellow-300\">\n                💡 Hint: {currentQuestion.explanation || 'Think about the category and context of the question.'}\n              </p>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Answer input */}\n        <motion.div\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ delay: 0.3 }}\n          className=\"space-y-4\"\n        >\n          {/* Answer display */}\n          <Card className=\"bg-primary/5 border-primary/20\">\n            <CardContent className=\"p-4\">\n              <div className=\"min-h-[60px] flex items-center justify-center\">\n                <div className=\"text-xl font-mono tracking-widest\">\n                  {selectedAnswer || (\n                    <span className=\"text-muted-foreground\">Tap letters below...</span>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Scrambled letters */}\n          <div className=\"grid grid-cols-6 gap-2\">\n            <AnimatePresence>\n              {scrambledLetters.map((letter, index) => (\n                <motion.button\n                  key={`${letter}-${index}`}\n                  variants={letterVariants}\n                  initial=\"hidden\"\n                  animate=\"visible\"\n                  exit={{ scale: 0, rotate: 180 }}\n                  whileHover={{ scale: 1.1 }}\n                  whileTap={{ scale: 0.9 }}\n                  className=\"aspect-square bg-gradient-to-br from-primary to-primary/80 hover:from-primary/90 hover:to-primary text-white rounded-lg text-lg font-bold shadow-lg\"\n                  onClick={() => handleLetterClick(letter, index)}\n                >\n                  {letter}\n                </motion.button>\n              ))}\n            </AnimatePresence>\n          </div>\n        </motion.div>\n\n        {/* Action buttons */}\n        <motion.div\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ delay: 0.4 }}\n          className=\"grid grid-cols-3 gap-3\"\n        >\n          {/* Hint button */}\n          <Button\n            variant=\"outline\"\n            onClick={handleHint}\n            disabled={usedHint}\n            className=\"flex flex-col gap-1 h-16 border-yellow-500/30 hover:bg-yellow-500/10\"\n          >\n            <Lightbulb className={`h-4 w-4 ${usedHint ? 'text-muted-foreground' : 'text-yellow-500'}`} />\n            <span className=\"text-xs\">\n              {usedHint ? 'Used' : 'Hint'}\n            </span>\n          </Button>\n\n          {/* Backspace button */}\n          <Button\n            variant=\"outline\"\n            onClick={handleBackspace}\n            disabled={selectedAnswer.length === 0}\n            className=\"flex flex-col gap-1 h-16 border-red-500/30 hover:bg-red-500/10\"\n          >\n            <ArrowLeft className=\"h-4 w-4 text-red-500\" />\n            <span className=\"text-xs\">Back</span>\n          </Button>\n\n          {/* Submit button */}\n          <Button\n            onClick={handleSubmit}\n            disabled={selectedAnswer.length === 0}\n            className=\"flex flex-col gap-1 h-16 bg-gradient-to-br from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white border-0\"\n          >\n            <Send className=\"h-4 w-4\" />\n            <span className=\"text-xs\">Submit</span>\n          </Button>\n        </motion.div>\n\n        {/* Score display */}\n        <motion.div\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ delay: 0.5 }}\n        >\n          <Card className=\"bg-gradient-to-r from-primary/10 to-accent/10 border-primary/20\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-muted-foreground\">Current Score:</span>\n                  <span className=\"font-bold text-primary\">{score.toLocaleString()}</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-muted-foreground\">Streak:</span>\n                  <span className=\"font-bold text-yellow-500\">🔥 {streak}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":12208},"client/src/components/pages/QuizZone.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport TriviaQuestion from '../game/TriviaQuestion';\nimport GameResults from '../game/GameResults';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { Button } from '../ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { \n  ArrowLeft, \n  Play, \n  Brain, \n  Globe, \n  Trophy, \n  Beaker,\n  Calendar,\n  Film,\n  Music,\n  Star,\n  Loader2,\n  Sparkles,\n  BookOpen,\n  Gamepad2\n} from 'lucide-react';\n\n// Enhanced Quiz Zone with AI-generated questions and improved categories\nexport default function QuizZone() {\n  const { gameState, setGameState, setCategory, setDifficulty, startGame, resetGame } = useTriviaGame();\n  const { translations, language } = useLanguage();\n  \n  // State for AI categories and loading\n  const [categories, setCategories] = useState<any[]>([]);\n  const [isLoadingCategories, setIsLoadingCategories] = useState(true);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [selectedDifficulty, setSelectedDifficulty] = useState('medium');\n  const [isGeneratingQuestions, setIsGeneratingQuestions] = useState(false);\n\n  // Fetch AI-powered categories on component mount and reset game state\n  useEffect(() => {\n    // Reset game when entering quiz zone to clear any stuck state\n    if (gameState === 'playing' || gameState === 'results') {\n      resetGame();\n    }\n    fetchCategories();\n  }, [language]);\n\n  const fetchCategories = async () => {\n    try {\n      setIsLoadingCategories(true);\n      const response = await fetch(`/api/questions/categories?language=${language}`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch categories');\n      }\n      \n      const data = await response.json();\n      if (data.success) {\n        setCategories(data.categories);\n      } else {\n        throw new Error(data.error || 'Failed to load categories');\n      }\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      // Use fallback categories if API fails\n      setCategories(getFallbackCategories());\n    } finally {\n      setIsLoadingCategories(false);\n    }\n  };\n\n  // Fallback categories for offline/error scenarios\n  const getFallbackCategories = () => {\n    const fallbackData = {\n      en: [\n        { id: 'general-knowledge', name: 'General Knowledge', icon: '🧠', subcategories: ['Basic Facts', 'World Knowledge', 'Common Sense'] },\n        { id: 'sports', name: 'Sports', icon: '⚽', subcategories: ['Football', 'Basketball', 'Olympics'] },\n        { id: 'science', name: 'Science', icon: '🔬', subcategories: ['Physics', 'Chemistry', 'Biology'] },\n        { id: 'history', name: 'History', icon: '🏛️', subcategories: ['Ancient History', 'World Wars', 'Modern History'] },\n        { id: 'movies', name: 'Movies & Entertainment', icon: '🎬', subcategories: ['Hollywood', 'TV Shows', 'Celebrities'] },\n        { id: 'music', name: 'Music', icon: '🎵', subcategories: ['Pop Music', 'Classical', 'Rock'] },\n        { id: 'news', name: 'Current News', icon: '📰', subcategories: ['World Events', 'Politics', 'Technology'] }\n      ],\n      ar: [\n        { id: 'general-knowledge', name: 'المعرفة العامة', icon: '🧠', subcategories: ['الحقائق الأساسية', 'المعرفة العالمية', 'الحس العام'] },\n        { id: 'sports', name: 'الرياضة', icon: '⚽', subcategories: ['كرة القدم', 'كرة السلة', 'الألعاب الأولمبية'] },\n        { id: 'science', name: 'العلوم', icon: '🔬', subcategories: ['الفيزياء', 'الكيمياء', 'علم الأحياء'] },\n        { id: 'history', name: 'التاريخ', icon: '🏛️', subcategories: ['التاريخ القديم', 'الحروب العالمية', 'التاريخ الحديث'] },\n        { id: 'movies', name: 'الأفلام والترفيه', icon: '🎬', subcategories: ['هوليوود', 'البرامج التلفزيونية', 'المشاهير'] },\n        { id: 'music', name: 'الموسيقى', icon: '🎵', subcategories: ['الموسيقى الشعبية', 'الكلاسيكية', 'الروك'] },\n        { id: 'news', name: 'الأخبار الحالية', icon: '📰', subcategories: ['الأحداث العالمية', 'السياسة', 'التكنولوجيا'] }\n      ]\n    };\n    \n    return fallbackData[language] || fallbackData.en;\n  };\n\n  // Difficulty levels with localization\n  const difficultyLevels = [\n    { \n      id: 'easy', \n      name: language === 'ar' ? 'سهل' : 'Easy', \n      color: 'from-green-500 to-green-600',\n      description: language === 'ar' ? 'للمبتدئين' : 'For beginners'\n    },\n    { \n      id: 'medium', \n      name: language === 'ar' ? 'متوسط' : 'Medium', \n      color: 'from-yellow-500 to-yellow-600',\n      description: language === 'ar' ? 'متوسط الصعوبة' : 'Moderate challenge'\n    },\n    { \n      id: 'hard', \n      name: language === 'ar' ? 'صعب' : 'Hard', \n      color: 'from-red-500 to-red-600',\n      description: language === 'ar' ? 'للخبراء' : 'For experts'\n    }\n  ];\n\n  // Start AI-generated game\n  const handleStartGame = async () => {\n    if (!selectedCategory) return;\n    \n    setIsGeneratingQuestions(true);\n    \n    try {\n      // Set the selected category and difficulty in the store\n      setCategory(selectedCategory.id);\n      setDifficulty(selectedDifficulty);\n      \n      // Start the game (this will generate questions and set gameState to 'playing')\n      await startGame();\n      \n    } catch (error) {\n      console.error('Error generating questions:', error);\n      // The startGame function already handles fallbacks\n    } finally {\n      setIsGeneratingQuestions(false);\n    }\n  };\n\n  // Animation variants\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        delayChildren: 0.1,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { y: 20, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        type: \"spring\",\n        damping: 20,\n        stiffness: 300\n      }\n    }\n  };\n\n  // Render different components based on game state\n  if (gameState === 'playing') {\n    return <TriviaQuestion />;\n  }\n  \n  if (gameState === 'results') {\n    return <GameResults />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-primary/5 p-4 overflow-y-auto\" style={{ height: '100vh' }}>\n      <motion.div\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className=\"max-w-4xl mx-auto space-y-6 pb-32\"\n      >\n        {/* Header */}\n        <motion.div variants={itemVariants} className=\"flex items-center gap-4 mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setGameState('home')}\n            className=\"text-primary hover:bg-primary/10\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-primary flex items-center gap-2\">\n              <Sparkles className=\"h-6 w-6\" />\n              {language === 'ar' ? 'منطقة الأسئلة' : 'Quiz Zone'}\n            </h1>\n            <p className=\"text-sm text-muted-foreground\">\n              {language === 'ar' ? 'أسئلة ذكية مولدة بالذكاء الاصطناعي' : 'AI-Generated Smart Questions'}\n            </p>\n          </div>\n        </motion.div>\n\n        {/* Categories Section */}\n        <motion.div variants={itemVariants}>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BookOpen className=\"h-5 w-5 text-primary\" />\n                {language === 'ar' ? 'اختر الفئة' : 'Choose Category'}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoadingCategories ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n                  <span className=\"ml-2\">{language === 'ar' ? 'جاري التحميل...' : 'Loading...'}</span>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {categories.map((category) => (\n                    <motion.div\n                      key={category.id}\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                      className={`border rounded-lg overflow-hidden cursor-pointer transition-all ${\n                        selectedCategory?.id === category.id \n                          ? 'border-primary border-2 bg-primary/5' \n                          : 'border-border hover:border-primary/50'\n                      }`}\n                      onClick={() => setSelectedCategory(category)}\n                    >\n                      <div className=\"p-4\">\n                        <div className=\"flex items-center gap-3 mb-3\">\n                          <div className=\"w-12 h-12 rounded-xl bg-gradient-to-br from-primary/20 to-accent/20 flex items-center justify-center text-2xl\">\n                            {category.icon}\n                          </div>\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold\">{category.name}</h3>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {category.subcategories?.slice(0, 2).join(', ')}\n                              {category.subcategories?.length > 2 && '...'}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        {selectedCategory?.id === category.id && (\n                          <motion.div\n                            initial={{ opacity: 0, height: 0 }}\n                            animate={{ opacity: 1, height: 'auto' }}\n                            className=\"space-y-2\"\n                          >\n                            <div className=\"flex flex-wrap gap-1\">\n                              {category.subcategories?.map((sub, index) => (\n                                <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                  {sub}\n                                </Badge>\n                              ))}\n                            </div>\n                          </motion.div>\n                        )}\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Difficulty Selection */}\n        {selectedCategory && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            variants={itemVariants}\n          >\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Trophy className=\"h-5 w-5 text-primary\" />\n                  {language === 'ar' ? 'مستوى الصعوبة' : 'Difficulty Level'}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {difficultyLevels.map((level) => (\n                    <motion.div\n                      key={level.id}\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                      className={`border rounded-lg overflow-hidden cursor-pointer transition-all ${\n                        selectedDifficulty === level.id \n                          ? 'border-primary border-2 bg-primary/5' \n                          : 'border-border hover:border-primary/50'\n                      }`}\n                      onClick={() => setSelectedDifficulty(level.id)}\n                    >\n                      <div className={`h-2 bg-gradient-to-r ${level.color}`} />\n                      <div className=\"p-4 text-center\">\n                        <h3 className=\"font-semibold text-lg\">{level.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{level.description}</p>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n\n        {/* Start Game Button */}\n        {selectedCategory && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            variants={itemVariants}\n            className=\"text-center\"\n          >\n            <Button\n              onClick={handleStartGame}\n              disabled={isGeneratingQuestions}\n              className=\"w-full md:w-auto bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white border-0 h-14 px-8 text-lg\"\n            >\n              {isGeneratingQuestions ? (\n                <>\n                  <Loader2 className=\"h-5 w-5 mr-2 animate-spin\" />\n                  {language === 'ar' ? 'جاري إنشاء الأسئلة...' : 'Generating Questions...'}\n                </>\n              ) : (\n                <>\n                  <Gamepad2 className=\"h-5 w-5 mr-2\" />\n                  {language === 'ar' ? 'ابدأ اللعب' : 'Start Playing'}\n                </>\n              )}\n            </Button>\n            \n            {selectedCategory && (\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                {language === 'ar' \n                  ? `${selectedCategory.name} • ${difficultyLevels.find(d => d.id === selectedDifficulty)?.name}`\n                  : `${selectedCategory.name} • ${difficultyLevels.find(d => d.id === selectedDifficulty)?.name}`\n                }\n              </p>\n            )}\n          </motion.div>\n        )}\n\n        {/* AI Features Info */}\n        <motion.div variants={itemVariants}>\n          <Card className=\"bg-gradient-to-r from-primary/5 to-accent/5 border-primary/20\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3 mb-4\">\n                <Sparkles className=\"h-6 w-6 text-primary\" />\n                <h3 className=\"font-semibold text-primary\">\n                  {language === 'ar' ? 'مزايا الذكاء الاصطناعي' : 'AI-Powered Features'}\n                </h3>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <Star className=\"h-4 w-4 text-yellow-500\" />\n                  <span>\n                    {language === 'ar' ? 'أسئلة متنوعة ومحدثة' : 'Fresh & diverse questions'}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Globe className=\"h-4 w-4 text-blue-500\" />\n                  <span>\n                    {language === 'ar' ? 'دعم اللغة العربية والإنجليزية' : 'Arabic & English support'}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Brain className=\"h-4 w-4 text-purple-500\" />\n                  <span>\n                    {language === 'ar' ? 'مستويات صعوبة ذكية' : 'Smart difficulty levels'}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Trophy className=\"h-4 w-4 text-orange-500\" />\n                  <span>\n                    {language === 'ar' ? 'شروحات تفصيلية للإجابات' : 'Detailed explanations'}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":16257},"client/src/components/ui/BottomNavigation.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { useAuth } from '../../lib/stores/useAuth';\nimport { Button } from './button';\nimport { \n  Home, \n  Play, \n  User, \n  Coins,\n  Trophy\n} from 'lucide-react';\n\n// Bottom navigation component for mobile-first design\nexport default function BottomNavigation() {\n  const { gameState, setGameState } = useTriviaGame();\n  const { isAuthenticated } = useAuth();\n\n  const navItems = [\n    {\n      id: 'home',\n      icon: Home,\n      label: 'Home',\n      route: 'home'\n    },\n    {\n      id: 'quiz',\n      icon: Play,\n      label: 'Quiz',\n      route: 'quiz-zone'\n    },\n    {\n      id: 'leaderboard',\n      icon: Trophy,\n      label: 'Ranks',\n      route: 'leaderboard'\n    },\n    {\n      id: 'coins',\n      icon: Coins,\n      label: 'Store',\n      route: 'coin-store'\n    },\n    {\n      id: 'profile',\n      icon: User,\n      label: 'Profile',\n      route: 'profile'\n    }\n  ];\n\n  // Don't show navigation during gameplay or certain screens\n  const hideNavigation = ['playing', 'question', 'results', 'multiplayer'].includes(gameState);\n  \n  if (hideNavigation) return null;\n\n  return (\n    <motion.div\n      initial={{ y: 100 }}\n      animate={{ y: 0 }}\n      exit={{ y: 100 }}\n      className=\"fixed bottom-0 left-0 right-0 z-50 bg-card/95 backdrop-blur-lg border-t border-border\"\n    >\n      <div className=\"max-w-md mx-auto px-4 py-2\">\n        <div className=\"flex items-center justify-around\">\n          {navItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = gameState === item.route;\n            \n            return (\n              <motion.div\n                key={item.id}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setGameState(item.route as any)}\n                  className={`flex flex-col items-center gap-1 h-auto py-2 px-3 ${\n                    isActive \n                      ? 'text-primary bg-primary/10' \n                      : 'text-muted-foreground hover:text-primary hover:bg-primary/5'\n                  }`}\n                >\n                  <Icon className={`h-5 w-5 ${isActive ? 'text-primary' : ''}`} />\n                  <span className=\"text-xs font-medium\">{item.label}</span>\n                  {isActive && (\n                    <motion.div\n                      layoutId=\"activeIndicator\"\n                      className=\"absolute -top-1 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-primary rounded-full\"\n                    />\n                  )}\n                </Button>\n              </motion.div>\n            );\n          })}\n        </div>\n      </div>\n    </motion.div>\n  );\n}","size_bytes":2821},"client/src/lib/hooks/useSocket.js":{"content":"import { useEffect, useState, useRef } from 'react';\nimport { io } from 'socket.io-client';\n\n// Custom hook for Socket.io connection management  \nexport function useSocket(serverUrl = window.location.origin) {\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionError, setConnectionError] = useState(null);\n  const [onlineCount, setOnlineCount] = useState(0);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  useEffect(() => {\n    // Create socket connection\n    const newSocket = io(serverUrl, {\n      autoConnect: true,\n      reconnection: true,\n      reconnectionAttempts: maxReconnectAttempts,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      timeout: 10000,\n      forceNew: true\n    });\n\n    // Connection event handlers\n    newSocket.on('connect', () => {\n      console.log('Connected to server:', newSocket.id);\n      setIsConnected(true);\n      setConnectionError(null);\n      reconnectAttempts.current = 0;\n    });\n\n    newSocket.on('disconnect', (reason) => {\n      console.log('Disconnected from server:', reason);\n      setIsConnected(false);\n      \n      if (reason === 'io server disconnect') {\n        // Server disconnected the socket, need manual reconnection\n        newSocket.connect();\n      }\n    });\n\n    newSocket.on('connect_error', (error) => {\n      console.error('Connection error:', error);\n      setConnectionError(error.message);\n      reconnectAttempts.current++;\n      \n      if (reconnectAttempts.current >= maxReconnectAttempts) {\n        setConnectionError('Unable to connect to server. Please check your internet connection.');\n      }\n    });\n\n    newSocket.on('reconnect', (attemptNumber) => {\n      console.log('Reconnected after', attemptNumber, 'attempts');\n      setIsConnected(true);\n      setConnectionError(null);\n    });\n\n    newSocket.on('reconnect_failed', () => {\n      console.error('Failed to reconnect to server');\n      setConnectionError('Failed to reconnect to server');\n    });\n\n    // Global events\n    newSocket.on('onlineCount', (count) => {\n      setOnlineCount(count);\n    });\n\n    newSocket.on('playersOnline', (count) => {\n      setOnlineCount(count);\n    });\n\n    // Error handling\n    newSocket.on('error', (error) => {\n      console.error('Socket error:', error);\n      setConnectionError(error.message);\n    });\n\n    // Heartbeat to keep connection alive\n    const heartbeat = setInterval(() => {\n      if (newSocket.connected) {\n        newSocket.emit('ping');\n      }\n    }, 30000); // Ping every 30 seconds\n\n    newSocket.on('pong', () => {\n      // Server responded to heartbeat\n    });\n\n    setSocket(newSocket);\n\n    // Cleanup on unmount\n    return () => {\n      clearInterval(heartbeat);\n      if (newSocket) {\n        newSocket.disconnect();\n      }\n    };\n  }, [serverUrl]);\n\n  // Socket helper functions\n  const emit = (event, data) => {\n    if (socket && isConnected) {\n      socket.emit(event, data);\n      return true;\n    }\n    console.warn('Cannot emit event: socket not connected');\n    return false;\n  };\n\n  const on = (event, handler) => {\n    if (socket) {\n      socket.on(event, handler);\n      return () => socket.off(event, handler);\n    }\n    return () => {};\n  };\n\n  const off = (event, handler) => {\n    if (socket) {\n      socket.off(event, handler);\n    }\n  };\n\n  const connect = () => {\n    if (socket && !isConnected) {\n      socket.connect();\n    }\n  };\n\n  const disconnect = () => {\n    if (socket && isConnected) {\n      socket.disconnect();\n    }\n  };\n\n  return {\n    socket,\n    isConnected,\n    connectionError,\n    onlineCount,\n    emit,\n    on,\n    off,\n    connect,\n    disconnect\n  };\n}\n\n// Hook for multiplayer game state\nexport function useMultiplayerGame() {\n  const { socket, isConnected, emit, on, off } = useSocket();\n  const [gameState, setGameState] = useState('idle'); // idle, queue, room, playing, ended\n  const [room, setRoom] = useState(null);\n  const [opponents, setOpponents] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [scores, setScores] = useState({});\n  const [gameMode, setGameMode] = useState(null);\n\n  useEffect(() => {\n    if (!socket || !isConnected) return;\n\n    // Queue events\n    const unsubscribeQueueJoined = on('queueJoined', (data) => {\n      setGameState('queue');\n      console.log('Joined queue:', data);\n    });\n\n    const unsubscribeQueueLeft = on('queueLeft', () => {\n      setGameState('idle');\n      setGameMode(null);\n    });\n\n    const unsubscribeMatchFound = on('matchFound', (data) => {\n      setGameState('matchFound');\n      setOpponents(data.opponents);\n      setRoom(data.roomId);\n      console.log('Match found:', data);\n    });\n\n    // Room events\n    const unsubscribeRoomCreated = on('privateRoomCreated', (data) => {\n      setGameState('room');\n      setRoom(data.roomId);\n      console.log('Room created:', data);\n    });\n\n    const unsubscribeJoinedRoom = on('joinedPrivateRoom', (data) => {\n      setGameState('room');\n      setRoom(data.roomId);\n      setOpponents(data.players.filter(p => p.username !== 'You'));\n      console.log('Joined room:', data);\n    });\n\n    // Game events\n    const unsubscribeGameStarted = on('gameStarted', (data) => {\n      setGameState('playing');\n      setCurrentQuestion(data.firstQuestion);\n      setScores(data.teams ? { team1: 0, team2: 0 } : {});\n      console.log('Game started:', data);\n    });\n\n    const unsubscribeNextQuestion = on('nextQuestion', (data) => {\n      setCurrentQuestion(data.question);\n      setScores(data.currentScores);\n    });\n\n    const unsubscribeAnswerResult = on('answerResult', (data) => {\n      setScores(data.currentScores);\n    });\n\n    const unsubscribeGameEnded = on('gameEnded', (data) => {\n      setGameState('ended');\n      setScores(data.finalScores);\n      console.log('Game ended:', data);\n    });\n\n    // Error events\n    const unsubscribeGameLimit = on('gameLimit', (data) => {\n      console.warn('Game limit reached:', data);\n    });\n\n    const unsubscribeJoinRoomError = on('joinRoomError', (data) => {\n      console.error('Join room error:', data);\n    });\n\n    return () => {\n      unsubscribeQueueJoined();\n      unsubscribeQueueLeft();\n      unsubscribeMatchFound();\n      unsubscribeRoomCreated();\n      unsubscribeJoinedRoom();\n      unsubscribeGameStarted();\n      unsubscribeNextQuestion();\n      unsubscribeAnswerResult();\n      unsubscribeGameEnded();\n      unsubscribeGameLimit();\n      unsubscribeJoinRoomError();\n    };\n  }, [socket, isConnected, on]);\n\n  // Action functions\n  const joinQueue = (mode, playerData) => {\n    setGameMode(mode);\n    return emit('joinQueue', { gameMode: mode, playerData });\n  };\n\n  const leaveQueue = () => {\n    return emit('leaveQueue', { gameMode });\n  };\n\n  const createPrivateRoom = (mode, playerData) => {\n    setGameMode(mode);\n    return emit('createPrivateRoom', { gameMode: mode, playerData });\n  };\n\n  const joinPrivateRoom = (roomCode, playerData) => {\n    return emit('joinPrivateRoom', { roomCode, playerData });\n  };\n\n  const submitAnswer = (answerIndex) => {\n    if (room) {\n      return emit('answerSubmit', { roomId: room, answerIndex, timestamp: Date.now() });\n    }\n    return false;\n  };\n\n  const requestNextQuestion = () => {\n    if (room) {\n      return emit('requestNextQuestion', { roomId: room });\n    }\n    return false;\n  };\n\n  const leaveGame = () => {\n    setGameState('idle');\n    setRoom(null);\n    setOpponents([]);\n    setCurrentQuestion(null);\n    setScores({});\n    setGameMode(null);\n  };\n\n  return {\n    socket,\n    isConnected,\n    gameState,\n    room,\n    opponents,\n    currentQuestion,\n    scores,\n    gameMode,\n    joinQueue,\n    leaveQueue,\n    createPrivateRoom,\n    joinPrivateRoom,\n    submitAnswer,\n    requestNextQuestion,\n    leaveGame\n  };\n}","size_bytes":7844},"client/src/lib/stores/useAuth.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport interface User {\n  id: number;\n  username: string;\n  coins: number;\n  rank: string;\n  language: string;\n  premium: boolean;\n  createdAt: string;\n  updatedAt?: string;\n}\n\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n\n  // Actions\n  login: (username: string, password: string) => Promise<void>;\n  register: (username: string, password: string, language?: string) => Promise<void>;\n  logout: () => Promise<void>;\n  getCurrentUser: () => Promise<void>;\n  addCoins: (amount: number) => Promise<void>;\n  upgradeToPremium: () => Promise<void>;\n  clearError: () => void;\n}\n\nexport const useAuth = create<AuthState>()(\n  subscribeWithSelector((set, get) => ({\n    user: null,\n    isAuthenticated: false,\n    isLoading: false,\n    error: null,\n\n    login: async (username: string, password: string) => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        const response = await fetch('/api/auth/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ username, password }),\n          credentials: 'include'\n        });\n\n        const data = await response.json();\n\n        if (!response.ok) {\n          throw new Error(data.error || 'Login failed');\n        }\n\n        set({ \n          user: data.user, \n          isAuthenticated: true, \n          isLoading: false,\n          error: null \n        });\n      } catch (error) {\n        set({ \n          error: error instanceof Error ? error.message : 'Login failed',\n          isLoading: false \n        });\n        throw error;\n      }\n    },\n\n    register: async (username: string, password: string, language = 'en') => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        const response = await fetch('/api/auth/register', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ username, password, language }),\n          credentials: 'include'\n        });\n\n        const data = await response.json();\n\n        if (!response.ok) {\n          throw new Error(data.error || 'Registration failed');\n        }\n\n        set({ \n          user: data.user, \n          isAuthenticated: true, \n          isLoading: false,\n          error: null \n        });\n      } catch (error) {\n        set({ \n          error: error instanceof Error ? error.message : 'Registration failed',\n          isLoading: false \n        });\n        throw error;\n      }\n    },\n\n    logout: async () => {\n      set({ isLoading: true });\n      \n      try {\n        await fetch('/api/auth/logout', {\n          method: 'POST',\n          credentials: 'include'\n        });\n\n        set({ \n          user: null, \n          isAuthenticated: false, \n          isLoading: false,\n          error: null \n        });\n      } catch (error) {\n        set({ \n          error: error instanceof Error ? error.message : 'Logout failed',\n          isLoading: false \n        });\n      }\n    },\n\n    getCurrentUser: async () => {\n      set({ isLoading: true });\n      \n      try {\n        const response = await fetch('/api/auth/me', {\n          credentials: 'include'\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          set({ \n            user: data.user, \n            isAuthenticated: true, \n            isLoading: false,\n            error: null \n          });\n        } else {\n          set({ \n            user: null, \n            isAuthenticated: false, \n            isLoading: false,\n            error: null \n          });\n        }\n      } catch (error) {\n        set({ \n          user: null, \n          isAuthenticated: false, \n          isLoading: false,\n          error: null \n        });\n      }\n    },\n\n    addCoins: async (amount: number) => {\n      const currentUser = get().user;\n      if (!currentUser) return;\n\n      set({ isLoading: true });\n      \n      try {\n        const newAmount = currentUser.coins + amount;\n        const response = await fetch('/api/auth/add-coins', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ amount: newAmount }),\n          credentials: 'include'\n        });\n\n        const data = await response.json();\n\n        if (!response.ok) {\n          throw new Error(data.error || 'Failed to add coins');\n        }\n\n        set({ \n          user: data.user, \n          isLoading: false,\n          error: null \n        });\n      } catch (error) {\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to add coins',\n          isLoading: false \n        });\n      }\n    },\n\n    upgradeToPremium: async () => {\n      set({ isLoading: true });\n      \n      try {\n        const response = await fetch('/api/auth/upgrade-premium', {\n          method: 'POST',\n          credentials: 'include'\n        });\n\n        const data = await response.json();\n\n        if (!response.ok) {\n          throw new Error(data.error || 'Failed to upgrade to premium');\n        }\n\n        set({ \n          user: data.user, \n          isLoading: false,\n          error: null \n        });\n      } catch (error) {\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to upgrade to premium',\n          isLoading: false \n        });\n      }\n    },\n\n    clearError: () => set({ error: null })\n  }))\n);","size_bytes":5584},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from '../shared/schema';\n\nconst connectionString = process.env.DATABASE_URL;\n\nif (!connectionString) {\n  throw new Error('DATABASE_URL environment variable is not set');\n}\n\n// Create the connection\nconst client = postgres(connectionString);\nexport const db = drizzle(client, { schema });","size_bytes":390},"server/matchmaking.js":{"content":"// Multiplayer matchmaking system with Socket.io\n// Handles 1vs1 and 2vs2 game modes with queue management and room creation\n\n// Import OpenAI functionality (will create server-side version)\nasync function generateQuestions(category, difficulty, count) {\n  // This will be implemented on the server side to protect API keys\n  // For now, return fallback questions\n  const fallbackQuestions = [\n    {\n      question: \"What is the largest planet in our solar system?\",\n      options: [\"Earth\", \"Jupiter\", \"Saturn\", \"Mars\"],\n      correctAnswer: 1,\n      category: \"General Knowledge\",\n      difficulty,\n      explanation: \"Jupiter is the largest planet in our solar system.\",\n      timeLimit: 30,\n      points: difficulty === 'easy' ? 10 : difficulty === 'medium' ? 20 : 30\n    },\n    {\n      question: \"Which element has the chemical symbol 'O'?\",\n      options: [\"Gold\", \"Silver\", \"Oxygen\", \"Iron\"],\n      correctAnswer: 2,\n      category: \"Science\",\n      difficulty,\n      explanation: \"Oxygen has the chemical symbol 'O'.\",\n      timeLimit: 30,\n      points: difficulty === 'easy' ? 10 : difficulty === 'medium' ? 20 : 30\n    },\n    {\n      question: \"In which year did World War II end?\",\n      options: [\"1944\", \"1945\", \"1946\", \"1947\"],\n      correctAnswer: 1,\n      category: \"History\",\n      difficulty,\n      explanation: \"World War II ended in 1945.\",\n      timeLimit: 30,\n      points: difficulty === 'easy' ? 10 : difficulty === 'medium' ? 20 : 30\n    },\n    {\n      question: \"What is the capital of Australia?\",\n      options: [\"Sydney\", \"Melbourne\", \"Canberra\", \"Perth\"],\n      correctAnswer: 2,\n      category: \"Geography\",\n      difficulty,\n      explanation: \"Canberra is the capital city of Australia.\",\n      timeLimit: 30,\n      points: difficulty === 'easy' ? 10 : difficulty === 'medium' ? 20 : 30\n    },\n    {\n      question: \"How many players are on a basketball team on the court at one time?\",\n      options: [\"4\", \"5\", \"6\", \"7\"],\n      correctAnswer: 1,\n      category: \"Sports\",\n      difficulty,\n      explanation: \"Each basketball team has 5 players on the court at one time.\",\n      timeLimit: 30,\n      points: difficulty === 'easy' ? 10 : difficulty === 'medium' ? 20 : 30\n    }\n  ];\n\n  const result = [];\n  for (let i = 0; i < count; i++) {\n    const questionIndex = i % fallbackQuestions.length;\n    result.push({\n      ...fallbackQuestions[questionIndex],\n      id: `mp_${i}`,\n    });\n  }\n\n  return result;\n}\n\nclass MatchmakingService {\n  constructor() {\n    // Queue system for different game modes\n    this.queues = {\n      '1vs1': [],\n      '2vs2': []\n    };\n    \n    // Active game rooms\n    this.rooms = new Map();\n    \n    // Player game limits tracking\n    this.playerLimits = new Map();\n    \n    // Room code system for friend invites\n    this.inviteCodes = new Map();\n  }\n\n  // Join matchmaking queue\n  joinQueue(socket, gameMode, playerData) {\n    const player = {\n      id: socket.id,\n      socket: socket,\n      username: playerData.username || `Player${socket.id.slice(0, 6)}`,\n      rank: playerData.rank || 'Bronze',\n      coins: playerData.coins || 0,\n      premium: playerData.premium || false,\n      joinedAt: Date.now()\n    };\n\n    // Check daily game limits (5 free games, unlimited premium)\n    if (!this.checkGameLimit(player)) {\n      socket.emit('gameLimit', {\n        message: 'Daily game limit reached. Upgrade to premium for unlimited games.',\n        gamesPlayed: this.getGamesPlayedToday(player.id),\n        limit: player.premium ? 'unlimited' : 5\n      });\n      return false;\n    }\n\n    // Add to appropriate queue\n    this.queues[gameMode].push(player);\n    \n    console.log(`Player ${player.username} joined ${gameMode} queue. Queue size: ${this.queues[gameMode].length}`);\n    \n    // Notify player they're in queue\n    socket.emit('queueJoined', {\n      gameMode,\n      position: this.queues[gameMode].length,\n      estimatedWait: this.calculateWaitTime(gameMode)\n    });\n\n    // Try to create a match\n    this.tryCreateMatch(gameMode);\n    \n    return true;\n  }\n\n  // Leave matchmaking queue\n  leaveQueue(socket, gameMode) {\n    if (this.queues[gameMode]) {\n      this.queues[gameMode] = this.queues[gameMode].filter(p => p.id !== socket.id);\n      socket.emit('queueLeft', { gameMode });\n      console.log(`Player ${socket.id} left ${gameMode} queue`);\n    }\n  }\n\n  // Create game room with invite code\n  createPrivateRoom(socket, gameMode, playerData) {\n    const roomCode = this.generateRoomCode();\n    const roomId = `private_${roomCode}`;\n    \n    const player = {\n      id: socket.id,\n      socket: socket,\n      username: playerData.username || `Player${socket.id.slice(0, 6)}`,\n      rank: playerData.rank || 'Bronze',\n      coins: playerData.coins || 0,\n      premium: playerData.premium || false,\n      isHost: true\n    };\n\n    const room = {\n      id: roomId,\n      code: roomCode,\n      gameMode,\n      players: [player],\n      maxPlayers: gameMode === '1vs1' ? 2 : 4,\n      isPrivate: true,\n      createdAt: Date.now(),\n      status: 'waiting'\n    };\n\n    this.rooms.set(roomId, room);\n    this.inviteCodes.set(roomCode, roomId);\n    \n    socket.join(roomId);\n    socket.emit('privateRoomCreated', {\n      roomCode,\n      roomId,\n      gameMode,\n      maxPlayers: room.maxPlayers\n    });\n\n    console.log(`Private room created: ${roomCode} for ${gameMode}`);\n    return roomCode;\n  }\n\n  // Join game room with invite code\n  joinPrivateRoom(socket, roomCode, playerData) {\n    const roomId = this.inviteCodes.get(roomCode);\n    if (!roomId) {\n      socket.emit('joinRoomError', { message: 'Invalid room code' });\n      return false;\n    }\n\n    const room = this.rooms.get(roomId);\n    if (!room) {\n      socket.emit('joinRoomError', { message: 'Room not found' });\n      return false;\n    }\n\n    if (room.players.length >= room.maxPlayers) {\n      socket.emit('joinRoomError', { message: 'Room is full' });\n      return false;\n    }\n\n    if (room.status !== 'waiting') {\n      socket.emit('joinRoomError', { message: 'Game already in progress' });\n      return false;\n    }\n\n    const player = {\n      id: socket.id,\n      socket: socket,\n      username: playerData.username || `Player${socket.id.slice(0, 6)}`,\n      rank: playerData.rank || 'Bronze',\n      coins: playerData.coins || 0,\n      premium: playerData.premium || false,\n      isHost: false\n    };\n\n    room.players.push(player);\n    socket.join(roomId);\n\n    // Notify all players in room\n    socket.to(roomId).emit('playerJoined', {\n      player: {\n        username: player.username,\n        rank: player.rank,\n        premium: player.premium\n      },\n      playerCount: room.players.length,\n      maxPlayers: room.maxPlayers\n    });\n\n    socket.emit('joinedPrivateRoom', {\n      roomId,\n      gameMode: room.gameMode,\n      players: room.players.map(p => ({\n        username: p.username,\n        rank: p.rank,\n        premium: p.premium,\n        isHost: p.isHost\n      })),\n      playerCount: room.players.length,\n      maxPlayers: room.maxPlayers\n    });\n\n    // Start game if room is full\n    if (room.players.length === room.maxPlayers) {\n      this.startGame(roomId);\n    }\n\n    return true;\n  }\n\n  // Try to create a match from queue\n  async tryCreateMatch(gameMode) {\n    const requiredPlayers = gameMode === '1vs1' ? 2 : 4;\n    \n    if (this.queues[gameMode].length >= requiredPlayers) {\n      // Get players for the match\n      const players = this.queues[gameMode].splice(0, requiredPlayers);\n      \n      // Create room\n      const roomId = `match_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`;\n      const room = {\n        id: roomId,\n        gameMode,\n        players,\n        maxPlayers: requiredPlayers,\n        isPrivate: false,\n        createdAt: Date.now(),\n        status: 'starting',\n        currentQuestion: 0,\n        questions: [],\n        scores: gameMode === '1vs1' \n          ? { [players[0].id]: 0, [players[1].id]: 0 }\n          : { team1: 0, team2: 0 },\n        teams: gameMode === '2vs2' \n          ? { team1: [players[0], players[1]], team2: [players[2], players[3]] }\n          : null\n      };\n\n      this.rooms.set(roomId, room);\n\n      // Add players to room\n      players.forEach(player => {\n        player.socket.join(roomId);\n      });\n\n      // Notify players of match found\n      players.forEach(player => {\n        player.socket.emit('matchFound', {\n          roomId,\n          gameMode,\n          opponents: players\n            .filter(p => p.id !== player.id)\n            .map(p => ({\n              username: p.username,\n              rank: p.rank,\n              premium: p.premium\n            })),\n          teams: room.teams ? this.getPlayerTeam(player.id, room.teams) : null\n        });\n      });\n\n      console.log(`Match created: ${roomId} for ${gameMode} with ${players.length} players`);\n      \n      // Start the game after a short delay\n      setTimeout(() => {\n        this.startGame(roomId);\n      }, 3000);\n    }\n  }\n\n  // Start game in room\n  async startGame(roomId) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;\n\n    try {\n      // Generate questions directly without HTTP request\n      const questionCount = room.gameMode === '1vs1' ? 10 : 15;\n      \n      // Use direct fallback questions for multiplayer games\n      // This ensures quick game start without API delays\n      const questions = await generateQuestions('general', 'medium', questionCount);\n      \n      room.questions = questions;\n      room.status = 'playing';\n      room.gameStartTime = Date.now();\n      room.currentQuestionStartTime = Date.now();\n\n      // Increment game count for players\n      room.players.forEach(player => {\n        this.incrementGameCount(player.id);\n      });\n\n      // Send game start event to all players\n      room.players.forEach(player => {\n        player.socket.emit('gameStarted', {\n          roomId,\n          gameMode: room.gameMode,\n          totalQuestions: questions.length,\n          teams: room.teams,\n          currentQuestion: questions[0],\n          questionIndex: 0,\n          players: room.players.map(p => ({\n            id: p.id,\n            username: p.username,\n            rank: p.rank,\n            premium: p.premium\n          }))\n        });\n      });\n\n      console.log(`Game started in room: ${roomId}`);\n      \n      // Start question timer\n      this.startQuestionTimer(roomId);\n      \n    } catch (error) {\n      console.error('Error starting game:', error);\n      room.players.forEach(player => {\n        player.socket.emit('gameError', { message: 'Failed to start game' });\n      });\n    }\n  }\n\n  // Handle answer submission\n  handleAnswerSubmission(socket, roomId, answerData) {\n    const room = this.rooms.get(roomId);\n    if (!room || room.status !== 'playing') return;\n\n    const player = room.players.find(p => p.id === socket.id);\n    if (!player) return;\n\n    const currentQuestion = room.questions[room.currentQuestion];\n    if (!currentQuestion) return;\n\n    // Calculate score\n    const timeBonus = Math.max(0, 30 - (Date.now() - room.currentQuestionStartTime) / 1000);\n    const isCorrect = answerData.answerIndex === currentQuestion.correctAnswer;\n    const points = isCorrect ? Math.floor(10 + timeBonus) : -5;\n\n    // Update scores\n    if (room.gameMode === '1vs1') {\n      room.scores[player.id] = (room.scores[player.id] || 0) + points;\n    } else {\n      // 2vs2 mode\n      const team = this.getPlayerTeam(player.id, room.teams);\n      if (team) {\n        room.scores[team] = (room.scores[team] || 0) + points;\n      }\n    }\n\n    // Store player answer\n    if (!room.answers) room.answers = {};\n    if (!room.answers[room.currentQuestion]) room.answers[room.currentQuestion] = {};\n    room.answers[room.currentQuestion][player.id] = {\n      answerIndex: answerData.answerIndex,\n      isCorrect,\n      points,\n      submittedAt: Date.now()\n    };\n\n    // Notify player of result\n    socket.emit('answerResult', {\n      isCorrect,\n      points,\n      correctAnswer: currentQuestion.correctAnswer,\n      explanation: currentQuestion.explanation,\n      currentScores: room.scores\n    });\n\n    // Check if all players have answered\n    const expectedAnswers = room.players.length;\n    const actualAnswers = Object.keys(room.answers[room.currentQuestion] || {}).length;\n    \n    if (actualAnswers === expectedAnswers) {\n      this.nextQuestion(roomId);\n    }\n  }\n\n  // Move to next question or end game\n  nextQuestion(roomId) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;\n\n    room.currentQuestion++;\n    \n    if (room.currentQuestion >= room.questions.length) {\n      this.endGame(roomId);\n      return;\n    }\n\n    // Send next question\n    const nextQuestion = room.questions[room.currentQuestion];\n    room.currentQuestionStartTime = Date.now();\n\n    room.players.forEach(player => {\n      player.socket.emit('nextQuestion', {\n        questionNumber: room.currentQuestion + 1,\n        totalQuestions: room.questions.length,\n        question: nextQuestion,\n        currentScores: room.scores\n      });\n    });\n\n    // Start timer for next question\n    this.startQuestionTimer(roomId);\n  }\n\n  // End game and show results\n  endGame(roomId) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;\n\n    room.status = 'ended';\n    \n    // Calculate final results\n    let winner;\n    if (room.gameMode === '1vs1') {\n      const [player1, player2] = room.players;\n      const score1 = room.scores[player1.id] || 0;\n      const score2 = room.scores[player2.id] || 0;\n      \n      if (score1 > score2) {\n        winner = { type: 'player', data: player1 };\n      } else if (score2 > score1) {\n        winner = { type: 'player', data: player2 };\n      } else {\n        winner = { type: 'tie' };\n      }\n    } else {\n      // 2vs2 mode\n      const team1Score = room.scores.team1 || 0;\n      const team2Score = room.scores.team2 || 0;\n      \n      if (team1Score > team2Score) {\n        winner = { type: 'team', data: 'team1' };\n      } else if (team2Score > team1Score) {\n        winner = { type: 'team', data: 'team2' };\n      } else {\n        winner = { type: 'tie' };\n      }\n    }\n\n    // Send results to all players\n    room.players.forEach(player => {\n      player.socket.emit('gameEnded', {\n        winner,\n        finalScores: room.scores,\n        playerStats: this.calculatePlayerStats(player.id, room),\n        gameMode: room.gameMode,\n        teams: room.teams\n      });\n      \n      // Leave room\n      player.socket.leave(roomId);\n    });\n\n    console.log(`Game ended in room: ${roomId}`, winner);\n    \n    // Clean up room after delay\n    setTimeout(() => {\n      this.rooms.delete(roomId);\n      if (room.code) {\n        this.inviteCodes.delete(room.code);\n      }\n    }, 30000);\n  }\n\n  // Start question timer\n  startQuestionTimer(roomId) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;\n\n    // Clear any existing timer\n    if (room.questionTimer) {\n      clearTimeout(room.questionTimer);\n    }\n\n    room.questionTimer = setTimeout(() => {\n      // Time's up - move to next question\n      room.players.forEach(player => {\n        player.socket.emit('timeUp', {\n          correctAnswer: room.questions[room.currentQuestion].correctAnswer,\n          currentScores: room.scores\n        });\n      });\n      \n      setTimeout(() => {\n        this.nextQuestion(roomId);\n      }, 2000);\n    }, 30000); // 30 seconds per question\n  }\n\n  // Handle player disconnect\n  handleDisconnect(socket) {\n    // Remove from all queues\n    Object.keys(this.queues).forEach(gameMode => {\n      this.queues[gameMode] = this.queues[gameMode].filter(p => p.id !== socket.id);\n    });\n\n    // Handle room disconnections\n    this.rooms.forEach((room, roomId) => {\n      const playerIndex = room.players.findIndex(p => p.id === socket.id);\n      if (playerIndex !== -1) {\n        const player = room.players[playerIndex];\n        \n        if (room.status === 'waiting') {\n          // Remove player from waiting room\n          room.players.splice(playerIndex, 1);\n          \n          // Notify other players\n          room.players.forEach(p => {\n            p.socket.emit('playerLeft', {\n              username: player.username,\n              playerCount: room.players.length,\n              maxPlayers: room.maxPlayers\n            });\n          });\n          \n          // Clean up empty rooms\n          if (room.players.length === 0) {\n            this.rooms.delete(roomId);\n            if (room.code) {\n              this.inviteCodes.delete(room.code);\n            }\n          }\n        } else if (room.status === 'playing') {\n          // Player disconnected during game\n          room.players.forEach(p => {\n            if (p.id !== socket.id) {\n              p.socket.emit('playerDisconnected', {\n                username: player.username,\n                canContinue: room.players.length > 2\n              });\n            }\n          });\n          \n          // End game if not enough players\n          if (room.players.length <= 1) {\n            this.endGame(roomId);\n          }\n        }\n      }\n    });\n\n    console.log(`Player ${socket.id} disconnected`);\n  }\n\n  // Utility functions\n  generateRoomCode() {\n    return Math.random().toString(36).substring(2, 8).toUpperCase();\n  }\n\n  calculateWaitTime(gameMode) {\n    const queueLength = this.queues[gameMode].length;\n    const requiredPlayers = gameMode === '1vs1' ? 2 : 4;\n    return Math.max(0, (requiredPlayers - queueLength) * 15); // Estimate 15s per missing player\n  }\n\n  getPlayerTeam(playerId, teams) {\n    if (!teams) return null;\n    \n    if (teams.team1.some(p => p.id === playerId)) return 'team1';\n    if (teams.team2.some(p => p.id === playerId)) return 'team2';\n    return null;\n  }\n\n  calculatePlayerStats(playerId, room) {\n    let correctAnswers = 0;\n    let totalAnswers = 0;\n    let totalPoints = 0;\n\n    if (room.answers) {\n      Object.values(room.answers).forEach(questionAnswers => {\n        if (questionAnswers[playerId]) {\n          totalAnswers++;\n          if (questionAnswers[playerId].isCorrect) {\n            correctAnswers++;\n          }\n          totalPoints += questionAnswers[playerId].points;\n        }\n      });\n    }\n\n    return {\n      correctAnswers,\n      totalAnswers,\n      accuracy: totalAnswers > 0 ? Math.round((correctAnswers / totalAnswers) * 100) : 0,\n      totalPoints\n    };\n  }\n\n  // Game limit management\n  checkGameLimit(player) {\n    if (player.premium) return true; // Unlimited for premium\n    \n    const today = new Date().toDateString();\n    const playerKey = `${player.id}_${today}`;\n    const gamesPlayed = this.playerLimits.get(playerKey) || 0;\n    \n    return gamesPlayed < 5;\n  }\n\n  getGamesPlayedToday(playerId) {\n    const today = new Date().toDateString();\n    const playerKey = `${playerId}_${today}`;\n    return this.playerLimits.get(playerKey) || 0;\n  }\n\n  incrementGameCount(playerId) {\n    const today = new Date().toDateString();\n    const playerKey = `${playerId}_${today}`;\n    const current = this.playerLimits.get(playerKey) || 0;\n    this.playerLimits.set(playerKey, current + 1);\n  }\n\n  // Get current room info\n  getRoomInfo(roomId) {\n    return this.rooms.get(roomId);\n  }\n\n  // Get queue status\n  getQueueStatus() {\n    return {\n      '1vs1': this.queues['1vs1'].length,\n      '2vs2': this.queues['2vs2'].length,\n      activeRooms: this.rooms.size\n    };\n  }\n}\n\nexport default MatchmakingService;","size_bytes":19340},"server/questions.js":{"content":"// AI Question Generation with OpenAI integration\n// Supports multilingual generation (English/Arabic) with predefined categories\n\nimport OpenAI from 'openai';\nimport { errorLogger, ErrorCategory } from './utils/errorLogger.js';\n\n// Initialize OpenAI client - the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY\n});\n\n// Predefined categories with subcategories\nexport const QUESTION_CATEGORIES = {\n  'general-knowledge': {\n    name: {\n      en: 'General Knowledge',\n      ar: 'المعرفة العامة'\n    },\n    icon: '🧠',\n    subcategories: {\n      en: ['Basic Facts', 'World Knowledge', 'Common Sense', 'Trivia'],\n      ar: ['الحقائق الأساسية', 'المعرفة العالمية', 'الحس العام', 'معلومات عامة']\n    }\n  },\n  'sports': {\n    name: {\n      en: 'Sports',\n      ar: 'الرياضة'\n    },\n    icon: '⚽',\n    subcategories: {\n      en: ['Football', 'Basketball', 'Olympics', 'Tennis', 'Soccer'],\n      ar: ['كرة القدم الأمريكية', 'كرة السلة', 'الألعاب الأولمبية', 'التنس', 'كرة القدم']\n    }\n  },\n  'news': {\n    name: {\n      en: 'Current News',\n      ar: 'الأخبار الحالية'\n    },\n    icon: '📰',\n    subcategories: {\n      en: ['World Events', 'Politics', 'Technology News', 'Economy'],\n      ar: ['الأحداث العالمية', 'السياسة', 'أخبار التكنولوجيا', 'الاقتصاد']\n    }\n  },\n  'music': {\n    name: {\n      en: 'Music',\n      ar: 'الموسيقى'\n    },\n    icon: '🎵',\n    subcategories: {\n      en: ['Pop Music', 'Classical', 'Rock', 'Hip Hop', 'Country'],\n      ar: ['الموسيقى الشعبية', 'الكلاسيكية', 'الروك', 'الهيب هوب', 'الريفية']\n    }\n  },\n  'history': {\n    name: {\n      en: 'History',\n      ar: 'التاريخ'\n    },\n    icon: '🏛️',\n    subcategories: {\n      en: ['Ancient History', 'World Wars', 'Medieval Times', 'Modern History'],\n      ar: ['التاريخ القديم', 'الحروب العالمية', 'العصور الوسطى', 'التاريخ الحديث']\n    }\n  },\n  'science': {\n    name: {\n      en: 'Science',\n      ar: 'العلوم'\n    },\n    icon: '🔬',\n    subcategories: {\n      en: ['Physics', 'Chemistry', 'Biology', 'Astronomy', 'Medicine'],\n      ar: ['الفيزياء', 'الكيمياء', 'علم الأحياء', 'علم الفلك', 'الطب']\n    }\n  },\n  'movies': {\n    name: {\n      en: 'Movies & Entertainment',\n      ar: 'الأفلام والترفيه'\n    },\n    icon: '🎬',\n    subcategories: {\n      en: ['Hollywood', 'TV Shows', 'Celebrities', 'Animation', 'Classics'],\n      ar: ['هوليوود', 'البرامج التلفزيونية', 'المشاهير', 'الرسوم المتحركة', 'الكلاسيكيات']\n    }\n  }\n};\n\n// Difficulty levels\nexport const DIFFICULTY_LEVELS = ['easy', 'medium', 'hard'];\n\n// Track used fallback questions per session to avoid duplicates\nconst usedFallbackQuestions = new Map();\n\n// Generate AI questions using OpenAI GPT-5\nexport async function generateAIQuestions(category, difficulty = 'medium', count = 5, language = 'en', excludeQuestions = [], sessionId = null) {\n  if (!process.env.OPENAI_API_KEY) {\n    errorLogger.logWarning(ErrorCategory.AI_GENERATION, 'OpenAI API key not found, using fallback questions');\n    return generateFallbackQuestions(category, difficulty, count, language, sessionId);\n  }\n\n  try {\n    const categoryInfo = QUESTION_CATEGORIES[category];\n    if (!categoryInfo) {\n      throw new Error(`Invalid category: ${category}`);\n    }\n\n    const categoryName = categoryInfo.name[language] || categoryInfo.name.en;\n    const subcategories = categoryInfo.subcategories[language] || categoryInfo.subcategories.en;\n\n    // Create stronger exclusion list for the prompt\n    const exclusionPrompt = excludeQuestions && excludeQuestions.length > 0 ? \n      (language === 'ar' ? \n        `\\n\\nمهم جداً: لا تكرر أي من هذه الأسئلة أو أسئلة مشابهة لها. يجب أن تكون الأسئلة الجديدة مختلفة تماماً:\\n${excludeQuestions.slice(-15).map(q => `- ${q}`).join('\\n')}\\n\\nأنشئ أسئلة جديدة ومختلفة تماماً عن الأسئلة أعلاه.` :\n        `\\n\\nVERY IMPORTANT: DO NOT repeat any of these questions or create similar variations. The new questions must be completely different:\\n${excludeQuestions.slice(-15).map(q => `- ${q}`).join('\\n')}\\n\\nGenerate completely NEW and DIFFERENT questions from the ones above.`) : '';\n\n    // Create multilingual prompt\n    const isArabic = language === 'ar';\n    const prompt = isArabic ? \n      `قم بإنشاء ${count} أسئلة ثقافية باللغة العربية لفئة \"${categoryName}\" بمستوى صعوبة \"${difficulty}\".\n\nالمتطلبات:\n- اُرجع بتنسيق JSON صالح فقط\n- كل سؤال يجب أن يحتوي على: question, options (4 خيارات), correctAnswer (فهرس 0-3), category, difficulty, explanation\n- الأسئلة يجب أن تكون مشوقة وتعليمية\n- تجنب المواضيع الغامضة جداً أو المثيرة للجدل\n- تأكد من أن الإجابة الصحيحة ليست دائماً في نفس الموضع\n- اشمل مواضيع متنوعة ضمن الفئة\n- يجب أن تكون جميع النصوص باللغة العربية\n\nمثال على التنسيق:\n{\n  \"questions\": [\n    {\n      \"question\": \"ما هو أكبر كوكب في نظامنا الشمسي؟\",\n      \"options\": [\"الأرض\", \"المشتري\", \"زحل\", \"المريخ\"],\n      \"correctAnswer\": 1,\n      \"category\": \"العلوم\",\n      \"difficulty\": \"سهل\",\n      \"explanation\": \"المشتري هو أكبر كوكب في نظامنا الشمسي.\"\n    }\n  ]\n}\n\nالفئة: ${categoryName}\nمستوى الصعوبة: ${difficulty}\nعدد الأسئلة: ${count}\nالفئات الفرعية المقترحة: ${subcategories.join(', ')}${exclusionPrompt}` :\n\n      `Generate ${count} UNIQUE and DIVERSE trivia questions in English for category \"${categoryName}\" with difficulty \"${difficulty}\".\n\nRequirements:\n- Return valid JSON format only\n- Each question must have: question, options (4 choices), correctAnswer (0-3 index), category, difficulty, explanation\n- Questions MUST be completely different from each other - no similar topics or variations\n- Cover DIFFERENT aspects and subcategories within \"${categoryName}\"\n- Questions should be engaging and educational\n- Avoid very obscure or controversial topics\n- Randomize the position of correct answers (not always the same index)\n- Include diverse topics within the category\n- All text must be in English\n\nExample format:\n{\n  \"questions\": [\n    {\n      \"question\": \"What is the largest planet in our solar system?\",\n      \"options\": [\"Earth\", \"Jupiter\", \"Saturn\", \"Mars\"],\n      \"correctAnswer\": 1,\n      \"category\": \"Science\",\n      \"difficulty\": \"easy\",\n      \"explanation\": \"Jupiter is the largest planet in our solar system, with a mass greater than all other planets combined.\"\n    }\n  ]\n}\n\nCategory: ${categoryName}\nDifficulty: ${difficulty}\nCount: ${count}\nSuggested subcategories: ${subcategories.join(', ')}${exclusionPrompt}`;\n\n    // Add timeout to OpenAI API call\n    const controller = new AbortController();\n    const timeout = setTimeout(() => controller.abort(), 8000); // 8 second timeout\n    \n    const response = await openai.chat.completions.create({\n        model: 'gpt-5', // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n        messages: [\n          {\n            role: 'system',\n            content: isArabic ? \n              'أنت مولد أسئلة ثقافية متنوع ومبدع. مهمتك هي إنشاء أسئلة فريدة ومختلفة في كل مرة. تجنب تكرار المواضيع أو الأسئلة المشابهة. اُرجع دائماً بتنسيق JSON صالح يحتوي على مجموعة من الأسئلة الثقافية المتنوعة باللغة العربية.' :\n              'You are a creative and diverse trivia question generator. Your task is to create unique and different questions each time. Avoid repeating topics or similar questions. Always respond with valid JSON format containing an array of diverse trivia questions in English. Each batch of questions should explore different aspects of the category.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 1, // GPT-5 only supports default temperature\n        max_completion_tokens: 4000\n    }, {\n      signal: controller.signal\n    });\n    \n    clearTimeout(timeout);\n    \n    const content = response.choices[0].message.content;\n    console.log('OpenAI Response:', content);\n\n    // Parse the JSON response\n    const data = JSON.parse(content);\n    let questions = data.questions || data;\n\n    // Ensure we have an array\n    if (!Array.isArray(questions)) {\n      questions = [questions];\n    }\n\n    // Validate and format questions\n    const validatedQuestions = questions.slice(0, count).map((q, index) => ({\n      id: `ai_${category}_${Date.now()}_${index}`,\n      question: q.question,\n      options: q.options || [],\n      correctAnswer: typeof q.correctAnswer === 'number' ? q.correctAnswer : 0,\n      category: q.category || categoryName,\n      difficulty: q.difficulty || difficulty,\n      explanation: q.explanation || '',\n      timeLimit: 30,\n      points: difficulty === 'easy' ? 10 : difficulty === 'medium' ? 20 : 30,\n      language: language,\n      source: 'ai-generated'\n    }));\n\n    // Ensure we have enough questions\n    if (validatedQuestions.length < count) {\n      console.warn(`Only generated ${validatedQuestions.length} of ${count} requested questions`);\n      // Fill with fallback questions if needed\n      const fallbackQuestions = generateFallbackQuestions(category, difficulty, count - validatedQuestions.length, language, sessionId);\n      validatedQuestions.push(...fallbackQuestions);\n    }\n\n    console.log(`Successfully generated ${validatedQuestions.length} AI questions for ${category} in ${language}`);\n    return validatedQuestions.slice(0, count);\n\n  } catch (error) {\n    errorLogger.logError(\n      ErrorCategory.AI_GENERATION,\n      'Failed to generate AI questions',\n      error,\n      { category, difficulty, count, language, sessionId }\n    );\n    console.log('Falling back to predefined questions');\n    return generateFallbackQuestions(category, difficulty, count, language, sessionId);\n  }\n}\n\n// Fallback questions for when AI generation fails\nexport function generateFallbackQuestions(category, difficulty = 'medium', count = 5, language = 'en', sessionId = null) {\n  // Track used questions per session to avoid duplicates\n  const sessionKey = sessionId || 'default';\n  if (!usedFallbackQuestions.has(sessionKey)) {\n    usedFallbackQuestions.set(sessionKey, new Set());\n  }\n  const usedQuestions = usedFallbackQuestions.get(sessionKey);\n  \n  // Clear used questions if it gets too large (reset after 30 questions)\n  if (usedQuestions.size > 30) {\n    usedQuestions.clear();\n  }\n  const questionBank = {\n    en: {\n      'general-knowledge': [\n        {\n          question: \"What is the largest planet in our solar system?\",\n          options: [\"Earth\", \"Jupiter\", \"Saturn\", \"Mars\"],\n          correctAnswer: 1,\n          explanation: \"Jupiter is the largest planet in our solar system.\"\n        },\n        {\n          question: \"Which element has the chemical symbol 'O'?\",\n          options: [\"Gold\", \"Silver\", \"Oxygen\", \"Iron\"],\n          correctAnswer: 2,\n          explanation: \"Oxygen has the chemical symbol 'O'.\"\n        },\n        {\n          question: \"What is the capital of Australia?\",\n          options: [\"Sydney\", \"Melbourne\", \"Canberra\", \"Perth\"],\n          correctAnswer: 2,\n          explanation: \"Canberra is the capital city of Australia.\"\n        },\n        {\n          question: \"How many continents are there?\",\n          options: [\"5\", \"6\", \"7\", \"8\"],\n          correctAnswer: 2,\n          explanation: \"There are 7 continents: Africa, Antarctica, Asia, Europe, North America, Oceania, and South America.\"\n        },\n        {\n          question: \"What is the smallest country in the world?\",\n          options: [\"Monaco\", \"Vatican City\", \"San Marino\", \"Liechtenstein\"],\n          correctAnswer: 1,\n          explanation: \"Vatican City is the smallest country in the world at 0.44 square kilometers.\"\n        },\n        {\n          question: \"Which ocean is the largest?\",\n          options: [\"Atlantic\", \"Indian\", \"Pacific\", \"Arctic\"],\n          correctAnswer: 2,\n          explanation: \"The Pacific Ocean is the largest ocean, covering about 63 million square miles.\"\n        },\n        {\n          question: \"What year did World War II end?\",\n          options: [\"1943\", \"1944\", \"1945\", \"1946\"],\n          correctAnswer: 2,\n          explanation: \"World War II ended in 1945.\"\n        },\n        {\n          question: \"Who painted the Mona Lisa?\",\n          options: [\"Michelangelo\", \"Leonardo da Vinci\", \"Raphael\", \"Donatello\"],\n          correctAnswer: 1,\n          explanation: \"Leonardo da Vinci painted the Mona Lisa.\"\n        },\n        {\n          question: \"What is the hardest natural substance on Earth?\",\n          options: [\"Gold\", \"Iron\", \"Diamond\", \"Quartz\"],\n          correctAnswer: 2,\n          explanation: \"Diamond is the hardest natural substance on Earth.\"\n        },\n        {\n          question: \"Which planet is known as the Red Planet?\",\n          options: [\"Venus\", \"Mars\", \"Jupiter\", \"Mercury\"],\n          correctAnswer: 1,\n          explanation: \"Mars is known as the Red Planet due to iron oxide on its surface.\"\n        }\n      ],\n      'sports': [\n        {\n          question: \"How many players are on a basketball team on the court at one time?\",\n          options: [\"4\", \"5\", \"6\", \"7\"],\n          correctAnswer: 1,\n          explanation: \"Each basketball team has 5 players on the court at one time.\"\n        },\n        {\n          question: \"In which sport would you perform a slam dunk?\",\n          options: [\"Tennis\", \"Basketball\", \"Soccer\", \"Swimming\"],\n          correctAnswer: 1,\n          explanation: \"A slam dunk is a basketball move where a player jumps and scores by putting the ball directly through the hoop.\"\n        }\n      ],\n      'science': [\n        {\n          question: \"What is the speed of light in a vacuum?\",\n          options: [\"299,792,458 m/s\", \"300,000,000 m/s\", \"186,000 mph\", \"3×10^8 m/s\"],\n          correctAnswer: 0,\n          explanation: \"The exact speed of light in a vacuum is 299,792,458 meters per second.\"\n        }\n      ]\n    },\n    ar: {\n      'general-knowledge': [\n        {\n          question: \"ما هو أكبر كوكب في نظامنا الشمسي؟\",\n          options: [\"الأرض\", \"المشتري\", \"زحل\", \"المريخ\"],\n          correctAnswer: 1,\n          explanation: \"المشتري هو أكبر كوكب في نظامنا الشمسي.\"\n        },\n        {\n          question: \"ما هو الرمز الكيميائي للأكسجين؟\",\n          options: [\"الذهب\", \"الفضة\", \"الأكسجين\", \"الحديد\"],\n          correctAnswer: 2,\n          explanation: \"الرمز الكيميائي للأكسجين هو O.\"\n        },\n        {\n          question: \"ما هي عاصمة أستراليا؟\",\n          options: [\"سيدني\", \"ملبورن\", \"كانبرا\", \"بيرث\"],\n          correctAnswer: 2,\n          explanation: \"كانبرا هي عاصمة أستراليا.\"\n        }\n      ],\n      'sports': [\n        {\n          question: \"كم عدد اللاعبين في فريق كرة السلة على الملعب في نفس الوقت؟\",\n          options: [\"4\", \"5\", \"6\", \"7\"],\n          correctAnswer: 1,\n          explanation: \"كل فريق كرة سلة يضم 5 لاعبين على الملعب في نفس الوقت.\"\n        }\n      ],\n      'science': [\n        {\n          question: \"ما هي سرعة الضوء في الفراغ؟\",\n          options: [\"299,792,458 م/ث\", \"300,000,000 م/ث\", \"186,000 ميل/ساعة\", \"3×10^8 م/ث\"],\n          correctAnswer: 0,\n          explanation: \"السرعة الدقيقة للضوء في الفراغ هي 299,792,458 متر في الثانية.\"\n        }\n      ]\n    }\n  };\n\n  // Get language-specific questions\n  const langQuestions = questionBank[language] || questionBank.en;\n  const categoryQuestions = langQuestions[category] || langQuestions['general-knowledge'];\n\n  // Generate required number of questions\n  const result = [];\n  \n  // Filter out already used questions\n  let availableQuestions = categoryQuestions.filter(q => !usedQuestions.has(q.question));\n  \n  // If not enough unused questions, reset and use all\n  if (availableQuestions.length < count) {\n    usedQuestions.clear();\n    availableQuestions = [...categoryQuestions];\n  }\n  \n  for (let i = 0; i < count && availableQuestions.length > 0; i++) {\n    // Pick a random question from available ones\n    const randomIndex = Math.floor(Math.random() * availableQuestions.length);\n    const baseQuestion = availableQuestions.splice(randomIndex, 1)[0];\n    \n    // Mark question as used\n    usedQuestions.add(baseQuestion.question);\n    \n    // Always shuffle options for variety\n    const shuffledOptions = [...baseQuestion.options].sort(() => Math.random() - 0.5);\n    const newCorrectIndex = shuffledOptions.indexOf(baseQuestion.options[baseQuestion.correctAnswer]);\n    \n    result.push({\n      id: `fallback_${category}_${language}_${i}_${Date.now()}`,\n      question: baseQuestion.question,\n      options: shuffledOptions,\n      correctAnswer: newCorrectIndex,\n      category: QUESTION_CATEGORIES[category]?.name[language] || category,\n      difficulty: difficulty,\n      explanation: baseQuestion.explanation,\n      timeLimit: 30,\n      points: difficulty === 'easy' ? 10 : difficulty === 'medium' ? 20 : 30,\n      language: language,\n      source: 'fallback'\n    });\n  }\n\n  return result;\n}\n\n// Get all categories for display in frontend\nexport function getCategories(language = 'en') {\n  return Object.entries(QUESTION_CATEGORIES).map(([key, value]) => ({\n    id: key,\n    name: value.name[language] || value.name.en,\n    icon: value.icon,\n    subcategories: value.subcategories[language] || value.subcategories.en\n  }));\n}\n\n// Validate question format\nexport function validateQuestion(question) {\n  const required = ['question', 'options', 'correctAnswer', 'category', 'difficulty'];\n  const missing = required.filter(field => !(field in question));\n  \n  if (missing.length > 0) {\n    throw new Error(`Missing required fields: ${missing.join(', ')}`);\n  }\n  \n  if (!Array.isArray(question.options) || question.options.length !== 4) {\n    throw new Error('Options must be an array of 4 choices');\n  }\n  \n  if (typeof question.correctAnswer !== 'number' || question.correctAnswer < 0 || question.correctAnswer > 3) {\n    throw new Error('correctAnswer must be a number between 0 and 3');\n  }\n  \n  return true;\n}\n\n// Export for use in routes\nexport default {\n  generateAIQuestions,\n  generateFallbackQuestions,\n  getCategories,\n  validateQuestion,\n  QUESTION_CATEGORIES,\n  DIFFICULTY_LEVELS\n};","size_bytes":19559},"server/routes/questions.js":{"content":"// API routes for AI question generation\nimport express from 'express';\nimport { generateAIQuestions, getCategories, QUESTION_CATEGORIES, DIFFICULTY_LEVELS } from '../questions.js';\n\nconst router = express.Router();\n\n// Track generated questions per session with a sliding window\nconst sessionQuestions = new Map();\nconst MAX_TRACKED_QUESTIONS = 20; // Only track last 20 questions per session\n\n// Get all available categories\nrouter.get('/categories', (req, res) => {\n  try {\n    const language = req.query.language || 'en';\n    const categories = getCategories(language);\n    \n    res.json({\n      success: true,\n      categories,\n      totalCategories: categories.length\n    });\n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch categories',\n      message: error.message\n    });\n  }\n});\n\n// Get difficulty levels\nrouter.get('/difficulties', (req, res) => {\n  res.json({\n    success: true,\n    difficulties: DIFFICULTY_LEVELS\n  });\n});\n\n// Generate AI questions for a specific category\nrouter.post('/generate', async (req, res) => {\n  try {\n    const { \n      category = 'general-knowledge', \n      difficulty = 'medium', \n      count = 5, \n      language = 'en',\n      sessionId \n    } = req.body;\n    \n    // Create a unique session key\n    const sessionKey = sessionId || `${req.ip}_${Date.now()}`;\n\n    // Validate input parameters\n    if (!QUESTION_CATEGORIES[category]) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid category',\n        availableCategories: Object.keys(QUESTION_CATEGORIES)\n      });\n    }\n\n    if (!DIFFICULTY_LEVELS.includes(difficulty)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid difficulty level',\n        availableDifficulties: DIFFICULTY_LEVELS\n      });\n    }\n\n    if (count < 1 || count > 20) {\n      return res.status(400).json({\n        success: false,\n        error: 'Count must be between 1 and 20'\n      });\n    }\n\n    if (!['en', 'ar'].includes(language)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Unsupported language',\n        supportedLanguages: ['en', 'ar']\n      });\n    }\n\n    console.log(`Generating ${count} questions for category: ${category}, difficulty: ${difficulty}, language: ${language}`);\n\n    // Get previous questions but limit to recent ones to avoid too many duplicates\n    let previousQuestions = sessionQuestions.get(sessionKey) || [];\n    \n    // Only keep the last MAX_TRACKED_QUESTIONS to prevent accumulating too many\n    if (previousQuestions.length > MAX_TRACKED_QUESTIONS) {\n      previousQuestions = previousQuestions.slice(-MAX_TRACKED_QUESTIONS);\n      sessionQuestions.set(sessionKey, previousQuestions);\n    }\n    \n    // Extract just the recent question texts to exclude\n    const excludeQuestions = previousQuestions.slice(-10).map(q => q.question);\n    \n    // Generate questions with exclusion list and sessionId\n    const allQuestions = await generateAIQuestions(category, difficulty, count, language, excludeQuestions, sessionId);\n    \n    // Check for duplicates only within recent questions\n    const uniqueQuestions = [];\n    const recentQuestions = previousQuestions.slice(-10); // Only check last 10 questions\n    \n    for (const q of allQuestions) {\n      // Check for exact duplicates in recent history only\n      const isDuplicate = recentQuestions.some(pq => \n        pq.question.toLowerCase().trim() === q.question.toLowerCase().trim()\n      );\n      \n      if (!isDuplicate && uniqueQuestions.length < count) {\n        q.uniqueId = `${Date.now()}_${Math.random().toString(36).substr(2, 9)}_${uniqueQuestions.length}`;\n        uniqueQuestions.push(q);\n      }\n    }\n    \n    // If we don't have enough unique questions, get more from fallback\n    let questions = uniqueQuestions;\n    if (questions.length < count) {\n      console.log(`Only found ${questions.length} unique questions, need ${count}. Getting more from fallback.`);\n      const additionalNeeded = count - questions.length;\n      const { generateFallbackQuestions } = await import('../questions.js');\n      \n      // Generate more fallback questions than needed to ensure we have enough unique ones\n      const additionalQuestions = generateFallbackQuestions(category, difficulty, additionalNeeded + 5, language, sessionId);\n      \n      // Add additional questions that aren't duplicates\n      for (const q of additionalQuestions) {\n        const isDuplicate = [...previousQuestions, ...questions].some(pq => \n          pq.question.toLowerCase().trim() === q.question.toLowerCase().trim()\n        );\n        if (!isDuplicate && questions.length < count) {\n          q.uniqueId = `${Date.now()}_${Math.random().toString(36).substr(2, 9)}_${questions.length}`;\n          questions.push(q);\n        }\n      }\n      \n      // If still not enough, force add fallback questions with shuffled options\n      if (questions.length === 0) {\n        console.log('Emergency fallback: Adding questions regardless of duplicates');\n        const emergencyQuestions = generateFallbackQuestions(category, difficulty, count, language, sessionId);\n        questions = emergencyQuestions.map((q, idx) => ({\n          ...q,\n          uniqueId: `${Date.now()}_emergency_${idx}`\n        }));\n      }\n    }\n    \n    // Update session questions with sliding window\n    const updatedSessionQuestions = [...previousQuestions, ...questions];\n    // Keep only the last MAX_TRACKED_QUESTIONS to prevent memory issues\n    sessionQuestions.set(sessionKey, updatedSessionQuestions.slice(-MAX_TRACKED_QUESTIONS));\n    \n    // Clean up old sessions (keep only last 50)\n    if (sessionQuestions.size > 50) {\n      const firstKey = sessionQuestions.keys().next().value;\n      sessionQuestions.delete(firstKey);\n    }\n\n    res.json({\n      success: true,\n      questions,\n      metadata: {\n        category,\n        difficulty,\n        count: questions.length,\n        language,\n        generatedAt: new Date().toISOString(),\n        source: questions[0]?.source || 'ai-generated',\n        sessionId: sessionKey,\n        totalQuestionsAsked: updatedSessionQuestions.length\n      }\n    });\n\n  } catch (error) {\n    console.error('Error generating questions:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate questions',\n      message: error.message\n    });\n  }\n});\n\n// Get questions for multiplayer games (no duplicate tracking for fresh games)\nrouter.post('/multiplayer', async (req, res) => {\n  try {\n    const { \n      category = 'general-knowledge', \n      difficulty = 'medium', \n      gameMode = '1vs1',\n      language = 'en' \n    } = req.body;\n\n    // Determine question count based on game mode\n    const questionCount = gameMode === '1vs1' ? 10 : 15; // More questions for team games\n\n    // Generate fresh questions without exclusion list for multiplayer\n    const questions = await generateAIQuestions(category, difficulty, questionCount, language, []);\n\n    res.json({\n      success: true,\n      questions,\n      metadata: {\n        category,\n        difficulty,\n        gameMode,\n        language,\n        questionCount,\n        generatedAt: new Date().toISOString()\n      }\n    });\n\n  } catch (error) {\n    console.error('Error generating multiplayer questions:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate multiplayer questions',\n      message: error.message\n    });\n  }\n});\n\n// Get specific category information\nrouter.get('/categories/:categoryId', (req, res) => {\n  try {\n    const { categoryId } = req.params;\n    const language = req.query.language || 'en';\n    \n    const categoryInfo = QUESTION_CATEGORIES[categoryId];\n    if (!categoryInfo) {\n      return res.status(404).json({\n        success: false,\n        error: 'Category not found'\n      });\n    }\n\n    res.json({\n      success: true,\n      category: {\n        id: categoryId,\n        name: categoryInfo.name[language] || categoryInfo.name.en,\n        icon: categoryInfo.icon,\n        subcategories: categoryInfo.subcategories[language] || categoryInfo.subcategories.en\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching category info:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch category information',\n      message: error.message\n    });\n  }\n});\n\n// Health check endpoint for AI service\nrouter.get('/health', (req, res) => {\n  const hasOpenAI = !!process.env.OPENAI_API_KEY;\n  \n  res.json({\n    success: true,\n    status: 'operational',\n    services: {\n      openai: hasOpenAI ? 'available' : 'fallback-mode',\n      categories: Object.keys(QUESTION_CATEGORIES).length,\n      languages: ['en', 'ar'],\n      difficulties: DIFFICULTY_LEVELS\n    },\n    timestamp: new Date().toISOString()\n  });\n});\n\nexport default router;","size_bytes":8888},"client/src/components/pages/LeaderboardPage.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { Button } from '../ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { SpaceButton } from '../ui/SpaceButton';\nimport { HologramCard } from '../ui/HologramCard';\nimport { Badge } from '../ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\nimport { \n  ArrowLeft, \n  Trophy,\n  Crown,\n  Medal,\n  Star,\n  Target,\n  Gamepad2,\n  Users,\n  Globe,\n  Loader2,\n  Sparkles,\n  Coins,\n  Zap,\n  TrendingUp\n} from 'lucide-react';\n\ninterface LeaderboardPlayer {\n  id: number;\n  username: string;\n  rank: string;\n  coins: number;\n  totalScore: number;\n  totalWins: number;\n  totalGames: number;\n  maxStreak: number;\n  averageScore: number;\n  perfectGames: number;\n  winRate: string;\n  singleplayerWinRate: string;\n  oneVsOneWinRate: string;\n  twoVsTwoWinRate: string;\n  lastPlayed: string;\n}\n\nexport default function LeaderboardPage() {\n  const { language } = useLanguage();\n  const { setGameState } = useTriviaGame();\n  const [activeMode, setActiveMode] = useState('all');\n  const [selectedLanguage, setSelectedLanguage] = useState('all');\n  const [leaderboard, setLeaderboard] = useState<LeaderboardPlayer[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n\n  // Fetch leaderboard data\n  const fetchLeaderboard = async (mode = activeMode, lang = selectedLanguage, reset = false) => {\n    try {\n      setIsLoading(true);\n      const offset = reset ? 0 : currentPage * 10;\n      \n      const params = new URLSearchParams({\n        limit: '10',\n        offset: offset.toString(),\n        ...(mode !== 'all' && { mode }),\n        ...(lang !== 'all' && { language: lang })\n      });\n\n      const response = await fetch(`/api/leaderboard?${params}`);\n      const data = await response.json();\n\n      if (data.success) {\n        if (reset) {\n          setLeaderboard(data.leaderboard);\n          setCurrentPage(0);\n        } else {\n          setLeaderboard(prev => [...prev, ...data.leaderboard]);\n        }\n        setHasMore(data.pagination.hasMore);\n        if (!reset) setCurrentPage(prev => prev + 1);\n      }\n    } catch (error) {\n      console.error('Error fetching leaderboard:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Load leaderboard on component mount and filter changes\n  useEffect(() => {\n    fetchLeaderboard(activeMode, selectedLanguage, true);\n  }, [activeMode, selectedLanguage]);\n\n  // Get rank icon and color\n  const getRankDisplay = (rank: string, position: number) => {\n    const isTopThree = position <= 3;\n    \n    if (isTopThree) {\n      const icons = [\n        { icon: Crown, color: 'text-yellow-500' },\n        { icon: Medal, color: 'text-gray-400' },\n        { icon: Trophy, color: 'text-amber-600' }\n      ];\n      const { icon: Icon, color } = icons[position - 1];\n      return <Icon className={`h-6 w-6 ${color}`} />;\n    }\n\n    const rankColors: Record<string, string> = {\n      'Legendary': 'text-purple-400',\n      'Diamond': 'text-blue-400',\n      'Platinum': 'text-gray-300',\n      'Gold': 'text-yellow-400',\n      'Silver': 'text-gray-400',\n      'Bronze': 'text-amber-500'\n    };\n\n    return (\n      <Badge variant=\"secondary\" className={`${rankColors[rank] || 'text-gray-500'} border-0 font-semibold`}>\n        {rank}\n      </Badge>\n    );\n  };\n\n  // Mode tabs configuration\n  const modeTabs = [\n    { \n      id: 'all', \n      name: language === 'ar' ? 'الكل' : 'All', \n      icon: Globe,\n      description: language === 'ar' ? 'جميع الأنماط' : 'All game modes'\n    },\n    { \n      id: '1v1', \n      name: language === 'ar' ? 'واحد ضد واحد' : '1vs1', \n      icon: Target,\n      description: language === 'ar' ? 'المواجهات الفردية' : 'Head-to-head battles'\n    },\n    { \n      id: '2v2', \n      name: language === 'ar' ? 'اثنان ضد اثنان' : '2vs2', \n      icon: Users,\n      description: language === 'ar' ? 'فريق ضد فريق' : 'Team battles'\n    },\n    { \n      id: 'single', \n      name: language === 'ar' ? 'فردي' : 'Solo', \n      icon: Gamepad2,\n      description: language === 'ar' ? 'اللعب الفردي' : 'Single player'\n    }\n  ];\n\n  // Animation variants\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        delayChildren: 0.1,\n        staggerChildren: 0.05\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { y: 20, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        type: \"spring\",\n        damping: 20,\n        stiffness: 300\n      }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-primary/5 p-4 overflow-y-auto\" style={{ height: '100vh' }}>\n      <motion.div\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className=\"max-w-6xl mx-auto space-y-6 pb-32\"\n      >\n        {/* Header */}\n        <motion.div variants={itemVariants} className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setGameState('home')}\n              className=\"text-primary hover:bg-primary/10\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold text-primary flex items-center gap-2\">\n                <Trophy className=\"h-8 w-8\" />\n                {language === 'ar' ? 'قائمة المتصدرين' : 'Leaderboard'}\n              </h1>\n              <p className=\"text-muted-foreground\">\n                {language === 'ar' ? 'أفضل اللاعبين في جميع أنحاء العالم' : 'Top players from around the world'}\n              </p>\n            </div>\n          </div>\n\n          {/* Language Filter */}\n          <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>\n            <SelectTrigger className=\"w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">\n                {language === 'ar' ? 'جميع اللغات' : 'All Languages'}\n              </SelectItem>\n              <SelectItem value=\"en\">English</SelectItem>\n              <SelectItem value=\"ar\">العربية</SelectItem>\n            </SelectContent>\n          </Select>\n        </motion.div>\n\n        {/* Mode Tabs */}\n        <motion.div variants={itemVariants}>\n          <Tabs value={activeMode} onValueChange={setActiveMode} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 lg:grid-cols-4 gap-2 h-auto p-2 bg-card\">\n              {modeTabs.map((tab) => (\n                <TabsTrigger\n                  key={tab.id}\n                  value={tab.id}\n                  className=\"flex flex-col items-center gap-1 p-3 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\n                >\n                  <tab.icon className=\"h-5 w-5\" />\n                  <span className=\"font-medium\">{tab.name}</span>\n                  <span className=\"text-xs opacity-70\">{tab.description}</span>\n                </TabsTrigger>\n              ))}\n            </TabsList>\n\n            {/* Leaderboard Content */}\n            {modeTabs.map((tab) => (\n              <TabsContent key={tab.id} value={tab.id} className=\"mt-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <tab.icon className=\"h-6 w-6 text-primary\" />\n                      {tab.name} {language === 'ar' ? 'المتصدرين' : 'Leaderboard'}\n                      {selectedLanguage !== 'all' && (\n                        <Badge variant=\"outline\">\n                          {selectedLanguage === 'en' ? 'English' : 'العربية'}\n                        </Badge>\n                      )}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {isLoading && leaderboard.length === 0 ? (\n                      <div className=\"flex items-center justify-center py-12\">\n                        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n                        <span className=\"ml-2\">{language === 'ar' ? 'جاري التحميل...' : 'Loading...'}</span>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-3\">\n                        {/* Leaderboard Header */}\n                        <div className=\"grid grid-cols-12 gap-4 p-3 text-sm font-medium text-muted-foreground border-b\">\n                          <div className=\"col-span-1 text-center\">#</div>\n                          <div className=\"col-span-3\">{language === 'ar' ? 'اللاعب' : 'Player'}</div>\n                          <div className=\"col-span-2 text-center\">{language === 'ar' ? 'النقاط' : 'Score'}</div>\n                          <div className=\"col-span-2 text-center\">{language === 'ar' ? 'الانتصارات' : 'Wins'}</div>\n                          <div className=\"col-span-2 text-center\">{language === 'ar' ? 'معدل الفوز' : 'Win Rate'}</div>\n                          <div className=\"col-span-2 text-center\">{language === 'ar' ? 'أفضل سلسلة' : 'Best Streak'}</div>\n                        </div>\n\n                        {/* Leaderboard Entries */}\n                        {leaderboard.map((player, index) => (\n                          <motion.div\n                            key={player.id}\n                            variants={itemVariants}\n                            className={`grid grid-cols-12 gap-4 p-3 rounded-lg transition-colors hover:bg-accent/50 ${\n                              index < 3 ? 'bg-gradient-to-r from-primary/5 to-accent/5 border border-primary/20' : 'bg-card'\n                            }`}\n                          >\n                            {/* Position */}\n                            <div className=\"col-span-1 flex items-center justify-center\">\n                              <div className=\"flex items-center gap-2\">\n                                {getRankDisplay(player.rank, index + 1)}\n                                <span className=\"text-sm font-medium\">#{index + 1}</span>\n                              </div>\n                            </div>\n\n                            {/* Player Info */}\n                            <div className=\"col-span-3 flex items-center gap-3\">\n                              <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-primary to-accent flex items-center justify-center text-white font-bold\">\n                                {player.username.charAt(0).toUpperCase()}\n                              </div>\n                              <div>\n                                <div className=\"font-semibold\">{player.username}</div>\n                                <div className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                                  <Coins className=\"h-3 w-3\" />\n                                  {player.coins}\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Total Score */}\n                            <div className=\"col-span-2 text-center\">\n                              <div className=\"font-bold text-lg\">{(player.totalScore || 0).toLocaleString()}</div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                {language === 'ar' ? 'متوسط' : 'Avg'}: {player.averageScore || 0}\n                              </div>\n                            </div>\n\n                            {/* Wins */}\n                            <div className=\"col-span-2 text-center\">\n                              <div className=\"font-semibold text-green-600\">{player.totalWins || 0}</div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                / {player.totalGames || 0} {language === 'ar' ? 'ألعاب' : 'games'}\n                              </div>\n                            </div>\n\n                            {/* Win Rate */}\n                            <div className=\"col-span-2 text-center\">\n                              <div className=\"font-semibold\">{player.winRate}%</div>\n                              {(player.perfectGames || 0) > 0 && (\n                                <div className=\"text-xs text-amber-600 flex items-center justify-center gap-1\">\n                                  <Sparkles className=\"h-3 w-3\" />\n                                  {player.perfectGames || 0}\n                                </div>\n                              )}\n                            </div>\n\n                            {/* Best Streak */}\n                            <div className=\"col-span-2 text-center\">\n                              <div className=\"font-semibold flex items-center justify-center gap-1\">\n                                <Zap className=\"h-4 w-4 text-orange-500\" />\n                                {player.maxStreak || 0}\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                {language === 'ar' ? 'أفضل سلسلة' : 'best'}\n                              </div>\n                            </div>\n                          </motion.div>\n                        ))}\n\n                        {/* Load More Button */}\n                        {hasMore && (\n                          <div className=\"text-center pt-6\">\n                            <Button\n                              onClick={() => fetchLeaderboard()}\n                              disabled={isLoading}\n                              variant=\"outline\"\n                              className=\"min-w-32\"\n                            >\n                              {isLoading ? (\n                                <>\n                                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                                  {language === 'ar' ? 'جاري التحميل...' : 'Loading...'}\n                                </>\n                              ) : (\n                                <>\n                                  <TrendingUp className=\"h-4 w-4 mr-2\" />\n                                  {language === 'ar' ? 'عرض المزيد' : 'Load More'}\n                                </>\n                              )}\n                            </Button>\n                          </div>\n                        )}\n\n                        {/* No data message */}\n                        {leaderboard.length === 0 && !isLoading && (\n                          <div className=\"text-center py-12\">\n                            <Trophy className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                            <p className=\"text-muted-foreground\">\n                              {language === 'ar' ? 'لا توجد بيانات للعرض' : 'No leaderboard data available'}\n                            </p>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            ))}\n          </Tabs>\n        </motion.div>\n\n        {/* Stats Summary */}\n        <motion.div variants={itemVariants}>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <Users className=\"h-8 w-8 text-blue-500 mx-auto mb-2\" />\n                <div className=\"text-2xl font-bold\">{leaderboard.length}</div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {language === 'ar' ? 'لاعبين نشطين' : 'Active Players'}\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <Target className=\"h-8 w-8 text-green-500 mx-auto mb-2\" />\n                <div className=\"text-2xl font-bold\">\n                  {leaderboard.reduce((sum, p) => sum + (p.totalGames || 0), 0).toLocaleString()}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {language === 'ar' ? 'إجمالي الألعاب' : 'Total Games'}\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <Sparkles className=\"h-8 w-8 text-purple-500 mx-auto mb-2\" />\n                <div className=\"text-2xl font-bold\">\n                  {leaderboard.reduce((sum, p) => sum + (p.totalScore || 0), 0).toLocaleString()}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {language === 'ar' ? 'إجمالي النقاط' : 'Total Points'}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":17555},"server/services/scoring.ts":{"content":"import { db } from \"../db\";\nimport { users, userStats, games, rewards } from \"../../shared/schema\";\nimport { eq, desc, sql, and } from \"drizzle-orm\";\nimport type { User, UserStats, Game, Reward } from \"../../shared/schema\";\n\nexport class ScoringService {\n  // Update user score and stats after a game\n  async updatePlayerScore(\n    userId: number, \n    gameScore: number, \n    isWin: boolean, \n    gameMode: string,\n    gameId?: number,\n    isPerfectGame: boolean = false\n  ): Promise<void> {\n    try {\n      // Get or create user stats\n      let stats = await this.getUserStats(userId);\n      \n      if (!stats) {\n        stats = await this.createUserStats(userId);\n      }\n\n      // Calculate new stats\n      const newTotalGames = stats.totalGames + 1;\n      const newTotalScore = stats.totalScore + gameScore;\n      const newAverageScore = Math.round(newTotalScore / newTotalGames);\n      const newTotalWins = isWin ? stats.totalWins + 1 : stats.totalWins;\n      const newTotalLosses = !isWin ? stats.totalLosses + 1 : stats.totalLosses;\n      const newCurrentStreak = isWin ? stats.currentStreak + 1 : 0;\n      const newMaxStreak = Math.max(stats.maxStreak, newCurrentStreak);\n      const newHighestScore = Math.max(stats.highestScore, gameScore);\n      const newPerfectGames = isPerfectGame ? stats.perfectGames + 1 : stats.perfectGames;\n\n      // Update mode-specific stats\n      const modeUpdates: Partial<UserStats> = {};\n      switch (gameMode) {\n        case 'single':\n          modeUpdates.singleplayerGames = stats.singleplayerGames + 1;\n          if (isWin) modeUpdates.singleplayerWins = stats.singleplayerWins + 1;\n          break;\n        case '1v1':\n          modeUpdates.oneVsOneGames = stats.oneVsOneGames + 1;\n          if (isWin) modeUpdates.oneVsOneWins = stats.oneVsOneWins + 1;\n          break;\n        case '2v2':\n          modeUpdates.twoVsTwoGames = stats.twoVsTwoGames + 1;\n          if (isWin) modeUpdates.twoVsTwoWins = stats.twoVsTwoWins + 1;\n          break;\n      }\n\n      // Calculate new rank\n      const newRank = this.calculateRank(newTotalScore, newTotalWins, newMaxStreak);\n\n      // Update user stats\n      await db.update(userStats)\n        .set({\n          totalGames: newTotalGames,\n          totalWins: newTotalWins,\n          totalLosses: newTotalLosses,\n          totalScore: newTotalScore,\n          highestScore: newHighestScore,\n          currentStreak: newCurrentStreak,\n          maxStreak: newMaxStreak,\n          averageScore: newAverageScore,\n          perfectGames: newPerfectGames,\n          lastPlayed: new Date(),\n          rank: newRank,\n          updatedAt: new Date(),\n          ...modeUpdates\n        })\n        .where(eq(userStats.userId, userId));\n\n      // Update user rank in users table\n      await db.update(users)\n        .set({ \n          rank: newRank,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n\n      // Award coins for wins\n      if (isWin) {\n        await this.awardCoins(userId, 10, 'game_win', `Win reward for ${gameMode} game`, gameId);\n      }\n\n      // Bonus for perfect games\n      if (isPerfectGame) {\n        await this.awardCoins(userId, 5, 'streak_bonus', 'Perfect game bonus', gameId);\n      }\n\n      // Streak bonus (every 5 wins in a row)\n      if (newCurrentStreak > 0 && newCurrentStreak % 5 === 0) {\n        await this.awardCoins(userId, newCurrentStreak, 'streak_bonus', `${newCurrentStreak}-win streak bonus`, gameId);\n      }\n\n    } catch (error) {\n      console.error('Error updating player score:', error);\n      throw error;\n    }\n  }\n\n  // Award coins to user and record transaction\n  async awardCoins(\n    userId: number, \n    amount: number, \n    type: string, \n    description?: string,\n    gameId?: number\n  ): Promise<void> {\n    try {\n      // Update user coins\n      await db.update(users)\n        .set({ \n          coins: sql`${users.coins} + ${amount}`,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n\n      // Record reward transaction\n      await db.insert(rewards).values({\n        userId,\n        type,\n        amount,\n        gameId,\n        description: description || `${amount} coins awarded`\n      });\n\n    } catch (error) {\n      console.error('Error awarding coins:', error);\n      throw error;\n    }\n  }\n\n  // Deduct coins (for entry fees, purchases)\n  async deductCoins(userId: number, amount: number, description?: string): Promise<boolean> {\n    try {\n      // Check if user has enough coins\n      const user = await db.select().from(users).where(eq(users.id, userId)).limit(1);\n      \n      if (!user.length || user[0].coins < amount) {\n        return false; // Insufficient coins\n      }\n\n      // Deduct coins\n      await db.update(users)\n        .set({ \n          coins: sql`${users.coins} - ${amount}`,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n\n      // Record transaction\n      await db.insert(rewards).values({\n        userId,\n        type: 'deduction',\n        amount: -amount,\n        description: description || `${amount} coins deducted`\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Error deducting coins:', error);\n      return false;\n    }\n  }\n\n  // Get user statistics\n  async getUserStats(userId: number): Promise<UserStats | null> {\n    try {\n      const result = await db.select()\n        .from(userStats)\n        .where(eq(userStats.userId, userId))\n        .limit(1);\n\n      return result.length > 0 ? result[0] : null;\n    } catch (error) {\n      console.error('Error getting user stats:', error);\n      return null;\n    }\n  }\n\n  // Create initial user stats\n  async createUserStats(userId: number): Promise<UserStats> {\n    try {\n      const result = await db.insert(userStats)\n        .values({ userId })\n        .returning();\n\n      return result[0];\n    } catch (error) {\n      console.error('Error creating user stats:', error);\n      throw error;\n    }\n  }\n\n  // Get leaderboard with filters\n  async getLeaderboard(\n    mode?: string, \n    language?: string, \n    limit: number = 10,\n    offset: number = 0\n  ): Promise<any[]> {\n    try {\n      let query = db.select({\n        id: users.id,\n        username: users.username,\n        rank: users.rank,\n        coins: users.coins,\n        totalScore: userStats.totalScore,\n        totalWins: userStats.totalWins,\n        totalGames: userStats.totalGames,\n        maxStreak: userStats.maxStreak,\n        averageScore: userStats.averageScore,\n        perfectGames: userStats.perfectGames,\n        // Mode-specific wins\n        singleplayerWins: userStats.singleplayerWins,\n        oneVsOneWins: userStats.oneVsOneWins,\n        twoVsTwoWins: userStats.twoVsTwoWins,\n        // Mode-specific games\n        singleplayerGames: userStats.singleplayerGames,\n        oneVsOneGames: userStats.oneVsOneGames,\n        twoVsTwoGames: userStats.twoVsTwoGames,\n        lastPlayed: userStats.lastPlayed\n      })\n      .from(users)\n      .leftJoin(userStats, eq(users.id, userStats.userId))\n      .orderBy(desc(userStats.totalScore))\n      .limit(limit)\n      .offset(offset);\n\n      // Apply language filter if specified\n      if (language) {\n        query = query.where(eq(users.language, language));\n      }\n\n      const results = await query;\n\n      return results.map(user => ({\n        ...user,\n        winRate: (user.totalGames || 0) > 0 ? (((user.totalWins || 0) / (user.totalGames || 1)) * 100).toFixed(1) : '0.0',\n        // Mode-specific win rates\n        singleplayerWinRate: (user.singleplayerGames || 0) > 0 ? \n          (((user.singleplayerWins || 0) / (user.singleplayerGames || 1)) * 100).toFixed(1) : '0.0',\n        oneVsOneWinRate: (user.oneVsOneGames || 0) > 0 ? \n          (((user.oneVsOneWins || 0) / (user.oneVsOneGames || 1)) * 100).toFixed(1) : '0.0',\n        twoVsTwoWinRate: (user.twoVsTwoGames || 0) > 0 ? \n          (((user.twoVsTwoWins || 0) / (user.twoVsTwoGames || 1)) * 100).toFixed(1) : '0.0'\n      }));\n\n    } catch (error) {\n      console.error('Error getting leaderboard:', error);\n      throw error;\n    }\n  }\n\n  // Get filtered leaderboard by mode\n  async getLeaderboardByMode(mode: string, limit: number = 10): Promise<any[]> {\n    try {\n      let orderByField;\n      let winField;\n      let gamesField;\n\n      switch (mode) {\n        case 'single':\n          orderByField = userStats.singleplayerWins;\n          winField = 'singleplayerWins';\n          gamesField = 'singleplayerGames';\n          break;\n        case '1v1':\n          orderByField = userStats.oneVsOneWins;\n          winField = 'oneVsOneWins';\n          gamesField = 'oneVsOneGames';\n          break;\n        case '2v2':\n          orderByField = userStats.twoVsTwoWins;\n          winField = 'twoVsTwoWins';\n          gamesField = 'twoVsTwoGames';\n          break;\n        default:\n          return this.getLeaderboard(undefined, undefined, limit);\n      }\n\n      const results = await db.select({\n        id: users.id,\n        username: users.username,\n        rank: users.rank,\n        coins: users.coins,\n        totalScore: userStats.totalScore,\n        wins: orderByField,\n        games: mode === 'single' ? userStats.singleplayerGames :\n               mode === '1v1' ? userStats.oneVsOneGames : userStats.twoVsTwoGames,\n        maxStreak: userStats.maxStreak,\n        averageScore: userStats.averageScore,\n        lastPlayed: userStats.lastPlayed\n      })\n      .from(users)\n      .leftJoin(userStats, eq(users.id, userStats.userId))\n      .orderBy(desc(orderByField))\n      .limit(limit);\n\n      return results.map(user => ({\n        ...user,\n        winRate: (user.games || 0) > 0 ? (((user.wins || 0) / (user.games || 1)) * 100).toFixed(1) : '0.0'\n      }));\n\n    } catch (error) {\n      console.error('Error getting mode leaderboard:', error);\n      throw error;\n    }\n  }\n\n  // Calculate rank based on performance\n  private calculateRank(totalScore: number, totalWins: number, maxStreak: number): string {\n    const score = totalScore + (totalWins * 10) + (maxStreak * 5);\n\n    if (score >= 10000) return 'Legendary';\n    if (score >= 5000) return 'Diamond';\n    if (score >= 2500) return 'Platinum';\n    if (score >= 1000) return 'Gold';\n    if (score >= 500) return 'Silver';\n    return 'Bronze';\n  }\n\n  // Get recent games for a user\n  async getRecentGames(userId: number, limit: number = 10): Promise<Game[]> {\n    try {\n      return await db.select()\n        .from(games)\n        .where(sql`${games.players}::jsonb @> ${JSON.stringify([userId.toString()])}`)\n        .orderBy(desc(games.completedAt))\n        .limit(limit);\n    } catch (error) {\n      console.error('Error getting recent games:', error);\n      return [];\n    }\n  }\n\n  // Get user's rank position\n  async getUserRankPosition(userId: number): Promise<number> {\n    try {\n      const userScore = await db.select({ totalScore: userStats.totalScore })\n        .from(userStats)\n        .where(eq(userStats.userId, userId))\n        .limit(1);\n        \n      if (!userScore.length) return 0;\n      \n      const result = await db.select({ count: sql<number>`count(*)` })\n        .from(userStats)\n        .where(sql`${userStats.totalScore} > ${userScore[0].totalScore}`);\n\n      return (result[0]?.count || 0) + 1;\n    } catch (error) {\n      console.error('Error getting user rank position:', error);\n      return 0;\n    }\n  }\n}\n\nexport const scoringService = new ScoringService();","size_bytes":11380},"client/src/components/game/ScoreboardOverlay.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { useMultiplayer } from '../../lib/stores/useMultiplayer';\nimport { Card, CardContent } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { Button } from '../ui/button';\nimport { \n  Trophy,\n  Star,\n  Zap,\n  Crown,\n  Target,\n  Users,\n  TrendingUp,\n  Award,\n  ChevronUp,\n  ChevronDown,\n  Coins,\n  Gift\n} from 'lucide-react';\n\ninterface Player {\n  id: string;\n  username: string;\n  score: number;\n  rank: string;\n  streak: number;\n  correctAnswers: number;\n  totalQuestions: number;\n  isOnline: boolean;\n}\n\ninterface ScoreboardOverlayProps {\n  players: Player[];\n  currentPlayer?: Player;\n  gameMode: '1v1' | '2v2' | 'single';\n  isVisible: boolean;\n  onToggle: () => void;\n  showAdReward?: boolean;\n  onAdReward?: () => void;\n}\n\nexport default function ScoreboardOverlay({\n  players,\n  currentPlayer,\n  gameMode,\n  isVisible,\n  onToggle,\n  showAdReward = false,\n  onAdReward\n}: ScoreboardOverlayProps) {\n  const { language } = useLanguage();\n  const { score, correctAnswers, streak } = useTriviaGame();\n  const { currentRoom } = useMultiplayer();\n  \n  const [isExpanded, setIsExpanded] = useState(false);\n  const [sortedPlayers, setSortedPlayers] = useState<Player[]>([]);\n\n  // Sort players by score\n  useEffect(() => {\n    const sorted = [...players].sort((a, b) => b.score - a.score);\n    setSortedPlayers(sorted);\n  }, [players]);\n\n  // Get rank display\n  const getRankIcon = (position: number) => {\n    if (position === 1) return <Crown className=\"h-4 w-4 text-yellow-500\" />;\n    if (position === 2) return <Trophy className=\"h-4 w-4 text-gray-400\" />;\n    if (position === 3) return <Award className=\"h-4 w-4 text-amber-600\" />;\n    return <span className=\"text-sm font-medium\">#{position}</span>;\n  };\n\n  // Get accuracy percentage\n  const getAccuracy = (correct: number, total: number) => {\n    return total > 0 ? Math.round((correct / total) * 100) : 0;\n  };\n\n  // Simulate ad reward\n  const handleAdReward = async () => {\n    if (!onAdReward) return;\n    \n    try {\n      // Call ad reward API\n      const response = await fetch('/api/rewards/ad', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: currentPlayer?.id || 1 // Default to 1 for demo\n        })\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        onAdReward();\n        // Show success notification\n        console.log(`Earned ${data.reward} coins! New balance: ${data.newBalance}`);\n      }\n    } catch (error) {\n      console.error('Error claiming ad reward:', error);\n    }\n  };\n\n  const containerVariants = {\n    hidden: { \n      opacity: 0, \n      y: -20,\n      scale: 0.95\n    },\n    visible: { \n      opacity: 1, \n      y: 0,\n      scale: 1,\n      transition: {\n        type: \"spring\",\n        damping: 20,\n        stiffness: 300\n      }\n    },\n    exit: { \n      opacity: 0, \n      y: -20,\n      scale: 0.95,\n      transition: { \n        duration: 0.2 \n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, x: -20 },\n    visible: { \n      opacity: 1, \n      x: 0,\n      transition: { \n        type: \"spring\",\n        damping: 20,\n        stiffness: 300\n      }\n    }\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        exit=\"exit\"\n        className=\"fixed top-4 right-4 z-50 w-80 max-w-sm\"\n      >\n        <Card className=\"bg-card/95 backdrop-blur-lg border-border shadow-xl\">\n          {/* Header */}\n          <div \n            className=\"p-3 border-b border-border cursor-pointer hover:bg-accent/20 transition-colors\"\n            onClick={() => setIsExpanded(!isExpanded)}\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"p-1.5 bg-primary/10 rounded-lg\">\n                  {gameMode === '1v1' ? (\n                    <Target className=\"h-4 w-4 text-primary\" />\n                  ) : gameMode === '2v2' ? (\n                    <Users className=\"h-4 w-4 text-primary\" />\n                  ) : (\n                    <Trophy className=\"h-4 w-4 text-primary\" />\n                  )}\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-sm\">\n                    {language === 'ar' ? 'النتائج' : 'Scoreboard'}\n                  </h3>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {gameMode === '1v1' && (language === 'ar' ? 'واحد ضد واحد' : '1vs1')}\n                    {gameMode === '2v2' && (language === 'ar' ? 'فريق ضد فريق' : '2vs2')}\n                    {gameMode === 'single' && (language === 'ar' ? 'فردي' : 'Solo')}\n                  </p>\n                </div>\n              </div>\n              <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0\">\n                {isExpanded ? (\n                  <ChevronUp className=\"h-3 w-3\" />\n                ) : (\n                  <ChevronDown className=\"h-3 w-3\" />\n                )}\n              </Button>\n            </div>\n          </div>\n\n          <CardContent className=\"p-0\">\n            {/* Compact View */}\n            {!isExpanded && currentPlayer && (\n              <div className=\"p-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center text-white text-xs font-bold\">\n                      {currentPlayer.username.charAt(0).toUpperCase()}\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-sm\">{currentPlayer.username}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {currentPlayer.score} {language === 'ar' ? 'نقطة' : 'points'}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"flex items-center gap-1\">\n                      <Zap className=\"h-3 w-3 text-orange-500\" />\n                      <span className=\"text-sm font-medium\">{streak}</span>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {getAccuracy(correctAnswers, currentPlayer.totalQuestions)}% \n                      {language === 'ar' ? ' دقة' : ' accuracy'}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Expanded View */}\n            {isExpanded && (\n              <motion.div\n                initial={{ height: 0 }}\n                animate={{ height: 'auto' }}\n                exit={{ height: 0 }}\n                className=\"overflow-hidden\"\n              >\n                <div className=\"p-3 space-y-3\">\n                  {/* Current Player Stats */}\n                  {currentPlayer && (\n                    <motion.div\n                      variants={itemVariants}\n                      className=\"p-3 bg-primary/5 rounded-lg border border-primary/20\"\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center text-white text-xs font-bold\">\n                            {currentPlayer.username.charAt(0).toUpperCase()}\n                          </div>\n                          <div>\n                            <div className=\"font-medium text-sm\">{currentPlayer.username}</div>\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {currentPlayer.rank}\n                            </Badge>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-bold text-lg\">{currentPlayer.score}</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {language === 'ar' ? 'نقاط' : 'points'}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-3 gap-2 text-center\">\n                        <div>\n                          <div className=\"flex items-center justify-center gap-1\">\n                            <Zap className=\"h-3 w-3 text-orange-500\" />\n                            <span className=\"font-medium text-sm\">{streak}</span>\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {language === 'ar' ? 'سلسلة' : 'Streak'}\n                          </div>\n                        </div>\n                        <div>\n                          <div className=\"font-medium text-sm text-green-600\">\n                            {correctAnswers}/{currentPlayer.totalQuestions}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {language === 'ar' ? 'صحيح' : 'Correct'}\n                          </div>\n                        </div>\n                        <div>\n                          <div className=\"font-medium text-sm\">\n                            {getAccuracy(correctAnswers, currentPlayer.totalQuestions)}%\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {language === 'ar' ? 'دقة' : 'Accuracy'}\n                          </div>\n                        </div>\n                      </div>\n                    </motion.div>\n                  )}\n\n                  {/* Other Players */}\n                  {sortedPlayers.length > 1 && (\n                    <div className=\"space-y-2\">\n                      <h4 className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n                        {language === 'ar' ? 'اللاعبين الآخرين' : 'Other Players'}\n                      </h4>\n                      \n                      {sortedPlayers\n                        .filter(player => player.id !== currentPlayer?.id)\n                        .slice(0, 3)\n                        .map((player, index) => (\n                          <motion.div\n                            key={player.id}\n                            variants={itemVariants}\n                            className=\"flex items-center justify-between p-2 bg-accent/5 rounded-lg\"\n                          >\n                            <div className=\"flex items-center gap-2\">\n                              {getRankIcon(sortedPlayers.findIndex(p => p.id === player.id) + 1)}\n                              <div>\n                                <div className=\"font-medium text-sm\">{player.username}</div>\n                                <div className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                                  <div className={`w-2 h-2 rounded-full ${player.isOnline ? 'bg-green-500' : 'bg-gray-400'}`} />\n                                  {player.isOnline ? \n                                    (language === 'ar' ? 'متصل' : 'Online') : \n                                    (language === 'ar' ? 'غير متصل' : 'Offline')\n                                  }\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"font-medium text-sm\">{player.score}</div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                {getAccuracy(player.correctAnswers, player.totalQuestions)}%\n                              </div>\n                            </div>\n                          </motion.div>\n                        ))\n                      }\n                    </div>\n                  )}\n\n                  {/* Ad Reward Section */}\n                  {showAdReward && (\n                    <motion.div\n                      variants={itemVariants}\n                      className=\"pt-2 border-t border-border\"\n                    >\n                      <Button\n                        onClick={handleAdReward}\n                        className=\"w-full bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white border-0 h-10\"\n                      >\n                        <Gift className=\"h-4 w-4 mr-2\" />\n                        {language === 'ar' ? 'احصل على 5 عملات' : 'Get 5 Coins'}\n                        <span className=\"ml-1 text-xs opacity-80\">\n                          {language === 'ar' ? '(إعلان)' : '(Ad)'}\n                        </span>\n                      </Button>\n                    </motion.div>\n                  )}\n                </div>\n              </motion.div>\n            )}\n          </CardContent>\n        </Card>\n      </motion.div>\n    </AnimatePresence>\n  );\n}","size_bytes":13617},"server/routes/rewards.ts":{"content":"import { Router } from \"express\";\nimport { db } from \"../db\";\nimport { users } from \"../../shared/schema\";\nimport { eq, sql } from \"drizzle-orm\";\nimport { scoringService } from \"../services/scoring\";\n\nconst router = Router();\n\n// Ad reward endpoint - gives 5 coins for watching an ad\nrouter.post(\"/ad\", async (req, res) => {\n  try {\n    const { userId } = req.body;\n    \n    if (!userId) {\n      return res.status(400).json({ \n        success: false, \n        error: \"User ID is required\" \n      });\n    }\n\n    // Check if user exists\n    const user = await db.select({ \n      id: users.id, \n      coins: users.coins,\n      premium: users.premium \n    })\n      .from(users)\n      .where(eq(users.id, parseInt(userId)))\n      .limit(1);\n      \n    if (!user.length) {\n      return res.status(404).json({ \n        success: false, \n        error: \"User not found\" \n      });\n    }\n\n    // Award 5 coins for ad reward (double for premium users)\n    const rewardAmount = user[0].premium ? 10 : 5;\n    \n    await scoringService.awardCoins(\n      parseInt(userId),\n      rewardAmount,\n      'ad_reward',\n      'Watched advertisement',\n      undefined\n    );\n\n    // Get updated balance\n    const updatedUser = await db.select({ coins: users.coins })\n      .from(users)\n      .where(eq(users.id, parseInt(userId)))\n      .limit(1);\n\n    res.json({\n      success: true,\n      reward: rewardAmount,\n      newBalance: updatedUser[0]?.coins || 0,\n      message: user[0].premium \n        ? \"Premium bonus: Double coins earned!\" \n        : \"Coins earned for watching ad!\"\n    });\n\n  } catch (error) {\n    console.error('Error processing ad reward:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to process ad reward' \n    });\n  }\n});\n\n// Daily bonus for all users - 25 coins per day\nrouter.post(\"/daily-bonus\", async (req, res) => {\n  try {\n    const { userId } = req.body;\n    \n    if (!userId) {\n      return res.status(400).json({ \n        success: false, \n        error: \"User ID is required\" \n      });\n    }\n\n    // Check if user exists\n    const user = await db.select({ \n      id: users.id, \n      coins: users.coins,\n      premium: users.premium,\n      lastDailyBonus: users.lastDailyBonus \n    })\n      .from(users)\n      .where(eq(users.id, parseInt(userId)))\n      .limit(1);\n      \n    if (!user.length) {\n      return res.status(404).json({ \n        success: false, \n        error: \"User not found\" \n      });\n    }\n\n    // Check if user already claimed daily bonus today\n    const today = new Date().toDateString();\n    const lastBonus = user[0].lastDailyBonus ? new Date(user[0].lastDailyBonus).toDateString() : null;\n\n    if (lastBonus === today) {\n      return res.status(400).json({ \n        success: false, \n        error: \"Daily bonus already claimed today\",\n        timeUntilNext: \"Come back tomorrow for your next bonus!\"\n      });\n    }\n\n    // Award daily bonus (25 coins for all users, 50 for premium)\n    const bonusAmount = user[0].premium ? 50 : 25;\n    \n    await scoringService.awardCoins(\n      parseInt(userId),\n      bonusAmount,\n      'daily_bonus',\n      'Daily bonus reward',\n      undefined\n    );\n\n    // Update last daily bonus timestamp\n    await db.update(users)\n      .set({ lastDailyBonus: new Date() })\n      .where(eq(users.id, parseInt(userId)));\n\n    // Get updated balance\n    const updatedUser = await db.select({ coins: users.coins })\n      .from(users)\n      .where(eq(users.id, parseInt(userId)))\n      .limit(1);\n\n    res.json({\n      success: true,\n      reward: bonusAmount,\n      newBalance: updatedUser[0]?.coins || 0,\n      message: user[0].premium \n        ? \"Premium daily bonus claimed! Double coins earned!\"\n        : \"Daily bonus claimed! Come back tomorrow for more!\"\n    });\n\n  } catch (error) {\n    console.error('Error processing daily bonus:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to process daily bonus' \n    });\n  }\n});\n\n// Get reward status for user\nrouter.get(\"/status/:userId\", async (req, res) => {\n  try {\n    const userId = parseInt(req.params.userId);\n    \n    if (!userId) {\n      return res.status(400).json({ \n        success: false, \n        error: \"Invalid user ID\" \n      });\n    }\n\n    const user = await db.select({ \n      premium: users.premium,\n      lastDailyBonus: users.lastDailyBonus \n    })\n      .from(users)\n      .where(eq(users.id, userId))\n      .limit(1);\n      \n    if (!user.length) {\n      return res.status(404).json({ \n        success: false, \n        error: \"User not found\" \n      });\n    }\n\n    // Check if daily bonus can be claimed\n    const today = new Date().toDateString();\n    const lastBonus = user[0].lastDailyBonus ? new Date(user[0].lastDailyBonus).toDateString() : null;\n    const canClaimDaily = user[0].premium && (lastBonus !== today);\n\n    res.json({\n      success: true,\n      isPremium: user[0].premium,\n      canClaimDailyBonus: canClaimDaily,\n      adRewardMultiplier: user[0].premium ? 2 : 1,\n      nextDailyBonus: user[0].premium && !canClaimDaily ? \n        new Date(new Date().getTime() + 24*60*60*1000).toISOString() : null\n    });\n\n  } catch (error) {\n    console.error('Error checking reward status:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to check reward status' \n    });\n  }\n});\n\nexport default router;","size_bytes":5343},"client/src/components/ConnectionStatus.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { WifiOff, Wifi, AlertTriangle } from 'lucide-react';\nimport { useLanguage } from '../lib/stores/useLanguage';\n\nexport default function ConnectionStatus() {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [showOfflineMessage, setShowOfflineMessage] = useState(false);\n  const { language } = useLanguage();\n\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      setShowOfflineMessage(false);\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      setShowOfflineMessage(true);\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Show offline message if already offline\n    if (!navigator.onLine) {\n      setShowOfflineMessage(true);\n    }\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Auto-hide online message after 3 seconds\n  useEffect(() => {\n    if (isOnline && showOfflineMessage) {\n      const timer = setTimeout(() => {\n        setShowOfflineMessage(false);\n      }, 3000);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [isOnline, showOfflineMessage]);\n\n  const messages = {\n    en: {\n      offline: 'No internet connection',\n      online: 'Connection restored',\n      offlineDesc: 'Some features may not work properly',\n      onlineDesc: 'All features are now available'\n    },\n    ar: {\n      offline: 'لا يوجد اتصال بالإنترنت',\n      online: 'تم استعادة الاتصال',\n      offlineDesc: 'قد لا تعمل بعض الميزات بشكل صحيح',\n      onlineDesc: 'جميع الميزات متاحة الآن'\n    }\n  };\n\n  const content = messages[language as keyof typeof messages] || messages.en;\n\n  return (\n    <AnimatePresence>\n      {showOfflineMessage && (\n        <motion.div\n          initial={{ y: -100, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          exit={{ y: -100, opacity: 0 }}\n          className=\"fixed top-4 left-4 right-4 z-50 pointer-events-none\"\n        >\n          <div className={`\n            mx-auto max-w-sm p-3 rounded-lg shadow-lg pointer-events-auto\n            ${isOnline \n              ? 'bg-green-500 text-white' \n              : 'bg-red-500 text-white'\n            }\n          `}>\n            <div className=\"flex items-center gap-2\">\n              {isOnline ? (\n                <Wifi className=\"h-4 w-4\" />\n              ) : (\n                <WifiOff className=\"h-4 w-4\" />\n              )}\n              <div className=\"flex-1\">\n                <p className=\"font-medium text-sm\">\n                  {isOnline ? content.online : content.offline}\n                </p>\n                <p className=\"text-xs opacity-90\">\n                  {isOnline ? content.onlineDesc : content.offlineDesc}\n                </p>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}","size_bytes":3110},"client/src/components/ErrorBoundary.tsx":{"content":"import React from 'react';\nimport { AlertTriangle, RefreshCw } from 'lucide-react';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n}\n\ninterface ErrorBoundaryProps {\n  children: React.ReactNode;\n}\n\nexport class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Error caught by boundary:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-primary/5 p-4 flex items-center justify-center\">\n          <Card className=\"max-w-md w-full\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-red-500\">\n                <AlertTriangle className=\"h-5 w-5\" />\n                Oops! Something went wrong\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                The application encountered an unexpected error. This has been logged and our team will investigate.\n              </p>\n              \n              {process.env.NODE_ENV === 'development' && this.state.error && (\n                <div className=\"bg-muted/50 p-3 rounded-lg\">\n                  <p className=\"text-xs font-mono text-red-500\">\n                    {this.state.error.message}\n                  </p>\n                </div>\n              )}\n              \n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={() => window.location.reload()} \n                  className=\"flex-1\"\n                >\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\n                  Reload App\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => this.setState({ hasError: false })}\n                  className=\"flex-1\"\n                >\n                  Try Again\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}","size_bytes":2523},"client/src/components/pages/PrivacyPolicy.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { Button } from '../ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { ArrowLeft, Shield, Eye, Lock, Database } from 'lucide-react';\n\nexport default function PrivacyPolicy() {\n  const { language } = useLanguage();\n  const { setGameState } = useTriviaGame();\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        delayChildren: 0.1,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { y: 20, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        type: \"spring\",\n        damping: 20,\n        stiffness: 300\n      }\n    }\n  };\n\n  const privacyContent = {\n    en: {\n      title: \"Privacy Policy\",\n      subtitle: \"How we protect your data\",\n      lastUpdated: \"Last updated: August 29, 2025\",\n      sections: [\n        {\n          icon: Database,\n          title: \"Information We Collect\",\n          content: [\n            \"Account information: Username, email, and encrypted password\",\n            \"Game statistics: Scores, achievements, and playing patterns\", \n            \"Payment information: Processed securely through Stripe\",\n            \"Device information: Browser type and basic device details\"\n          ]\n        },\n        {\n          icon: Eye,\n          title: \"How We Use Your Information\",\n          content: [\n            \"Provide and improve our trivia game service\",\n            \"Track game progress and maintain leaderboards\",\n            \"Process payments for premium subscriptions\",\n            \"Send important updates about your account or service\"\n          ]\n        },\n        {\n          icon: Lock,\n          title: \"Data Protection\",\n          content: [\n            \"All passwords are encrypted using industry-standard bcrypt\",\n            \"Payment processing is handled securely by Stripe\",\n            \"We never store credit card information on our servers\",\n            \"Data is transmitted over secure HTTPS connections\"\n          ]\n        },\n        {\n          icon: Shield,\n          title: \"Your Rights\",\n          content: [\n            \"Access and download your personal data\",\n            \"Request deletion of your account and data\",\n            \"Opt out of non-essential communications\",\n            \"Update your information at any time\"\n          ]\n        }\n      ]\n    },\n    ar: {\n      title: \"سياسة الخصوصية\",\n      subtitle: \"كيف نحمي بياناتك\",\n      lastUpdated: \"آخر تحديث: 29 أغسطس 2025\",\n      sections: [\n        {\n          icon: Database,\n          title: \"المعلومات التي نجمعها\",\n          content: [\n            \"معلومات الحساب: اسم المستخدم والبريد الإلكتروني وكلمة المرور المشفرة\",\n            \"إحصائيات اللعبة: النقاط والإنجازات وأنماط اللعب\",\n            \"معلومات الدفع: تتم معالجتها بأمان من خلال Stripe\",\n            \"معلومات الجهاز: نوع المتصفح وتفاصيل الجهاز الأساسية\"\n          ]\n        },\n        {\n          icon: Eye,\n          title: \"كيف نستخدم معلوماتك\",\n          content: [\n            \"توفير وتحسين خدمة لعبة الأسئلة لدينا\",\n            \"تتبع تقدم اللعبة والحفاظ على لوحات المتصدرين\",\n            \"معالجة المدفوعات للاشتراكات المميزة\",\n            \"إرسال تحديثات مهمة حول حسابك أو الخدمة\"\n          ]\n        },\n        {\n          icon: Lock,\n          title: \"حماية البيانات\",\n          content: [\n            \"جميع كلمات المرور مشفرة باستخدام bcrypt المعياري في الصناعة\",\n            \"تتم معالجة المدفوعات بأمان بواسطة Stripe\",\n            \"نحن لا نخزن معلومات بطاقة الائتمان على خوادمنا مطلقاً\",\n            \"يتم نقل البيانات عبر اتصالات HTTPS آمنة\"\n          ]\n        },\n        {\n          icon: Shield,\n          title: \"حقوقك\",\n          content: [\n            \"الوصول إلى بياناتك الشخصية وتنزيلها\",\n            \"طلب حذف حسابك وبياناتك\",\n            \"إلغاء الاشتراك في الاتصالات غير الأساسية\",\n            \"تحديث معلوماتك في أي وقت\"\n          ]\n        }\n      ]\n    }\n  };\n\n  const content = privacyContent[language as keyof typeof privacyContent];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-primary/5 p-4 overflow-y-auto\" style={{ height: '100vh' }}>\n      <motion.div\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className=\"max-w-2xl mx-auto space-y-6 pb-40\"\n      >\n        {/* Header */}\n        <motion.div variants={itemVariants} className=\"flex items-center gap-4 mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setGameState('home')}\n            className=\"text-primary hover:bg-primary/10\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-primary\">{content.title}</h1>\n            <p className=\"text-sm text-muted-foreground\">{content.subtitle}</p>\n          </div>\n        </motion.div>\n\n        {/* Last Updated */}\n        <motion.div variants={itemVariants}>\n          <p className=\"text-sm text-muted-foreground text-center\">\n            {content.lastUpdated}\n          </p>\n        </motion.div>\n\n        {/* Privacy Sections */}\n        {content.sections.map((section, index) => (\n          <motion.div key={index} variants={itemVariants}>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <section.icon className=\"h-5 w-5 text-primary\" />\n                  {section.title}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2\">\n                  {section.content.map((item, itemIndex) => (\n                    <li key={itemIndex} className=\"flex items-start gap-2\">\n                      <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\" />\n                      <span className=\"text-sm text-muted-foreground\">{item}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n          </motion.div>\n        ))}\n\n        {/* Contact Information */}\n        <motion.div variants={itemVariants}>\n          <Card className=\"bg-primary/5 border-primary/20\">\n            <CardContent className=\"p-6 text-center\">\n              <h3 className=\"font-bold mb-2\">\n                {language === 'ar' ? 'اتصل بنا' : 'Contact Us'}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {language === 'ar' \n                  ? 'إذا كان لديك أي أسئلة حول سياسة الخصوصية هذه، يرجى الاتصال بنا.'\n                  : 'If you have any questions about this Privacy Policy, please contact us.'}\n              </p>\n              <p className=\"text-sm text-primary font-medium mt-2\">\n                privacy@mirage-trivia.com\n              </p>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":7849},"client/src/components/pages/TermsOfService.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { Button } from '../ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { ArrowLeft, FileText, AlertTriangle, CreditCard, Users } from 'lucide-react';\n\nexport default function TermsOfService() {\n  const { language } = useLanguage();\n  const { setGameState } = useTriviaGame();\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        delayChildren: 0.1,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { y: 20, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        type: \"spring\",\n        damping: 20,\n        stiffness: 300\n      }\n    }\n  };\n\n  const termsContent = {\n    en: {\n      title: \"Terms of Service\",\n      subtitle: \"Rules and guidelines for using MIRAGE\",\n      lastUpdated: \"Last updated: August 29, 2025\",\n      sections: [\n        {\n          icon: FileText,\n          title: \"Acceptance of Terms\",\n          content: [\n            \"By accessing and using MIRAGE trivia game, you accept these terms\",\n            \"You must be at least 13 years old to use our service\",\n            \"These terms may be updated periodically with notice\",\n            \"Continued use constitutes acceptance of any changes\"\n          ]\n        },\n        {\n          icon: Users,\n          title: \"User Accounts\",\n          content: [\n            \"You are responsible for maintaining account security\",\n            \"One account per person; sharing accounts is prohibited\",\n            \"You must provide accurate information during registration\",\n            \"We reserve the right to suspend accounts for policy violations\"\n          ]\n        },\n        {\n          icon: CreditCard,\n          title: \"Payments and Subscriptions\",\n          content: [\n            \"Premium subscriptions are billed monthly at $9.99/month\",\n            \"Payments are processed securely through Stripe\",\n            \"Refunds are provided according to our refund policy\",\n            \"Subscription cancellation takes effect at the end of billing period\"\n          ]\n        },\n        {\n          icon: AlertTriangle,\n          title: \"Prohibited Conduct\",\n          content: [\n            \"Cheating, hacking, or using automated tools\",\n            \"Sharing inappropriate content or harassment\",\n            \"Attempting to gain unauthorized access to our systems\",\n            \"Violating intellectual property rights\"\n          ]\n        }\n      ]\n    },\n    ar: {\n      title: \"شروط الخدمة\",\n      subtitle: \"القواعد والإرشادات لاستخدام MIRAGE\",\n      lastUpdated: \"آخر تحديث: 29 أغسطس 2025\",\n      sections: [\n        {\n          icon: FileText,\n          title: \"قبول الشروط\",\n          content: [\n            \"من خلال الوصول واستخدام لعبة MIRAGE للأسئلة، فإنك تقبل هذه الشروط\",\n            \"يجب أن تكون بعمر 13 سنة على الأقل لاستخدام خدمتنا\",\n            \"قد يتم تحديث هذه الشروط دورياً مع الإشعار\",\n            \"الاستخدام المستمر يشكل قبولاً لأي تغييرات\"\n          ]\n        },\n        {\n          icon: Users,\n          title: \"حسابات المستخدمين\",\n          content: [\n            \"أنت مسؤول عن الحفاظ على أمان الحساب\",\n            \"حساب واحد لكل شخص؛ مشاركة الحسابات محظورة\",\n            \"يجب تقديم معلومات دقيقة أثناء التسجيل\",\n            \"نحتفظ بالحق في تعليق الحسابات لانتهاك السياسات\"\n          ]\n        },\n        {\n          icon: CreditCard,\n          title: \"المدفوعات والاشتراكات\",\n          content: [\n            \"الاشتراكات المميزة تُفوتر شهرياً بـ 9.99 دولار/شهر\",\n            \"تتم معالجة المدفوعات بأمان من خلال Stripe\",\n            \"يتم توفير المبالغ المستردة وفقاً لسياسة الاسترداد الخاصة بنا\",\n            \"إلغاء الاشتراك يسري في نهاية فترة الفوترة\"\n          ]\n        },\n        {\n          icon: AlertTriangle,\n          title: \"السلوك المحظور\",\n          content: [\n            \"الغش أو القرصنة أو استخدام الأدوات الآلية\",\n            \"مشاركة محتوى غير لائق أو التحرش\",\n            \"محاولة الحصول على وصول غير مصرح به لأنظمتنا\",\n            \"انتهاك حقوق الملكية الفكرية\"\n          ]\n        }\n      ]\n    }\n  };\n\n  const content = termsContent[language as keyof typeof termsContent];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-primary/5 p-4 overflow-y-auto\" style={{ height: '100vh' }}>\n      <motion.div\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className=\"max-w-2xl mx-auto space-y-6 pb-40\"\n      >\n        {/* Header */}\n        <motion.div variants={itemVariants} className=\"flex items-center gap-4 mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setGameState('home')}\n            className=\"text-primary hover:bg-primary/10\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-primary\">{content.title}</h1>\n            <p className=\"text-sm text-muted-foreground\">{content.subtitle}</p>\n          </div>\n        </motion.div>\n\n        {/* Last Updated */}\n        <motion.div variants={itemVariants}>\n          <p className=\"text-sm text-muted-foreground text-center\">\n            {content.lastUpdated}\n          </p>\n        </motion.div>\n\n        {/* Terms Sections */}\n        {content.sections.map((section, index) => (\n          <motion.div key={index} variants={itemVariants}>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <section.icon className=\"h-5 w-5 text-primary\" />\n                  {section.title}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2\">\n                  {section.content.map((item, itemIndex) => (\n                    <li key={itemIndex} className=\"flex items-start gap-2\">\n                      <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\" />\n                      <span className=\"text-sm text-muted-foreground\">{item}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n          </motion.div>\n        ))}\n\n        {/* Legal Notice */}\n        <motion.div variants={itemVariants}>\n          <Card className=\"bg-primary/5 border-primary/20\">\n            <CardContent className=\"p-6 text-center\">\n              <h3 className=\"font-bold mb-2\">\n                {language === 'ar' ? 'إشعار قانوني' : 'Legal Notice'}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {language === 'ar' \n                  ? 'هذه الشروط محكومة بقوانين الولايات المتحدة الأمريكية. أي نزاعات ستحل من خلال التحكيم الملزم.'\n                  : 'These terms are governed by United States law. Any disputes will be resolved through binding arbitration.'}\n              </p>\n              <p className=\"text-sm text-primary font-medium mt-2\">\n                legal@mirage-trivia.com\n              </p>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":8107},"client/src/lib/stores/useTheme.tsx":{"content":"import { create } from \"zustand\";\nimport { getLocalStorage, setLocalStorage } from \"../localStorage\";\n\nexport type Theme = 'pink' | 'blue' | 'purple' | 'green';\n\ninterface ThemeColors {\n  primary: string;\n  primaryForeground: string;\n  secondary: string;\n  accent: string;\n  gradient: string;\n}\n\nconst themeColors: Record<Theme, ThemeColors> = {\n  pink: {\n    primary: '#FF69B4',\n    primaryForeground: '#ffffff',\n    secondary: '#FFB6C1',\n    accent: '#FF1493',\n    gradient: 'linear-gradient(135deg, #FF69B4, #FF1493)'\n  },\n  blue: {\n    primary: '#3B82F6',\n    primaryForeground: '#ffffff',\n    secondary: '#93C5FD',\n    accent: '#1D4ED8',\n    gradient: 'linear-gradient(135deg, #3B82F6, #1D4ED8)'\n  },\n  purple: {\n    primary: '#8B5CF6',\n    primaryForeground: '#ffffff',\n    secondary: '#C4B5FD',\n    accent: '#7C3AED',\n    gradient: 'linear-gradient(135deg, #8B5CF6, #7C3AED)'\n  },\n  green: {\n    primary: '#10B981',\n    primaryForeground: '#ffffff',\n    secondary: '#6EE7B7',\n    accent: '#059669',\n    gradient: 'linear-gradient(135deg, #10B981, #059669)'\n  }\n};\n\nexport const themeOptions = [\n  { id: 'pink' as Theme, name: 'Pink Paradise', color: '#FF69B4' },\n  { id: 'blue' as Theme, name: 'Ocean Blue', color: '#3B82F6' },\n  { id: 'purple' as Theme, name: 'Royal Purple', color: '#8B5CF6' },\n  { id: 'green' as Theme, name: 'Forest Green', color: '#10B981' }\n];\n\ninterface ThemeState {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n}\n\nconst applyTheme = (theme: Theme) => {\n  const colors = themeColors[theme];\n  const root = document.documentElement;\n  \n  // Convert hex to HSL for CSS variables (the existing format)\n  const hexToHsl = (hex: string) => {\n    const r = parseInt(hex.slice(1, 3), 16) / 255;\n    const g = parseInt(hex.slice(3, 5), 16) / 255;\n    const b = parseInt(hex.slice(5, 7), 16) / 255;\n\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0, s = 0, l = (max + min) / 2;\n\n    if (max !== min) {\n      const d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      switch (max) {\n        case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n        case g: h = (b - r) / d + 2; break;\n        case b: h = (r - g) / d + 4; break;\n      }\n      h /= 6;\n    }\n\n    return `${Math.round(h * 360)} ${Math.round(s * 100)}% ${Math.round(l * 100)}%`;\n  };\n\n  // Update the primary color in the existing CSS format\n  const primaryHsl = hexToHsl(colors.primary);\n  root.style.setProperty('--primary', primaryHsl);\n  root.style.setProperty('--ring', primaryHsl);\n  \n  console.log('Applied theme colors:', theme, primaryHsl);\n};\n\nexport const useTheme = create<ThemeState>((set, get) => {\n  const initialTheme = (getLocalStorage('mirage_theme') as Theme) || 'pink';\n  \n  // Apply initial theme\n  applyTheme(initialTheme);\n  \n  return {\n    theme: initialTheme,\n    \n    setTheme: (theme) => {\n      console.log('Setting theme to:', theme);\n      setLocalStorage('mirage_theme', theme);\n      applyTheme(theme);\n      set({ theme });\n    }\n  };\n});\n\n// Initialize theme on app load\nconst initialTheme = (getLocalStorage('mirage_theme') as Theme) || 'pink';\napplyTheme(initialTheme);","size_bytes":3159},"client/src/components/pages/FriendsList.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { useAuth } from '../../lib/stores/useAuth';\nimport { useLanguage } from '../../lib/stores/useLanguage';\nimport { useTriviaGame } from '../../lib/stores/useTriviaGame';\nimport { Button } from '../ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { Input } from '../ui/input';\nimport { \n  ArrowLeft, \n  Users,\n  UserPlus,\n  Copy,\n  Trophy,\n  Coins,\n  Search,\n  X,\n  Share2,\n  Gift\n} from 'lucide-react';\n\ninterface Friend {\n  id: number;\n  username: string;\n  rank: string;\n  coins: number;\n  level: number;\n  friendCode: string;\n  addedAt: string;\n}\n\nexport default function FriendsList() {\n  const { user, isAuthenticated } = useAuth();\n  const { language, translations } = useLanguage();\n  const { setGameState } = useTriviaGame();\n  const [friends, setFriends] = useState<Friend[]>([]);\n  const [friendCode, setFriendCode] = useState('');\n  const [myFriendCode, setMyFriendCode] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [message, setMessage] = useState('');\n  const [showAddFriend, setShowAddFriend] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  // Generate unique friend code for user\n  useEffect(() => {\n    if (user?.username) {\n      // Generate a unique code based on username and user ID\n      const code = `${user.username.toUpperCase()}${Math.random().toString(36).substr(2, 6).toUpperCase()}`;\n      setMyFriendCode(code);\n      \n      // Load friends from localStorage (in production, this would be from database)\n      const savedFriends = localStorage.getItem(`friends_${user.username}`);\n      if (savedFriends) {\n        setFriends(JSON.parse(savedFriends));\n      }\n    }\n  }, [user]);\n\n  // Copy friend code to clipboard\n  const copyFriendCode = async () => {\n    try {\n      await navigator.clipboard.writeText(myFriendCode);\n      setMessage(language === 'ar' ? '✅ تم نسخ الكود!' : '✅ Code copied!');\n      setTimeout(() => setMessage(''), 3000);\n    } catch (error) {\n      setMessage(language === 'ar' ? '❌ فشل النسخ' : '❌ Failed to copy');\n      setTimeout(() => setMessage(''), 3000);\n    }\n  };\n\n  // Share friend code\n  const shareFriendCode = async () => {\n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: 'Mirage Trivia Friend Code',\n          text: language === 'ar' \n            ? `أضفني كصديق في Mirage Trivia! الكود: ${myFriendCode}`\n            : `Add me as a friend on Mirage Trivia! Code: ${myFriendCode}`,\n          url: window.location.href\n        });\n      } catch (error) {\n        console.log('Share cancelled');\n      }\n    }\n  };\n\n  // Add friend by code\n  const addFriend = () => {\n    if (!friendCode.trim()) {\n      setMessage(language === 'ar' ? '❌ الرجاء إدخال كود' : '❌ Please enter a code');\n      setTimeout(() => setMessage(''), 3000);\n      return;\n    }\n\n    // Check if already friends\n    if (friends.some(f => f.friendCode === friendCode.toUpperCase())) {\n      setMessage(language === 'ar' ? '❌ مضاف بالفعل' : '❌ Already added');\n      setTimeout(() => setMessage(''), 3000);\n      return;\n    }\n\n    // Check if trying to add self\n    if (friendCode.toUpperCase() === myFriendCode) {\n      setMessage(language === 'ar' ? '❌ لا يمكنك إضافة نفسك' : \"❌ You can't add yourself\");\n      setTimeout(() => setMessage(''), 3000);\n      return;\n    }\n\n    // Simulate adding friend (in production, this would be an API call)\n    const newFriend: Friend = {\n      id: friends.length + 1,\n      username: `Player_${friendCode.substr(0, 4)}`,\n      rank: ['Bronze', 'Silver', 'Gold'][Math.floor(Math.random() * 3)],\n      coins: Math.floor(Math.random() * 5000),\n      level: Math.floor(Math.random() * 20) + 1,\n      friendCode: friendCode.toUpperCase(),\n      addedAt: new Date().toISOString()\n    };\n\n    const updatedFriends = [...friends, newFriend];\n    setFriends(updatedFriends);\n    \n    // Save to localStorage\n    if (user?.username) {\n      localStorage.setItem(`friends_${user.username}`, JSON.stringify(updatedFriends));\n    }\n\n    setMessage(language === 'ar' ? '✅ تمت الإضافة بنجاح!' : '✅ Friend added successfully!');\n    setFriendCode('');\n    setShowAddFriend(false);\n    setTimeout(() => setMessage(''), 3000);\n  };\n\n  // Remove friend\n  const removeFriend = (friendId: number) => {\n    const updatedFriends = friends.filter(f => f.id !== friendId);\n    setFriends(updatedFriends);\n    \n    // Save to localStorage\n    if (user?.username) {\n      localStorage.setItem(`friends_${user.username}`, JSON.stringify(updatedFriends));\n    }\n    \n    setMessage(language === 'ar' ? '✅ تمت الإزالة' : '✅ Friend removed');\n    setTimeout(() => setMessage(''), 3000);\n  };\n\n  // Filter friends by search term\n  const filteredFriends = friends.filter(friend =>\n    friend.username.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        delayChildren: 0.1,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { y: 20, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        type: \"spring\",\n        damping: 20,\n        stiffness: 300\n      }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-primary/5 p-4 overflow-y-auto\" style={{ height: '100vh' }}>\n      <motion.div\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className=\"max-w-md mx-auto space-y-4 pb-40\"\n      >\n        {/* Header */}\n        <motion.div variants={itemVariants} className=\"flex items-center gap-4 mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setGameState('profile')}\n            className=\"text-primary hover:bg-primary/10\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-primary\">\n              {language === 'ar' ? 'قائمة الأصدقاء' : 'Friends List'}\n            </h1>\n            <p className=\"text-sm text-muted-foreground\">\n              {language === 'ar' ? 'تواصل مع أصدقائك' : 'Connect with your friends'}\n            </p>\n          </div>\n        </motion.div>\n\n        {/* My Friend Code Card */}\n        <motion.div variants={itemVariants}>\n          <Card className=\"bg-gradient-to-r from-primary/10 to-accent/10 border-primary/20\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Gift className=\"h-5 w-5 text-primary\" />\n                {language === 'ar' ? 'كود الصداقة الخاص بك' : 'Your Friend Code'}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg mb-3\">\n                <div>\n                  <p className=\"text-xs text-muted-foreground mb-1\">\n                    {language === 'ar' ? 'شارك هذا الكود' : 'Share this code'}\n                  </p>\n                  <p className=\"font-mono font-bold text-xl\">{myFriendCode}</p>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button size=\"sm\" variant=\"outline\" onClick={copyFriendCode}>\n                    <Copy className=\"h-4 w-4\" />\n                  </Button>\n                  <Button size=\"sm\" variant=\"outline\" onClick={shareFriendCode}>\n                    <Share2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              {message && (\n                <p className=\"text-sm text-center p-2 rounded-lg bg-muted/30\">\n                  {message}\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Add Friend Section */}\n        <motion.div variants={itemVariants}>\n          {!showAddFriend ? (\n            <Button \n              className=\"w-full\"\n              onClick={() => setShowAddFriend(true)}\n            >\n              <UserPlus className=\"h-4 w-4 mr-2\" />\n              {language === 'ar' ? 'إضافة صديق' : 'Add Friend'}\n            </Button>\n          ) : (\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"space-y-3\">\n                  <Input\n                    placeholder={language === 'ar' ? 'أدخل كود الصديق' : 'Enter friend code'}\n                    value={friendCode}\n                    onChange={(e) => setFriendCode(e.target.value.toUpperCase())}\n                    className=\"font-mono\"\n                  />\n                  <div className=\"flex gap-2\">\n                    <Button onClick={addFriend} className=\"flex-1\">\n                      {language === 'ar' ? 'إضافة' : 'Add'}\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => {\n                        setShowAddFriend(false);\n                        setFriendCode('');\n                      }}\n                    >\n                      {language === 'ar' ? 'إلغاء' : 'Cancel'}\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </motion.div>\n\n        {/* Search Friends */}\n        {friends.length > 0 && (\n          <motion.div variants={itemVariants}>\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder={language === 'ar' ? 'البحث عن صديق...' : 'Search friends...'}\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </motion.div>\n        )}\n\n        {/* Friends List */}\n        <motion.div variants={itemVariants} className=\"space-y-3\">\n          {filteredFriends.length > 0 ? (\n            filteredFriends.map((friend) => (\n              <Card key={friend.id} className=\"overflow-hidden\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-12 h-12 rounded-full bg-primary/20 flex items-center justify-center\">\n                        <Users className=\"h-6 w-6 text-primary\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">{friend.username}</p>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {friend.rank}\n                          </Badge>\n                          <span className=\"text-xs text-muted-foreground\">\n                            Lvl {friend.level}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"text-right\">\n                        <div className=\"flex items-center gap-1\">\n                          <Coins className=\"h-3 w-3 text-yellow-500\" />\n                          <span className=\"text-sm font-medium\">\n                            {friend.coins.toLocaleString()}\n                          </span>\n                        </div>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => removeFriend(friend.id)}\n                        className=\"text-red-500 hover:bg-red-500/10\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-3\" />\n                <p className=\"text-muted-foreground\">\n                  {searchTerm \n                    ? (language === 'ar' ? 'لا توجد نتائج' : 'No results found')\n                    : (language === 'ar' ? 'لا يوجد أصدقاء بعد' : 'No friends yet')}\n                </p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  {language === 'ar' \n                    ? 'شارك كودك أو أضف أصدقاء جدد!'\n                    : 'Share your code or add new friends!'}\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </motion.div>\n\n        {/* Friends Count */}\n        {friends.length > 0 && (\n          <motion.div variants={itemVariants} className=\"text-center text-sm text-muted-foreground\">\n            {language === 'ar' \n              ? `${friends.length} صديق`\n              : `${friends.length} friend${friends.length !== 1 ? 's' : ''}`}\n          </motion.div>\n        )}\n      </motion.div>\n    </div>\n  );\n}","size_bytes":13593},"client/src/components/3d/InteractivePlanets.tsx":{"content":"import React, { useRef, useState } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Sphere, Text, Float } from '@react-three/drei';\nimport * as THREE from 'three';\n\ninterface PlanetProps {\n  position: [number, number, number];\n  category: string;\n  label: string;\n  color: string;\n  emissiveColor: string;\n  onClick: () => void;\n  icon?: string;\n}\n\nfunction Planet({ position, category, label, color, emissiveColor, onClick, icon }: PlanetProps) {\n  const meshRef = useRef<THREE.Mesh>(null);\n  const [hovered, setHovered] = useState(false);\n  const [clicked, setClicked] = useState(false);\n\n  useFrame((state) => {\n    if (meshRef.current) {\n      // Base rotation\n      meshRef.current.rotation.y += hovered ? 0.01 : 0.002;\n      \n      // Pulsing effect when hovered\n      if (hovered) {\n        const scale = 1 + Math.sin(state.clock.elapsedTime * 3) * 0.05;\n        meshRef.current.scale.setScalar(scale);\n      } else if (!clicked) {\n        meshRef.current.scale.setScalar(1);\n      }\n    }\n  });\n\n  const handleClick = () => {\n    setClicked(true);\n    setTimeout(() => {\n      onClick();\n      setClicked(false);\n    }, 600);\n  };\n\n  return (\n    <Float\n      speed={2}\n      rotationIntensity={0.5}\n      floatIntensity={0.5}\n    >\n      <group position={position}>\n        <Sphere\n          ref={meshRef}\n          args={[2, 32, 32]}\n          onPointerOver={() => setHovered(true)}\n          onPointerOut={() => setHovered(false)}\n          onClick={handleClick}\n        >\n          <meshStandardMaterial\n            color={color}\n            emissive={emissiveColor}\n            emissiveIntensity={hovered ? 0.8 : 0.3}\n            roughness={0.3}\n            metalness={0.7}\n          />\n        </Sphere>\n        \n        {/* Glow effect */}\n        {hovered && (\n          <Sphere args={[2.2, 16, 16]}>\n            <meshBasicMaterial\n              color={emissiveColor}\n              transparent\n              opacity={0.2}\n              side={THREE.BackSide}\n            />\n          </Sphere>\n        )}\n        \n        {/* Planet label */}\n        <Text\n          position={[0, -3, 0]}\n          fontSize={0.5}\n          color={hovered ? '#fbbf24' : '#ffffff'}\n          anchorX=\"center\"\n          anchorY=\"middle\"\n        >\n          {label}\n        </Text>\n        \n        {/* Category icon */}\n        {icon && (\n          <Text\n            position={[0, 0, 2.1]}\n            fontSize={1}\n            anchorX=\"center\"\n            anchorY=\"middle\"\n          >\n            {icon}\n          </Text>\n        )}\n        \n        {/* Orbital ring when hovered */}\n        {hovered && (\n          <mesh rotation={[Math.PI / 2, 0, 0]}>\n            <torusGeometry args={[3, 0.05, 8, 64]} />\n            <meshBasicMaterial color={emissiveColor} />\n          </mesh>\n        )}\n      </group>\n    </Float>\n  );\n}\n\ninterface InteractivePlanetsProps {\n  onCategorySelect: (category: string) => void;\n}\n\nexport function InteractivePlanets({ onCategorySelect }: InteractivePlanetsProps) {\n  const planets = [\n    {\n      category: 'general-knowledge',\n      label: 'Knowledge',\n      position: [-8, 4, -5] as [number, number, number],\n      color: '#6b46c1',\n      emissiveColor: '#a78bfa',\n      icon: '🧠'\n    },\n    {\n      category: 'sports',\n      label: 'Sports',\n      position: [8, 2, -5] as [number, number, number],\n      color: '#059669',\n      emissiveColor: '#10b981',\n      icon: '⚽'\n    },\n    {\n      category: 'science',\n      label: 'Science',\n      position: [-6, -3, -8] as [number, number, number],\n      color: '#2563eb',\n      emissiveColor: '#60a5fa',\n      icon: '🔬'\n    },\n    {\n      category: 'history',\n      label: 'History',\n      position: [6, -2, -6] as [number, number, number],\n      color: '#92400e',\n      emissiveColor: '#d97706',\n      icon: '🏛️'\n    },\n    {\n      category: 'music',\n      label: 'Music',\n      position: [0, 5, -10] as [number, number, number],\n      color: '#db2777',\n      emissiveColor: '#f472b6',\n      icon: '🎵'\n    },\n    {\n      category: 'movies',\n      label: 'Movies',\n      position: [-10, 0, -7] as [number, number, number],\n      color: '#7c3aed',\n      emissiveColor: '#c084fc',\n      icon: '🎬'\n    },\n    {\n      category: 'news',\n      label: 'News',\n      position: [10, -4, -9] as [number, number, number],\n      color: '#dc2626',\n      emissiveColor: '#f87171',\n      icon: '📰'\n    },\n    {\n      category: 'nature',\n      label: 'Nature',\n      position: [0, -5, -12] as [number, number, number],\n      color: '#059669',\n      emissiveColor: '#34d399',\n      icon: '🌿'\n    }\n  ];\n\n  return (\n    <>\n      {planets.map((planet) => (\n        <Planet\n          key={planet.category}\n          {...planet}\n          onClick={() => onCategorySelect(planet.category)}\n        />\n      ))}\n    </>\n  );\n}","size_bytes":4827},"client/src/components/3d/NebulaClouds.tsx":{"content":"import React, { useRef, useMemo } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Clouds, Cloud } from '@react-three/drei';\nimport * as THREE from 'three';\n\nexport function NebulaClouds() {\n  const cloudsRef = useRef<THREE.Group>(null);\n\n  useFrame((state) => {\n    if (cloudsRef.current) {\n      cloudsRef.current.rotation.y = state.clock.elapsedTime * 0.001;\n      cloudsRef.current.rotation.z = Math.sin(state.clock.elapsedTime * 0.0005) * 0.05;\n    }\n  });\n\n  return (\n    <group ref={cloudsRef}>\n      <Clouds material={THREE.MeshBasicMaterial}>\n        <Cloud \n          segments={40} \n          bounds={[30, 20, 30]} \n          volume={50}\n          position={[20, 5, -30]}\n          color=\"#6b46c1\"\n          opacity={0.3}\n          fade={100}\n        />\n        <Cloud \n          segments={40} \n          bounds={[30, 20, 30]} \n          volume={50}\n          position={[-20, -5, -35]}\n          color=\"#2563eb\"\n          opacity={0.3}\n          fade={100}\n        />\n        <Cloud \n          segments={30} \n          bounds={[20, 15, 20]} \n          volume={30}\n          position={[0, 10, -40]}\n          color=\"#a78bfa\"\n          opacity={0.25}\n          fade={100}\n        />\n      </Clouds>\n      \n      {/* Additional nebula fog layers */}\n      <mesh position={[10, 0, -50]} scale={[40, 40, 1]}>\n        <planeGeometry />\n        <meshBasicMaterial\n          color=\"#581c87\"\n          transparent\n          opacity={0.2}\n          side={THREE.DoubleSide}\n          blending={THREE.AdditiveBlending}\n        />\n      </mesh>\n      \n      <mesh position={[-10, 5, -45]} scale={[35, 35, 1]} rotation={[0, 0.5, 0]}>\n        <planeGeometry />\n        <meshBasicMaterial\n          color=\"#1e3a8a\"\n          transparent\n          opacity={0.15}\n          side={THREE.DoubleSide}\n          blending={THREE.AdditiveBlending}\n        />\n      </mesh>\n    </group>\n  );\n}","size_bytes":1899},"client/src/components/3d/ParticleField.tsx":{"content":"import React, { useRef, useMemo } from 'react';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\n\ninterface ParticleFieldProps {\n  count?: number;\n  quality?: 'low' | 'medium' | 'high' | 'ultra';\n}\n\nexport function ParticleField({ quality = 'high' }: ParticleFieldProps) {\n  const particlesRef = useRef<THREE.Points>(null);\n  const { mouse } = useThree();\n  \n  const particleCount = useMemo(() => {\n    switch (quality) {\n      case 'ultra': return 1000;\n      case 'high': return 500;\n      case 'medium': return 250;\n      case 'low': return 100;\n      default: return 500;\n    }\n  }, [quality]);\n\n  const [positions, velocities] = useMemo(() => {\n    const positions = new Float32Array(particleCount * 3);\n    const velocities = new Float32Array(particleCount * 3);\n    \n    for (let i = 0; i < particleCount; i++) {\n      const i3 = i * 3;\n      \n      // Random position in space\n      positions[i3] = (Math.random() - 0.5) * 100;\n      positions[i3 + 1] = (Math.random() - 0.5) * 100;\n      positions[i3 + 2] = (Math.random() - 0.5) * 50 - 10;\n      \n      // Random velocity\n      velocities[i3] = (Math.random() - 0.5) * 0.02;\n      velocities[i3 + 1] = (Math.random() - 0.5) * 0.02;\n      velocities[i3 + 2] = (Math.random() - 0.5) * 0.02;\n    }\n    \n    return [positions, velocities];\n  }, [particleCount]);\n\n  useFrame((state) => {\n    if (particlesRef.current) {\n      const positions = particlesRef.current.geometry.attributes.position.array as Float32Array;\n      const time = state.clock.elapsedTime;\n      \n      for (let i = 0; i < particleCount; i++) {\n        const i3 = i * 3;\n        \n        // Update position based on velocity\n        positions[i3] += velocities[i3];\n        positions[i3 + 1] += velocities[i3 + 1];\n        positions[i3 + 2] += velocities[i3 + 2];\n        \n        // Add mouse influence\n        const mouseInfluence = 0.1;\n        positions[i3] += mouse.x * mouseInfluence * 0.01;\n        positions[i3 + 1] += mouse.y * mouseInfluence * 0.01;\n        \n        // Wrap around boundaries\n        if (Math.abs(positions[i3]) > 50) positions[i3] *= -0.95;\n        if (Math.abs(positions[i3 + 1]) > 50) positions[i3 + 1] *= -0.95;\n        if (Math.abs(positions[i3 + 2]) > 30) positions[i3 + 2] *= -0.95;\n        \n        // Add wave motion\n        positions[i3 + 1] += Math.sin(time * 0.5 + i * 0.1) * 0.01;\n      }\n      \n      particlesRef.current.geometry.attributes.position.needsUpdate = true;\n    }\n  });\n\n  return (\n    <points ref={particlesRef}>\n      <bufferGeometry>\n        <bufferAttribute\n          attach=\"attributes-position\"\n          count={particleCount}\n          array={positions}\n          itemSize={3}\n        />\n      </bufferGeometry>\n      <pointsMaterial\n        color=\"#60a5fa\"\n        size={0.1}\n        transparent\n        opacity={0.6}\n        sizeAttenuation\n        blending={THREE.AdditiveBlending}\n      />\n    </points>\n  );\n}","size_bytes":2942},"client/src/components/3d/SpaceBackground.tsx":{"content":"import React, { useRef, useMemo } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\n\ninterface SpaceBackgroundProps {\n  quality?: 'low' | 'medium' | 'high' | 'ultra';\n}\n\nexport function SpaceBackground({ quality = 'high' }: SpaceBackgroundProps) {\n  const starsRef = useRef<THREE.Points>(null);\n  \n  // Determine star count based on quality\n  const starCount = useMemo(() => {\n    switch (quality) {\n      case 'ultra': return 5000;\n      case 'high': return 3000;\n      case 'medium': return 1500;\n      case 'low': return 500;\n      default: return 3000;\n    }\n  }, [quality]);\n\n  // Generate star positions and colors\n  const [positions, colors] = useMemo(() => {\n    const positions = new Float32Array(starCount * 3);\n    const colors = new Float32Array(starCount * 3);\n    \n    for (let i = 0; i < starCount; i++) {\n      const i3 = i * 3;\n      \n      // Random position in sphere\n      const radius = 100 + Math.random() * 500;\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.acos(2 * Math.random() - 1);\n      \n      positions[i3] = radius * Math.sin(phi) * Math.cos(theta);\n      positions[i3 + 1] = radius * Math.sin(phi) * Math.sin(theta);\n      positions[i3 + 2] = radius * Math.cos(phi);\n      \n      // Star colors (white to yellow gradient)\n      const intensity = 0.5 + Math.random() * 0.5;\n      colors[i3] = intensity; // R\n      colors[i3 + 1] = intensity * (0.8 + Math.random() * 0.2); // G\n      colors[i3 + 2] = intensity * (0.6 + Math.random() * 0.4); // B\n    }\n    \n    return [positions, colors];\n  }, [starCount]);\n\n  // Store original colors for twinkling effect\n  const originalColors = useMemo(() => new Float32Array(colors), [colors]);\n  \n  // Animate star twinkling and rotation\n  useFrame((state) => {\n    if (starsRef.current) {\n      starsRef.current.rotation.y += 0.0001;\n      starsRef.current.rotation.x += 0.00005;\n      \n      // Twinkling effect\n      const time = state.clock.elapsedTime;\n      const colorAttribute = starsRef.current.geometry.attributes.color;\n      const currentColors = colorAttribute.array as Float32Array;\n      \n      for (let i = 0; i < starCount; i++) {\n        const i3 = i * 3;\n        const twinkle = Math.sin(time * (1 + i * 0.1)) * 0.1 + 0.9;\n        currentColors[i3] = originalColors[i3] * twinkle;\n        currentColors[i3 + 1] = originalColors[i3 + 1] * twinkle;\n        currentColors[i3 + 2] = originalColors[i3 + 2] * twinkle;\n      }\n      \n      colorAttribute.needsUpdate = true;\n    }\n  });\n\n  return (\n    <points ref={starsRef}>\n      <bufferGeometry>\n        <bufferAttribute\n          attach=\"attributes-position\"\n          count={starCount}\n          array={positions}\n          itemSize={3}\n        />\n        <bufferAttribute\n          attach=\"attributes-color\"\n          count={starCount}\n          array={colors}\n          itemSize={3}\n        />\n      </bufferGeometry>\n      <pointsMaterial\n        size={quality === 'ultra' ? 2 : quality === 'high' ? 1.5 : 1}\n        vertexColors\n        transparent\n        opacity={0.8}\n        sizeAttenuation\n        blending={THREE.AdditiveBlending}\n      />\n    </points>\n  );\n}","size_bytes":3179},"client/src/components/3d/SpaceScene.tsx":{"content":"import React, { Suspense, useState, useEffect } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, PerspectiveCamera, Stars, Preload } from '@react-three/drei';\nimport { EffectComposer, Bloom, ChromaticAberration } from '@react-three/postprocessing';\nimport { SpaceBackground } from './SpaceBackground';\nimport { InteractivePlanets } from './InteractivePlanets';\nimport { ParticleField } from './ParticleField';\nimport { NebulaClouds } from './NebulaClouds';\nimport { useQualitySettings } from '../../hooks/useQualitySettings';\n\ninterface SpaceSceneProps {\n  onCategorySelect?: (category: string) => void;\n  enableInteraction?: boolean;\n}\n\nexport function SpaceScene({ onCategorySelect, enableInteraction = true }: SpaceSceneProps) {\n  const { quality, postProcessing } = useQualitySettings();\n\n  return (\n    <div className=\"fixed inset-0 -z-10\">\n      <Canvas\n        dpr={[1, 2]}\n        gl={{ \n          antialias: quality !== 'low',\n          alpha: true,\n          powerPreference: 'high-performance'\n        }}\n      >\n        <Suspense fallback={null}>\n          <PerspectiveCamera\n            makeDefault\n            position={[0, 0, 20]}\n            fov={75}\n            near={0.1}\n            far={1000}\n          />\n          \n          {/* Lighting */}\n          <ambientLight intensity={0.2} />\n          <pointLight position={[10, 10, 10]} intensity={0.5} color=\"#fbbf24\" />\n          <pointLight position={[-10, -10, -10]} intensity={0.3} color=\"#60a5fa\" />\n          <directionalLight position={[0, 5, 5]} intensity={0.4} color=\"#a78bfa\" />\n          \n          {/* Space environment */}\n          <SpaceBackground quality={quality} />\n          <Stars\n            radius={300}\n            depth={100}\n            count={quality === 'ultra' ? 10000 : quality === 'high' ? 7000 : 5000}\n            factor={4}\n            saturation={0.5}\n            fade\n            speed={0.5}\n          />\n          \n          {/* Nebula clouds */}\n          {quality !== 'low' && <NebulaClouds />}\n          \n          {/* Particle effects */}\n          {quality !== 'low' && <ParticleField quality={quality} />}\n          \n          {/* Interactive planets */}\n          {enableInteraction && onCategorySelect && (\n            <InteractivePlanets onCategorySelect={onCategorySelect} />\n          )}\n          \n          {/* Camera controls */}\n          <OrbitControls\n            enablePan={false}\n            enableZoom={enableInteraction}\n            maxDistance={50}\n            minDistance={10}\n            autoRotate\n            autoRotateSpeed={0.2}\n            rotateSpeed={0.5}\n          />\n          \n          {/* Post-processing effects */}\n          {postProcessing && quality !== 'low' && (\n            <EffectComposer>\n              <Bloom\n                intensity={0.5}\n                luminanceThreshold={0.3}\n                luminanceSmoothing={0.9}\n                radius={0.8}\n              />\n              {quality === 'ultra' && (\n                <ChromaticAberration\n                  offset={[0.001, 0.001]}\n                  radialModulation={false}\n                  modulationOffset={0}\n                />\n              )}\n            </EffectComposer>\n          )}\n          \n          <Preload all />\n        </Suspense>\n      </Canvas>\n    </div>\n  );\n}","size_bytes":3321},"client/src/components/effects/WarpSpeed.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ninterface WarpSpeedProps {\n  active: boolean;\n  duration?: number;\n  onComplete?: () => void;\n}\n\nexport function WarpSpeed({ active, duration = 1, onComplete }: WarpSpeedProps) {\n  const [lines, setLines] = useState<Array<{ id: number; x: number; y: number }>>([]);\n\n  useEffect(() => {\n    if (active) {\n      const newLines = Array.from({ length: 100 }, (_, i) => ({\n        id: i,\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight\n      }));\n      setLines(newLines);\n    }\n  }, [active]);\n\n  return (\n    <AnimatePresence>\n      {active && (\n        <motion.div\n          className=\"fixed inset-0 z-50 pointer-events-none overflow-hidden\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onAnimationComplete={onComplete}\n        >\n          {/* Background fade */}\n          <motion.div\n            className=\"absolute inset-0 bg-black\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 0.8 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: duration * 0.5 }}\n          />\n          \n          {/* Warp lines */}\n          {lines.map((line) => (\n            <motion.div\n              key={line.id}\n              className=\"absolute w-[2px] bg-gradient-to-b from-transparent via-white to-transparent\"\n              style={{\n                left: line.x,\n                top: line.y,\n                transformOrigin: 'center'\n              }}\n              initial={{ \n                height: 2,\n                opacity: 0,\n                scale: 0\n              }}\n              animate={{ \n                height: Math.random() * 200 + 100,\n                opacity: [0, 1, 0],\n                scale: [0, 1, 0],\n                x: (window.innerWidth / 2 - line.x) * 2,\n                y: (window.innerHeight / 2 - line.y) * 2\n              }}\n              transition={{\n                duration: duration,\n                ease: \"easeInOut\",\n                delay: Math.random() * 0.2\n              }}\n            />\n          ))}\n          \n          {/* Center burst */}\n          <motion.div\n            className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\"\n            initial={{ scale: 0, opacity: 0 }}\n            animate={{ \n              scale: [0, 20, 25],\n              opacity: [0, 0.5, 0]\n            }}\n            transition={{\n              duration: duration,\n              ease: \"easeOut\"\n            }}\n          >\n            <div className=\"w-20 h-20 rounded-full bg-gradient-to-r from-purple-400 to-blue-400 blur-xl\" />\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}","size_bytes":2802},"client/src/components/ui/HologramCard.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '../../lib/utils';\n\ninterface HologramCardProps {\n  children: React.ReactNode;\n  className?: string;\n  glowColor?: string;\n  floatAnimation?: boolean;\n}\n\nexport function HologramCard({ \n  children, \n  className,\n  glowColor = 'rgba(139, 92, 246, 0.5)',\n  floatAnimation = true\n}: HologramCardProps) {\n  const floatVariants = {\n    animate: {\n      y: [-5, 5, -5],\n      transition: {\n        duration: 4,\n        repeat: Infinity,\n        ease: \"easeInOut\"\n      }\n    }\n  };\n\n  return (\n    <motion.div\n      variants={floatAnimation ? floatVariants : undefined}\n      animate={floatAnimation ? \"animate\" : undefined}\n      className={cn(\n        \"relative p-[2px] rounded-2xl\",\n        className\n      )}\n      style={{\n        background: `linear-gradient(135deg, ${glowColor}, transparent, ${glowColor})`,\n        boxShadow: `0 0 40px ${glowColor}`\n      }}\n    >\n      {/* Main card content */}\n      <div className=\"relative rounded-2xl bg-black/80 backdrop-blur-xl p-6 overflow-hidden\">\n        {/* Holographic grid pattern */}\n        <div className=\"absolute inset-0 opacity-10\">\n          <div \n            className=\"absolute inset-0\"\n            style={{\n              backgroundImage: `\n                linear-gradient(0deg, rgba(139, 92, 246, 0.1) 1px, transparent 1px),\n                linear-gradient(90deg, rgba(139, 92, 246, 0.1) 1px, transparent 1px)\n              `,\n              backgroundSize: '20px 20px'\n            }}\n          />\n        </div>\n        \n        {/* Scanning line effect */}\n        <motion.div\n          className=\"absolute inset-x-0 h-[2px] bg-gradient-to-r from-transparent via-cyan-400 to-transparent opacity-50\"\n          animate={{\n            y: [-100, 500, -100]\n          }}\n          transition={{\n            duration: 5,\n            repeat: Infinity,\n            ease: \"linear\"\n          }}\n        />\n        \n        {/* Content */}\n        <div className=\"relative z-10\">\n          {children}\n        </div>\n        \n        {/* Corner highlights */}\n        <div className=\"absolute top-0 left-0 w-8 h-8\">\n          <div className=\"absolute top-0 left-0 w-full h-[2px] bg-gradient-to-r from-purple-400 to-transparent\" />\n          <div className=\"absolute top-0 left-0 h-full w-[2px] bg-gradient-to-b from-purple-400 to-transparent\" />\n        </div>\n        <div className=\"absolute top-0 right-0 w-8 h-8\">\n          <div className=\"absolute top-0 right-0 w-full h-[2px] bg-gradient-to-l from-blue-400 to-transparent\" />\n          <div className=\"absolute top-0 right-0 h-full w-[2px] bg-gradient-to-b from-blue-400 to-transparent\" />\n        </div>\n        <div className=\"absolute bottom-0 left-0 w-8 h-8\">\n          <div className=\"absolute bottom-0 left-0 w-full h-[2px] bg-gradient-to-r from-purple-400 to-transparent\" />\n          <div className=\"absolute bottom-0 left-0 h-full w-[2px] bg-gradient-to-t from-purple-400 to-transparent\" />\n        </div>\n        <div className=\"absolute bottom-0 right-0 w-8 h-8\">\n          <div className=\"absolute bottom-0 right-0 w-full h-[2px] bg-gradient-to-l from-blue-400 to-transparent\" />\n          <div className=\"absolute bottom-0 right-0 h-full w-[2px] bg-gradient-to-t from-blue-400 to-transparent\" />\n        </div>\n      </div>\n    </motion.div>\n  );\n}","size_bytes":3352},"client/src/components/ui/SpaceButton.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '../../lib/utils';\n\ninterface SpaceButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary' | 'danger';\n  size?: 'sm' | 'md' | 'lg';\n  glow?: boolean;\n  children: React.ReactNode;\n}\n\nexport function SpaceButton({\n  variant = 'primary',\n  size = 'md',\n  glow = true,\n  className,\n  children,\n  disabled,\n  ...props\n}: SpaceButtonProps) {\n  const baseStyles = `\n    relative overflow-hidden\n    backdrop-blur-md\n    border border-white/20\n    transition-all duration-300\n    disabled:opacity-50 disabled:cursor-not-allowed\n    before:absolute before:inset-0\n    before:bg-gradient-to-r before:opacity-0\n    before:transition-opacity before:duration-300\n    hover:before:opacity-100\n  `;\n\n  const variants = {\n    primary: `\n      bg-gradient-to-r from-purple-600/20 to-blue-600/20\n      hover:from-purple-600/40 hover:to-blue-600/40\n      before:from-purple-400/30 before:to-blue-400/30\n      text-white\n      ${glow ? 'shadow-[0_0_20px_rgba(139,92,246,0.5)]' : ''}\n    `,\n    secondary: `\n      bg-gradient-to-r from-cyan-600/20 to-teal-600/20\n      hover:from-cyan-600/40 hover:to-teal-600/40\n      before:from-cyan-400/30 before:to-teal-400/30\n      text-cyan-100\n      ${glow ? 'shadow-[0_0_20px_rgba(6,182,212,0.5)]' : ''}\n    `,\n    danger: `\n      bg-gradient-to-r from-red-600/20 to-orange-600/20\n      hover:from-red-600/40 hover:to-orange-600/40\n      before:from-red-400/30 before:to-orange-400/30\n      text-red-100\n      ${glow ? 'shadow-[0_0_20px_rgba(239,68,68,0.5)]' : ''}\n    `\n  };\n\n  const sizes = {\n    sm: 'px-3 py-1.5 text-sm rounded-lg',\n    md: 'px-5 py-2.5 text-base rounded-xl',\n    lg: 'px-7 py-3.5 text-lg rounded-2xl'\n  };\n\n  return (\n    <motion.button\n      whileHover={{ scale: disabled ? 1 : 1.05 }}\n      whileTap={{ scale: disabled ? 1 : 0.95 }}\n      className={cn(\n        baseStyles,\n        variants[variant],\n        sizes[size],\n        className\n      )}\n      disabled={disabled}\n      {...props}\n    >\n      <span className=\"relative z-10 font-medium\">{children}</span>\n      \n      {/* Animated border effect */}\n      <motion.div\n        className=\"absolute inset-0 rounded-inherit\"\n        initial={{ opacity: 0 }}\n        whileHover={{ opacity: 1 }}\n        transition={{ duration: 0.3 }}\n      >\n        <div className=\"absolute inset-0 rounded-inherit animate-pulse bg-gradient-to-r from-purple-400/20 via-blue-400/20 to-purple-400/20\" />\n      </motion.div>\n      \n      {/* Click ripple effect */}\n      <motion.div\n        className=\"absolute inset-0 rounded-inherit\"\n        initial={{ scale: 0, opacity: 0 }}\n        whileTap={{ scale: 2, opacity: 0 }}\n        transition={{ duration: 0.5 }}\n        style={{\n          background: 'radial-gradient(circle, rgba(255,255,255,0.5) 0%, transparent 70%)'\n        }}\n      />\n    </motion.button>\n  );\n}","size_bytes":2933},"client/src/hooks/useQualitySettings.ts":{"content":"import { useState, useEffect } from 'react';\n\ntype QualityLevel = 'low' | 'medium' | 'high' | 'ultra';\n\ninterface QualitySettings {\n  quality: QualityLevel;\n  postProcessing: boolean;\n  shadows: boolean;\n  particleCount: number;\n  starCount: number;\n  setQuality: (level: QualityLevel) => void;\n  autoDetect: () => void;\n}\n\nexport function useQualitySettings(): QualitySettings {\n  const [quality, setQuality] = useState<QualityLevel>('high');\n  const [fps, setFps] = useState<number[]>([]);\n\n  // Auto-detect quality based on device and performance\n  useEffect(() => {\n    const detectQuality = () => {\n      // Check if mobile\n      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n      \n      if (isMobile) {\n        setQuality('medium');\n        return;\n      }\n\n      // Check device memory if available\n      const deviceMemory = (navigator as any).deviceMemory;\n      if (deviceMemory) {\n        if (deviceMemory <= 4) {\n          setQuality('medium');\n        } else if (deviceMemory >= 8) {\n          setQuality('ultra');\n        } else {\n          setQuality('high');\n        }\n        return;\n      }\n\n      // Default to high for desktop\n      setQuality('high');\n    };\n\n    detectQuality();\n  }, []);\n\n  // Monitor FPS and adjust quality if needed\n  useEffect(() => {\n    let frameCount = 0;\n    let lastTime = performance.now();\n    let animationId: number;\n\n    const measureFPS = () => {\n      frameCount++;\n      const currentTime = performance.now();\n      \n      if (currentTime >= lastTime + 1000) {\n        const currentFps = Math.round(frameCount * 1000 / (currentTime - lastTime));\n        setFps(prev => [...prev.slice(-4), currentFps]);\n        \n        frameCount = 0;\n        lastTime = currentTime;\n      }\n      \n      animationId = requestAnimationFrame(measureFPS);\n    };\n\n    measureFPS();\n\n    return () => {\n      cancelAnimationFrame(animationId);\n    };\n  }, []);\n\n  // Auto-adjust quality based on FPS\n  useEffect(() => {\n    if (fps.length >= 5) {\n      const avgFps = fps.reduce((a, b) => a + b, 0) / fps.length;\n      \n      if (avgFps < 30 && quality !== 'low') {\n        // Downgrade quality\n        if (quality === 'ultra') setQuality('high');\n        else if (quality === 'high') setQuality('medium');\n        else if (quality === 'medium') setQuality('low');\n      }\n    }\n  }, [fps, quality]);\n\n  const qualitySettings = {\n    low: {\n      postProcessing: false,\n      shadows: false,\n      particleCount: 100,\n      starCount: 500\n    },\n    medium: {\n      postProcessing: false,\n      shadows: false,\n      particleCount: 250,\n      starCount: 1500\n    },\n    high: {\n      postProcessing: true,\n      shadows: false,\n      particleCount: 500,\n      starCount: 3000\n    },\n    ultra: {\n      postProcessing: true,\n      shadows: true,\n      particleCount: 1000,\n      starCount: 5000\n    }\n  };\n\n  const settings = qualitySettings[quality];\n\n  return {\n    quality,\n    ...settings,\n    setQuality,\n    autoDetect: () => {\n      // Re-run detection\n      setFps([]);\n    }\n  };\n}","size_bytes":3091},"server/routes/errorLogs.js":{"content":"import express from 'express';\nimport { errorLogger, ErrorCategory, ErrorSeverity } from '../utils/errorLogger.js';\n\nconst router = express.Router();\n\n// Get error summary dashboard\nrouter.get('/summary', async (req, res) => {\n  try {\n    const summary = errorLogger.getErrorSummary();\n    res.json({\n      success: true,\n      summary\n    });\n  } catch (error) {\n    console.error('Error fetching error summary:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch error summary'\n    });\n  }\n});\n\n// Get error logs with filters\nrouter.get('/logs', async (req, res) => {\n  try {\n    const { severity, category, limit = 100, date } = req.query;\n    \n    const logs = errorLogger.getLogs({\n      severity: severity,\n      category: category,\n      limit: parseInt(limit),\n      date: date\n    });\n\n    res.json({\n      success: true,\n      logs,\n      count: logs.length\n    });\n  } catch (error) {\n    console.error('Error fetching logs:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch logs'\n    });\n  }\n});\n\n// Log client-side errors\nrouter.post('/client-error', async (req, res) => {\n  try {\n    const { \n      message, \n      stack, \n      category = 'CLIENT', \n      severity = 'ERROR',\n      url,\n      userAgent,\n      details \n    } = req.body;\n\n    errorLogger.log({\n      timestamp: new Date().toISOString(),\n      severity: severity,\n      category: category,\n      message: `[CLIENT] ${message}`,\n      details: {\n        url,\n        userAgent,\n        ...details\n      },\n      stack,\n      userId: req.session?.userId,\n      sessionId: req.sessionID\n    });\n\n    res.json({\n      success: true,\n      message: 'Error logged successfully'\n    });\n  } catch (error) {\n    console.error('Error logging client error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to log error'\n    });\n  }\n});\n\n// Clear old logs (admin only)\nrouter.delete('/clear-old', async (req, res) => {\n  try {\n    const { daysToKeep = 30 } = req.body;\n    \n    // In production, add admin authentication check here\n    errorLogger.clearOldLogs(parseInt(daysToKeep));\n    \n    res.json({\n      success: true,\n      message: `Cleared logs older than ${daysToKeep} days`\n    });\n  } catch (error) {\n    console.error('Error clearing old logs:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to clear old logs'\n    });\n  }\n});\n\n// Get error statistics\nrouter.get('/stats', async (req, res) => {\n  try {\n    const stats = errorLogger.getErrorSummary();\n    \n    // Add time-based statistics\n    const today = new Date().toISOString().split('T')[0];\n    const todayLogs = errorLogger.getLogs({ date: today });\n    \n    const hourlyStats = {};\n    todayLogs.forEach(log => {\n      const hour = new Date(log.timestamp).getHours();\n      hourlyStats[hour] = (hourlyStats[hour] || 0) + 1;\n    });\n\n    res.json({\n      success: true,\n      stats: {\n        ...stats,\n        today: {\n          total: todayLogs.length,\n          byHour: hourlyStats\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching statistics:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch statistics'\n    });\n  }\n});\n\nexport default router;","size_bytes":3296},"server/utils/errorLogger.ts":{"content":"import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Error severity levels\nexport enum ErrorSeverity {\n  DEBUG = 'DEBUG',\n  INFO = 'INFO',\n  WARNING = 'WARNING',\n  ERROR = 'ERROR',\n  CRITICAL = 'CRITICAL'\n}\n\n// Error categories\nexport enum ErrorCategory {\n  DATABASE = 'DATABASE',\n  API = 'API',\n  AUTH = 'AUTH',\n  PAYMENT = 'PAYMENT',\n  MULTIPLAYER = 'MULTIPLAYER',\n  AI_GENERATION = 'AI_GENERATION',\n  VALIDATION = 'VALIDATION',\n  SYSTEM = 'SYSTEM'\n}\n\ninterface ErrorLog {\n  timestamp: string;\n  severity: ErrorSeverity;\n  category: ErrorCategory;\n  message: string;\n  details?: any;\n  stack?: string;\n  userId?: number;\n  sessionId?: string;\n  endpoint?: string;\n  method?: string;\n  ip?: string;\n}\n\nclass ErrorLogger {\n  private logDir: string;\n  private currentLogFile: string;\n  private errorStats: Map<string, number> = new Map();\n\n  constructor() {\n    this.logDir = path.join(__dirname, '../../logs');\n    this.ensureLogDirectory();\n    this.currentLogFile = this.getLogFileName();\n    this.initializeErrorStats();\n  }\n\n  private ensureLogDirectory() {\n    if (!fs.existsSync(this.logDir)) {\n      fs.mkdirSync(this.logDir, { recursive: true });\n    }\n  }\n\n  private getLogFileName(): string {\n    const date = new Date();\n    const dateStr = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    return path.join(this.logDir, `error-${dateStr}.log`);\n  }\n\n  private initializeErrorStats() {\n    // Load existing stats if available\n    const statsFile = path.join(this.logDir, 'error-stats.json');\n    if (fs.existsSync(statsFile)) {\n      try {\n        const stats = JSON.parse(fs.readFileSync(statsFile, 'utf-8'));\n        this.errorStats = new Map(Object.entries(stats));\n      } catch (error) {\n        console.error('Failed to load error stats:', error);\n      }\n    }\n  }\n\n  private saveErrorStats() {\n    const statsFile = path.join(this.logDir, 'error-stats.json');\n    const stats = Object.fromEntries(this.errorStats);\n    fs.writeFileSync(statsFile, JSON.stringify(stats, null, 2));\n  }\n\n  public log(error: ErrorLog) {\n    // Check if we need to rotate to a new log file\n    const newLogFile = this.getLogFileName();\n    if (newLogFile !== this.currentLogFile) {\n      this.currentLogFile = newLogFile;\n    }\n\n    // Format the log entry\n    const logEntry = JSON.stringify(error) + '\\n';\n\n    // Write to file\n    fs.appendFileSync(this.currentLogFile, logEntry);\n\n    // Update statistics\n    const errorKey = `${error.category}:${error.severity}`;\n    this.errorStats.set(errorKey, (this.errorStats.get(errorKey) || 0) + 1);\n    this.saveErrorStats();\n\n    // Console output for development\n    if (process.env.NODE_ENV !== 'production') {\n      this.consoleLog(error);\n    }\n\n    // For critical errors, trigger alerts\n    if (error.severity === ErrorSeverity.CRITICAL) {\n      this.handleCriticalError(error);\n    }\n  }\n\n  private consoleLog(error: ErrorLog) {\n    const colors = {\n      [ErrorSeverity.DEBUG]: '\\x1b[37m',    // White\n      [ErrorSeverity.INFO]: '\\x1b[36m',     // Cyan\n      [ErrorSeverity.WARNING]: '\\x1b[33m',  // Yellow\n      [ErrorSeverity.ERROR]: '\\x1b[31m',    // Red\n      [ErrorSeverity.CRITICAL]: '\\x1b[35m'  // Magenta\n    };\n\n    const color = colors[error.severity] || '\\x1b[0m';\n    const reset = '\\x1b[0m';\n\n    console.log(`${color}[${error.severity}] ${error.timestamp} - ${error.category}: ${error.message}${reset}`);\n    \n    if (error.details) {\n      console.log('Details:', error.details);\n    }\n    \n    if (error.stack && error.severity !== ErrorSeverity.DEBUG) {\n      console.log('Stack:', error.stack);\n    }\n  }\n\n  private handleCriticalError(error: ErrorLog) {\n    // Create a critical error file for immediate attention\n    const criticalFile = path.join(this.logDir, 'CRITICAL-ERRORS.log');\n    const criticalEntry = `\n================================================================================\nCRITICAL ERROR DETECTED\nTimestamp: ${error.timestamp}\nCategory: ${error.category}\nMessage: ${error.message}\nDetails: ${JSON.stringify(error.details, null, 2)}\nStack: ${error.stack || 'N/A'}\n================================================================================\n`;\n    fs.appendFileSync(criticalFile, criticalEntry);\n    \n    // In production, this could trigger email/SMS alerts\n    console.error('\\n🚨 CRITICAL ERROR - IMMEDIATE ATTENTION REQUIRED 🚨');\n  }\n\n  public logError(\n    category: ErrorCategory,\n    message: string,\n    error?: Error | any,\n    additionalData?: any\n  ): void {\n    this.log({\n      timestamp: new Date().toISOString(),\n      severity: ErrorSeverity.ERROR,\n      category,\n      message,\n      details: additionalData,\n      stack: error?.stack || error?.toString(),\n      ...this.getRequestContext()\n    });\n  }\n\n  public logWarning(\n    category: ErrorCategory,\n    message: string,\n    details?: any\n  ): void {\n    this.log({\n      timestamp: new Date().toISOString(),\n      severity: ErrorSeverity.WARNING,\n      category,\n      message,\n      details,\n      ...this.getRequestContext()\n    });\n  }\n\n  public logInfo(\n    category: ErrorCategory,\n    message: string,\n    details?: any\n  ): void {\n    this.log({\n      timestamp: new Date().toISOString(),\n      severity: ErrorSeverity.INFO,\n      category,\n      message,\n      details,\n      ...this.getRequestContext()\n    });\n  }\n\n  public logCritical(\n    category: ErrorCategory,\n    message: string,\n    error?: Error | any,\n    additionalData?: any\n  ): void {\n    this.log({\n      timestamp: new Date().toISOString(),\n      severity: ErrorSeverity.CRITICAL,\n      category,\n      message,\n      details: additionalData,\n      stack: error?.stack || error?.toString(),\n      ...this.getRequestContext()\n    });\n  }\n\n  private getRequestContext(): Partial<ErrorLog> {\n    // This would be populated from request context in middleware\n    return {};\n  }\n\n  public getErrorSummary(): any {\n    const summary = {\n      totalErrors: 0,\n      byCategory: {} as Record<string, number>,\n      bySeverity: {} as Record<string, number>,\n      topErrors: [] as any[]\n    };\n\n    for (const [key, count] of this.errorStats.entries()) {\n      const [category, severity] = key.split(':');\n      \n      summary.totalErrors += count;\n      \n      summary.byCategory[category] = (summary.byCategory[category] || 0) + count;\n      summary.bySeverity[severity] = (summary.bySeverity[severity] || 0) + count;\n      \n      summary.topErrors.push({ category, severity, count });\n    }\n\n    summary.topErrors.sort((a, b) => b.count - a.count);\n    summary.topErrors = summary.topErrors.slice(0, 10);\n\n    return summary;\n  }\n\n  public getLogs(options: {\n    severity?: ErrorSeverity;\n    category?: ErrorCategory;\n    limit?: number;\n    date?: string;\n  } = {}): ErrorLog[] {\n    const { severity, category, limit = 100, date } = options;\n    \n    const logFile = date \n      ? path.join(this.logDir, `error-${date}.log`)\n      : this.currentLogFile;\n\n    if (!fs.existsSync(logFile)) {\n      return [];\n    }\n\n    const content = fs.readFileSync(logFile, 'utf-8');\n    const lines = content.split('\\n').filter(line => line.trim());\n    \n    let logs: ErrorLog[] = lines.map(line => {\n      try {\n        return JSON.parse(line);\n      } catch {\n        return null;\n      }\n    }).filter(Boolean) as ErrorLog[];\n\n    // Apply filters\n    if (severity) {\n      logs = logs.filter(log => log.severity === severity);\n    }\n    \n    if (category) {\n      logs = logs.filter(log => log.category === category);\n    }\n\n    // Return most recent logs first\n    return logs.reverse().slice(0, limit);\n  }\n\n  public clearOldLogs(daysToKeep: number = 30) {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\n\n    const files = fs.readdirSync(this.logDir);\n    \n    for (const file of files) {\n      if (file.startsWith('error-') && file.endsWith('.log')) {\n        const filePath = path.join(this.logDir, file);\n        const stats = fs.statSync(filePath);\n        \n        if (stats.mtime < cutoffDate) {\n          fs.unlinkSync(filePath);\n          console.log(`Deleted old log file: ${file}`);\n        }\n      }\n    }\n  }\n}\n\n// Export singleton instance\nexport const errorLogger = new ErrorLogger();\n\n// Express middleware for error logging\nexport function errorLoggingMiddleware(req: any, res: any, next: any) {\n  // Store request context for error logging\n  const context = {\n    endpoint: req.path,\n    method: req.method,\n    ip: req.ip || req.connection.remoteAddress,\n    userId: req.session?.userId,\n    sessionId: req.sessionID\n  };\n\n  // Attach context to request for use in error handlers\n  req.errorContext = context;\n\n  // Override res.status to catch error responses\n  const originalStatus = res.status;\n  res.status = function(code: number) {\n    if (code >= 400) {\n      errorLogger.logWarning(\n        ErrorCategory.API,\n        `HTTP ${code} response`,\n        {\n          ...context,\n          statusCode: code,\n          body: req.body,\n          query: req.query\n        }\n      );\n    }\n    return originalStatus.call(this, code);\n  };\n\n  next();\n}\n\n// Global error handler for Express\nexport function globalErrorHandler(err: any, req: any, res: any, next: any) {\n  const context = req.errorContext || {};\n  \n  errorLogger.logError(\n    ErrorCategory.SYSTEM,\n    err.message || 'Unhandled error',\n    err,\n    {\n      ...context,\n      body: req.body,\n      query: req.query,\n      params: req.params\n    }\n  );\n\n  res.status(err.status || 500).json({\n    success: false,\n    error: process.env.NODE_ENV === 'production' \n      ? 'An error occurred' \n      : err.message,\n    requestId: context.sessionId\n  });\n}","size_bytes":9823},"client/src/utils/errorHandler.ts":{"content":"// Client-side error handling and logging\n\ninterface ClientError {\n  message: string;\n  stack?: string;\n  category: string;\n  severity: 'DEBUG' | 'INFO' | 'WARNING' | 'ERROR' | 'CRITICAL';\n  details?: any;\n  url?: string;\n  userAgent?: string;\n}\n\nclass ClientErrorHandler {\n  private errorQueue: ClientError[] = [];\n  private isOnline: boolean = navigator.onLine;\n  private flushInterval: number = 5000; // 5 seconds\n  private maxQueueSize: number = 50;\n\n  constructor() {\n    this.setupGlobalErrorHandlers();\n    this.setupNetworkListeners();\n    this.startFlushInterval();\n  }\n\n  private setupGlobalErrorHandlers() {\n    // Catch unhandled errors\n    window.addEventListener('error', (event) => {\n      this.logError({\n        message: event.message,\n        stack: event.error?.stack,\n        category: 'RUNTIME_ERROR',\n        severity: 'ERROR',\n        details: {\n          filename: event.filename,\n          lineno: event.lineno,\n          colno: event.colno\n        }\n      });\n    });\n\n    // Catch unhandled promise rejections\n    window.addEventListener('unhandledrejection', (event) => {\n      this.logError({\n        message: `Unhandled Promise Rejection: ${event.reason}`,\n        stack: event.reason?.stack,\n        category: 'PROMISE_REJECTION',\n        severity: 'ERROR',\n        details: {\n          reason: event.reason\n        }\n      });\n    });\n\n    // React Error Boundary errors will be caught separately\n  }\n\n  private setupNetworkListeners() {\n    window.addEventListener('online', () => {\n      this.isOnline = true;\n      this.flushErrors(); // Send queued errors when back online\n    });\n\n    window.addEventListener('offline', () => {\n      this.isOnline = false;\n    });\n  }\n\n  private startFlushInterval() {\n    setInterval(() => {\n      if (this.errorQueue.length > 0 && this.isOnline) {\n        this.flushErrors();\n      }\n    }, this.flushInterval);\n  }\n\n  public logError(error: Partial<ClientError>) {\n    const fullError: ClientError = {\n      message: error.message || 'Unknown error',\n      category: error.category || 'UNKNOWN',\n      severity: error.severity || 'ERROR',\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      ...error\n    };\n\n    // Add to queue\n    this.errorQueue.push(fullError);\n\n    // Console log in development\n    if (process.env.NODE_ENV !== 'production') {\n      console.error('[Client Error]', fullError);\n    }\n\n    // Prevent queue from growing too large\n    if (this.errorQueue.length > this.maxQueueSize) {\n      this.errorQueue = this.errorQueue.slice(-this.maxQueueSize);\n    }\n\n    // Try to send immediately if critical\n    if (fullError.severity === 'CRITICAL' && this.isOnline) {\n      this.flushErrors();\n    }\n  }\n\n  private async flushErrors() {\n    if (this.errorQueue.length === 0) return;\n\n    const errorsToSend = [...this.errorQueue];\n    this.errorQueue = [];\n\n    try {\n      for (const error of errorsToSend) {\n        await fetch('/api/error-logs/client-error', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(error)\n        });\n      }\n    } catch (error) {\n      // If sending fails, add back to queue (but avoid infinite loop)\n      console.error('Failed to send error logs:', error);\n      \n      // Only add back if we're offline\n      if (!this.isOnline) {\n        this.errorQueue = [...errorsToSend, ...this.errorQueue].slice(-this.maxQueueSize);\n      }\n    }\n  }\n\n  // Manual error logging methods\n  public logApiError(endpoint: string, error: any, requestData?: any) {\n    this.logError({\n      message: `API Error: ${endpoint}`,\n      category: 'API_ERROR',\n      severity: 'ERROR',\n      details: {\n        endpoint,\n        error: error.message || error,\n        requestData,\n        response: error.response\n      }\n    });\n  }\n\n  public logGameError(message: string, details?: any) {\n    this.logError({\n      message: `Game Error: ${message}`,\n      category: 'GAME_ERROR',\n      severity: 'ERROR',\n      details\n    });\n  }\n\n  public logMultiplayerError(message: string, details?: any) {\n    this.logError({\n      message: `Multiplayer Error: ${message}`,\n      category: 'MULTIPLAYER_ERROR',\n      severity: 'ERROR',\n      details\n    });\n  }\n\n  public logPerformanceIssue(metric: string, value: number, threshold: number) {\n    if (value > threshold) {\n      this.logError({\n        message: `Performance issue: ${metric} exceeded threshold`,\n        category: 'PERFORMANCE',\n        severity: 'WARNING',\n        details: {\n          metric,\n          value,\n          threshold,\n          exceededBy: value - threshold\n        }\n      });\n    }\n  }\n\n  // Get local error history\n  public getLocalErrors(): ClientError[] {\n    return [...this.errorQueue];\n  }\n\n  // Clear local error queue\n  public clearLocalErrors() {\n    this.errorQueue = [];\n  }\n}\n\n// Export singleton instance\nexport const clientErrorHandler = new ClientErrorHandler();\n\n// React Error Boundary Component\nimport React, { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    clientErrorHandler.logError({\n      message: error.message,\n      stack: error.stack,\n      category: 'REACT_ERROR',\n      severity: 'ERROR',\n      details: {\n        componentStack: errorInfo.componentStack\n      }\n    });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.fallback || (\n        <div className=\"flex flex-col items-center justify-center min-h-screen p-4\">\n          <div className=\"text-center space-y-4\">\n            <h1 className=\"text-2xl font-bold text-red-500\">Something went wrong</h1>\n            <p className=\"text-gray-600\">We've logged this error and will fix it soon.</p>\n            <button\n              onClick={() => window.location.reload()}\n              className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n            >\n              Reload Page\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// Performance monitoring\nexport function measurePerformance(name: string, fn: () => any) {\n  const startTime = performance.now();\n  \n  try {\n    const result = fn();\n    \n    const endTime = performance.now();\n    const duration = endTime - startTime;\n    \n    // Log if performance is poor (> 100ms)\n    clientErrorHandler.logPerformanceIssue(name, duration, 100);\n    \n    return result;\n  } catch (error) {\n    clientErrorHandler.logError({\n      message: `Error in ${name}`,\n      category: 'FUNCTION_ERROR',\n      severity: 'ERROR',\n      details: { functionName: name, error }\n    });\n    throw error;\n  }\n}\n\n// API call wrapper with error logging\nexport async function apiCall(endpoint: string, options: RequestInit = {}) {\n  try {\n    const response = await fetch(endpoint, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    });\n\n    if (!response.ok) {\n      const error = await response.json().catch(() => ({ error: 'Unknown error' }));\n      throw new Error(error.error || `HTTP ${response.status}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    clientErrorHandler.logApiError(endpoint, error, options.body);\n    throw error;\n  }\n}","size_bytes":7672},"client/src/components/pages/ErrorDashboard.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { Button } from '../ui/button';\nimport { AlertCircle, AlertTriangle, Info, Bug, Activity, RefreshCw, Trash2 } from 'lucide-react';\n\ninterface ErrorLog {\n  timestamp: string;\n  severity: string;\n  category: string;\n  message: string;\n  details?: any;\n  stack?: string;\n  endpoint?: string;\n  method?: string;\n}\n\ninterface ErrorStats {\n  totalErrors: number;\n  byCategory: Record<string, number>;\n  bySeverity: Record<string, number>;\n  topErrors: Array<{ category: string; severity: string; count: number }>;\n  today?: {\n    total: number;\n    byHour: Record<string, number>;\n  };\n}\n\nexport default function ErrorDashboard() {\n  const [logs, setLogs] = useState<ErrorLog[]>([]);\n  const [stats, setStats] = useState<ErrorStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedSeverity, setSelectedSeverity] = useState<string>('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [expandedLog, setExpandedLog] = useState<number | null>(null);\n\n  useEffect(() => {\n    fetchLogs();\n    fetchStats();\n  }, [selectedSeverity, selectedCategory]);\n\n  const fetchLogs = async () => {\n    try {\n      const params = new URLSearchParams();\n      if (selectedSeverity) params.append('severity', selectedSeverity);\n      if (selectedCategory) params.append('category', selectedCategory);\n      params.append('limit', '100');\n\n      const response = await fetch(`/api/error-logs/logs?${params}`);\n      const data = await response.json();\n      \n      if (data.success) {\n        setLogs(data.logs);\n      }\n    } catch (error) {\n      console.error('Failed to fetch logs:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchStats = async () => {\n    try {\n      const response = await fetch('/api/error-logs/stats');\n      const data = await response.json();\n      \n      if (data.success) {\n        setStats(data.stats);\n      }\n    } catch (error) {\n      console.error('Failed to fetch stats:', error);\n    }\n  };\n\n  const clearOldLogs = async () => {\n    if (!confirm('Are you sure you want to clear logs older than 30 days?')) return;\n    \n    try {\n      const response = await fetch('/api/error-logs/clear-old', {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ daysToKeep: 30 })\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        alert(data.message);\n        fetchLogs();\n        fetchStats();\n      }\n    } catch (error) {\n      console.error('Failed to clear old logs:', error);\n    }\n  };\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'CRITICAL':\n      case 'ERROR':\n        return <AlertCircle className=\"h-4 w-4\" />;\n      case 'WARNING':\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'INFO':\n        return <Info className=\"h-4 w-4\" />;\n      default:\n        return <Bug className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'CRITICAL':\n        return 'bg-purple-500';\n      case 'ERROR':\n        return 'bg-red-500';\n      case 'WARNING':\n        return 'bg-yellow-500';\n      case 'INFO':\n        return 'bg-blue-500';\n      case 'DEBUG':\n        return 'bg-gray-500';\n      default:\n        return 'bg-gray-400';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold\">Error Dashboard</h1>\n        <div className=\"flex gap-2\">\n          <Button onClick={fetchLogs} variant=\"outline\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Refresh\n          </Button>\n          <Button onClick={clearOldLogs} variant=\"destructive\">\n            <Trash2 className=\"h-4 w-4 mr-2\" />\n            Clear Old Logs\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Errors</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.totalErrors}</div>\n              {stats.today && (\n                <p className=\"text-xs text-muted-foreground\">\n                  {stats.today.total} today\n                </p>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Critical Errors</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-500\">\n                {stats.bySeverity['CRITICAL'] || 0}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Errors</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-500\">\n                {stats.bySeverity['ERROR'] || 0}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Warnings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-500\">\n                {stats.bySeverity['WARNING'] || 0}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Filters</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4\">\n            <select\n              value={selectedSeverity}\n              onChange={(e) => setSelectedSeverity(e.target.value)}\n              className=\"px-3 py-2 border rounded-md\"\n            >\n              <option value=\"\">All Severities</option>\n              <option value=\"CRITICAL\">Critical</option>\n              <option value=\"ERROR\">Error</option>\n              <option value=\"WARNING\">Warning</option>\n              <option value=\"INFO\">Info</option>\n              <option value=\"DEBUG\">Debug</option>\n            </select>\n\n            <select\n              value={selectedCategory}\n              onChange={(e) => setSelectedCategory(e.target.value)}\n              className=\"px-3 py-2 border rounded-md\"\n            >\n              <option value=\"\">All Categories</option>\n              <option value=\"DATABASE\">Database</option>\n              <option value=\"API\">API</option>\n              <option value=\"AUTH\">Auth</option>\n              <option value=\"PAYMENT\">Payment</option>\n              <option value=\"MULTIPLAYER\">Multiplayer</option>\n              <option value=\"AI_GENERATION\">AI Generation</option>\n              <option value=\"SYSTEM\">System</option>\n              <option value=\"CLIENT\">Client</option>\n            </select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Error Logs */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Errors</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            {logs.length === 0 ? (\n              <p className=\"text-muted-foreground text-center py-8\">\n                No errors found with the selected filters\n              </p>\n            ) : (\n              logs.map((log, index) => (\n                <div\n                  key={index}\n                  className=\"border rounded-lg p-3 hover:bg-accent/50 cursor-pointer\"\n                  onClick={() => setExpandedLog(expandedLog === index ? null : index)}\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start gap-2\">\n                      {getSeverityIcon(log.severity)}\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <Badge className={getSeverityColor(log.severity)}>\n                            {log.severity}\n                          </Badge>\n                          <Badge variant=\"outline\">{log.category}</Badge>\n                          {log.endpoint && (\n                            <Badge variant=\"secondary\">\n                              {log.method} {log.endpoint}\n                            </Badge>\n                          )}\n                        </div>\n                        <p className=\"mt-1 font-medium\">{log.message}</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {new Date(log.timestamp).toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {expandedLog === index && (\n                    <div className=\"mt-3 pt-3 border-t\">\n                      {log.details && (\n                        <div className=\"mb-2\">\n                          <p className=\"text-sm font-medium mb-1\">Details:</p>\n                          <pre className=\"text-xs bg-muted p-2 rounded overflow-x-auto\">\n                            {JSON.stringify(log.details, null, 2)}\n                          </pre>\n                        </div>\n                      )}\n                      {log.stack && (\n                        <div>\n                          <p className=\"text-sm font-medium mb-1\">Stack Trace:</p>\n                          <pre className=\"text-xs bg-muted p-2 rounded overflow-x-auto\">\n                            {log.stack}\n                          </pre>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              ))\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10375}},"version":1}